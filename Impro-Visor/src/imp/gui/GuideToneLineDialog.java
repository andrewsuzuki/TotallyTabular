/**
 * This Java Class is part of the Impro-Visor Application.
 *
 * Copyright (C) 2005-2012 Robert Keller and Harvey Mudd College XML export code
 * is also Copyright (C) 2009-2010 Nicolas Froment (aka Lasconic).
 *
 * Impro-Visor is free software; you can redistribute it and/or modifyc it under
 * the terms of the GNU General Public License as published by the Free Software
 * Foundation; either version 2 of the License, or (at your option) any later
 * version.
 *
 * Impro-Visor is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of merchantability or fitness
 * for a particular purpose. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * Impro-Visor; if not, write to the Free Software Foundation, Inc., 51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301 USA
 */
package imp.gui;

import imp.Constants;
import static imp.Constants.A2;
import static imp.Constants.C1;
import static imp.Constants.C7;
import static imp.Constants.E5;
import imp.ImproVisor;
import imp.com.PasteCommand;
import imp.com.PlayScoreCommand;
import imp.data.Chord;
import imp.data.ChordPart;
import imp.data.GuideLineGenerator;
import imp.data.MelodyInContext;
import imp.data.MelodyPart;
import imp.data.Note;
import imp.data.NoteSymbol;
import java.util.Enumeration;
import javax.swing.AbstractButton;
import javax.swing.ButtonGroup;
import javax.swing.JRadioButton;
import imp.gui.Notate.Mode;
import imp.lickgen.transformations.Transform;
import imp.util.Preferences;
import imp.util.TransformFilter;
import java.io.File;
import java.util.Arrays;
import java.util.Comparator;
import javax.swing.JPanel;
import polya.Polylist;

/**
 * Display that lets the user control the options for generating a guide 
 * tone line.
 * @author Mikayla Konst and Carli Lessard
 */
public class GuideToneLineDialog extends javax.swing.JDialog implements Constants {

    private final Notate notate;
    private final TransformPanel transformationPanel;
    private Transform transform;
    
    //the default keys that are initially clicked
    //only used once, in the constructor
    //after that, previous limits passed to range chooser
    private static final int [] bassDefaults = {G2, C4};
    private static final int [] trebleDefaults = {C4, G5};
    private static final int [] grandDefaults = {G2, G5};
    
    //range of keys which are clickable
    private static final int [] bassLimits = {C1, E5};
    private static final int [] trebleLimits = {A2, C7};
    private static final int [] grandLimits = {C1, C7};
    
    //range limits
    private int [] range;
    private static final int LOW = 0;
    private static final int HIGH = 1;
    private Object Improvisor;
    
    /**
     * Creates new form GuideToneLineDialog
     * @param parent Frame that spawned this dialog box
     * @param modal true if user cannot access main window until dialog box is closed, false otherwise
     */
    public GuideToneLineDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        this.setTitle("Generate Guide Tone Line");
        this.setResizable(true);
        notate = (Notate)this.getParent();
        transformationPanel = notate.lickgenFrame.getTransformPanel();
        initComponents();

        //updates scale Degree buttons based on first chord of leadsheet
        //and whether or not allow color tones is checked
        updateButtons(); 
        
        //make the transform buttons whatever they are in the transform panel
        updateTransformButtons();
        
        updateRange();
        
        String musician = (String)musicianChooser.getSelectedItem();
        File dir = ImproVisor.getTransformDirectory();
        File file = new File(dir, musician+TransformFilter.EXTENSION);
        transform = new Transform(file);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        directionButtons = new javax.swing.ButtonGroup();
        numberOfLinesButtons = new javax.swing.ButtonGroup();
        scaleDegreeButtons = new javax.swing.ButtonGroup();
        maxDurationButtons = new javax.swing.ButtonGroup();
        lineTypeButtons = new javax.swing.ButtonGroup();
        scaleDegree2Buttons = new javax.swing.ButtonGroup();
        linesPanel = new javax.swing.JPanel();
        oneLine = new javax.swing.JRadioButton();
        twoLines = new javax.swing.JRadioButton();
        directionPanel = new javax.swing.JPanel();
        descending = new javax.swing.JRadioButton();
        noPreference = new javax.swing.JRadioButton();
        ascending = new javax.swing.JRadioButton();
        scaleDegPanel = new javax.swing.JPanel();
        scaleDegLabel = new javax.swing.JLabel();
        buttonPanel = new javax.swing.JPanel();
        generateLine = new javax.swing.JButton();
        transformPanel = new javax.swing.JPanel();
        transformLine = new javax.swing.JButton();
        scaleDeg2Panel = new javax.swing.JPanel();
        scaleDeg2Label = new javax.swing.JLabel();
        maxDurationPanel = new javax.swing.JPanel();
        noPref = new javax.swing.JRadioButton();
        whole = new javax.swing.JRadioButton();
        half = new javax.swing.JRadioButton();
        quarter = new javax.swing.JRadioButton();
        playPanel = new javax.swing.JPanel();
        playBtn = new javax.swing.JButton();
        pauseBtn = new javax.swing.JToggleButton();
        stopBtn = new javax.swing.JButton();
        allowColorPanel = new javax.swing.JPanel();
        allowColorBox = new javax.swing.JCheckBox();
        rangeChooserPanel = new javax.swing.JPanel();
        rangeChooserButton = new javax.swing.JButton();
        revertOrReapplyPanel = new javax.swing.JPanel();
        revertLine = new javax.swing.JButton();
        reapplyTransform = new javax.swing.JButton();
        numberOfLinesLabel = new javax.swing.JLabel();
        directionLabel = new javax.swing.JLabel();
        maxDurationLabel = new javax.swing.JLabel();
        startLabel = new javax.swing.JLabel();
        colorLabel = new javax.swing.JLabel();
        rangeLabel = new javax.swing.JLabel();
        soloLabel = new javax.swing.JLabel();
        playLabel = new javax.swing.JLabel();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(20, 20), new java.awt.Dimension(20, 20), new java.awt.Dimension(20, 20));
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(20, 20), new java.awt.Dimension(20, 20), new java.awt.Dimension(20, 20));
        filler3 = new javax.swing.Box.Filler(new java.awt.Dimension(20, 20), new java.awt.Dimension(20, 20), new java.awt.Dimension(20, 20));
        filler4 = new javax.swing.Box.Filler(new java.awt.Dimension(20, 20), new java.awt.Dimension(20, 20), new java.awt.Dimension(20, 20));
        filler5 = new javax.swing.Box.Filler(new java.awt.Dimension(20, 20), new java.awt.Dimension(20, 20), new java.awt.Dimension(20, 20));
        filler6 = new javax.swing.Box.Filler(new java.awt.Dimension(20, 20), new java.awt.Dimension(20, 20), new java.awt.Dimension(20, 20));
        filler7 = new javax.swing.Box.Filler(new java.awt.Dimension(20, 20), new java.awt.Dimension(20, 20), new java.awt.Dimension(20, 20));
        filler8 = new javax.swing.Box.Filler(new java.awt.Dimension(20, 20), new java.awt.Dimension(20, 20), new java.awt.Dimension(20, 20));
        filler9 = new javax.swing.Box.Filler(new java.awt.Dimension(20, 20), new java.awt.Dimension(20, 20), new java.awt.Dimension(20, 20));
        jLabel1 = new javax.swing.JLabel();
        musicianChooser = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(600, 600));
        setPreferredSize(new java.awt.Dimension(600, 600));
        getContentPane().setLayout(new java.awt.GridBagLayout());

        linesPanel.setLayout(new java.awt.GridBagLayout());

        numberOfLinesButtons.add(oneLine);
        oneLine.setSelected(true);
        oneLine.setText("One Line");
        oneLine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                oneLineActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        linesPanel.add(oneLine, gridBagConstraints);

        numberOfLinesButtons.add(twoLines);
        twoLines.setText("Two Lines");
        twoLines.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                twoLinesActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        linesPanel.add(twoLines, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        getContentPane().add(linesPanel, gridBagConstraints);

        directionPanel.setLayout(new java.awt.GridBagLayout());

        directionButtons.add(descending);
        descending.setText("Descending");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        directionPanel.add(descending, gridBagConstraints);

        directionButtons.add(noPreference);
        noPreference.setSelected(true);
        noPreference.setText("No Preference");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        directionPanel.add(noPreference, gridBagConstraints);

        directionButtons.add(ascending);
        ascending.setText("Ascending");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        directionPanel.add(ascending, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        getContentPane().add(directionPanel, gridBagConstraints);

        scaleDegPanel.setLayout(new java.awt.GridBagLayout());

        scaleDegLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        scaleDegLabel.setText("Line 1:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        scaleDegPanel.add(scaleDegLabel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        getContentPane().add(scaleDegPanel, gridBagConstraints);

        buttonPanel.setLayout(new java.awt.GridBagLayout());

        generateLine.setText("Generate Guide Tone Line");
        generateLine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateLineActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        buttonPanel.add(generateLine, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 16;
        getContentPane().add(buttonPanel, gridBagConstraints);

        transformPanel.setLayout(new java.awt.GridBagLayout());

        transformLine.setText("Generate Solo Over Line");
        transformLine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transformLineActionPerformed(evt);
            }
        });
        transformPanel.add(transformLine, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 22;
        getContentPane().add(transformPanel, gridBagConstraints);

        scaleDeg2Panel.setLayout(new java.awt.GridBagLayout());

        scaleDeg2Label.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        scaleDeg2Label.setText("Line 2:");
        scaleDeg2Panel.add(scaleDeg2Label, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        getContentPane().add(scaleDeg2Panel, gridBagConstraints);

        maxDurationPanel.setLayout(new java.awt.GridBagLayout());

        maxDurationButtons.add(noPref);
        noPref.setSelected(true);
        noPref.setText("No Preference");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        maxDurationPanel.add(noPref, gridBagConstraints);

        maxDurationButtons.add(whole);
        whole.setText("Whole");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        maxDurationPanel.add(whole, gridBagConstraints);

        maxDurationButtons.add(half);
        half.setText("Half");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        maxDurationPanel.add(half, gridBagConstraints);

        maxDurationButtons.add(quarter);
        quarter.setText("Quarter");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        maxDurationPanel.add(quarter, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 9;
        getContentPane().add(maxDurationPanel, gridBagConstraints);

        playPanel.setLayout(new java.awt.GridBagLayout());

        playBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imp/gui/graphics/toolbar/play.gif"))); // NOI18N
        playBtn.setToolTipText("Play the entire leadsheet, starting with the first chorus.\nTo play just the current chorus, select the first beat of that chorus and press Shift-Enter.");
        playBtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        playBtn.setMaximumSize(new java.awt.Dimension(30, 30));
        playBtn.setMinimumSize(new java.awt.Dimension(30, 30));
        playBtn.setPreferredSize(new java.awt.Dimension(30, 30));
        playBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playBtnActionPerformed(evt);
            }
        });
        playPanel.add(playBtn, new java.awt.GridBagConstraints());

        pauseBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imp/gui/graphics/toolbar/pause.gif"))); // NOI18N
        pauseBtn.setToolTipText("Pause or resume playback.");
        pauseBtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        pauseBtn.setEnabled(false);
        pauseBtn.setMaximumSize(new java.awt.Dimension(30, 30));
        pauseBtn.setMinimumSize(new java.awt.Dimension(30, 30));
        pauseBtn.setPreferredSize(new java.awt.Dimension(30, 30));
        pauseBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pauseBtnActionPerformed(evt);
            }
        });
        playPanel.add(pauseBtn, new java.awt.GridBagConstraints());

        stopBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imp/gui/graphics/toolbar/stop.gif"))); // NOI18N
        stopBtn.setToolTipText("Stop playback.");
        stopBtn.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        stopBtn.setEnabled(false);
        stopBtn.setMaximumSize(new java.awt.Dimension(30, 30));
        stopBtn.setMinimumSize(new java.awt.Dimension(30, 30));
        stopBtn.setPreferredSize(new java.awt.Dimension(30, 30));
        stopBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopBtnActionPerformed(evt);
            }
        });
        playPanel.add(stopBtn, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 17;
        getContentPane().add(playPanel, gridBagConstraints);

        allowColorPanel.setLayout(new java.awt.GridBagLayout());

        allowColorBox.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        allowColorBox.setText("Allow Color Tones");
        allowColorBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allowColorBoxActionPerformed(evt);
            }
        });
        allowColorPanel.add(allowColorBox, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 11;
        getContentPane().add(allowColorPanel, gridBagConstraints);

        rangeChooserPanel.setLayout(new java.awt.GridBagLayout());

        rangeChooserButton.setText("Choose Range");
        rangeChooserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rangeChooserButtonActionPerformed(evt);
            }
        });
        rangeChooserPanel.add(rangeChooserButton, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 13;
        getContentPane().add(rangeChooserPanel, gridBagConstraints);

        revertOrReapplyPanel.setLayout(new java.awt.GridBagLayout());

        revertLine.setText("Restore Guide Tone Line");
        revertLine.setToolTipText("");
        revertLine.setEnabled(false);
        revertLine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                revertLineActionPerformed(evt);
            }
        });
        revertOrReapplyPanel.add(revertLine, new java.awt.GridBagConstraints());

        reapplyTransform.setText("Try Again");
        reapplyTransform.setEnabled(false);
        reapplyTransform.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reapplyTransformActionPerformed(evt);
            }
        });
        revertOrReapplyPanel.add(reapplyTransform, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 23;
        getContentPane().add(revertOrReapplyPanel, gridBagConstraints);

        numberOfLinesLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        numberOfLinesLabel.setText("Number of Lines:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(numberOfLinesLabel, gridBagConstraints);

        directionLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        directionLabel.setText("Direction:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(directionLabel, gridBagConstraints);

        maxDurationLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        maxDurationLabel.setText("Max Note Duration:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(maxDurationLabel, gridBagConstraints);

        startLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        startLabel.setText("Start on Scale Degree:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(startLabel, gridBagConstraints);

        colorLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        colorLabel.setText("Color:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(colorLabel, gridBagConstraints);

        rangeLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rangeLabel.setText("Range:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(rangeLabel, gridBagConstraints);

        soloLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        soloLabel.setText("Solo:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 19;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(soloLabel, gridBagConstraints);

        playLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        playLabel.setText("Play:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 15;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        getContentPane().add(playLabel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        getContentPane().add(filler1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        getContentPane().add(filler2, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        getContentPane().add(filler3, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 10;
        getContentPane().add(filler4, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 12;
        getContentPane().add(filler5, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 14;
        getContentPane().add(filler6, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 18;
        getContentPane().add(filler7, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        getContentPane().add(filler8, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 24;
        getContentPane().add(filler9, gridBagConstraints);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Select Musician:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 20;
        getContentPane().add(jLabel1, gridBagConstraints);

        populateMusicianList();
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 21;
        getContentPane().add(musicianChooser, gridBagConstraints);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    
    private void populateMusicianList()
  {
    File directory = ImproVisor.getTransformDirectory();
    //System.out.println("populating from " + directory);
    if( directory.isDirectory() )
      {
        String fileName[] = directory.list();

        // 6-25-13 Hayden Blauzvern
        // Fix for Linux, where the file list is not in alphabetic order
        Arrays.sort(fileName, new Comparator<String>()
        {
        public int compare(String s1, String s2)
          {
            return s1.toUpperCase().compareTo(s2.toUpperCase());
          }

        });
       
        // Add names of grammar files
        for (String name : fileName) {
            if( name.endsWith(TransformFilter.EXTENSION) )
            {
                int len = name.length();
                String stem = name.substring(0, len - TransformFilter.EXTENSION.length());
                musicianChooser.addItem(stem);
            }
        }
      }
  }
    
    private void generateLineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateLineActionPerformed
        //Get which options are selected
        JRadioButton direction = getSelected(directionButtons);
        JRadioButton scaleDeg = getSelected(scaleDegreeButtons);
        JRadioButton scaleDeg2 = getSelected(scaleDegree2Buttons);
        JRadioButton maxDur = getSelected(maxDurationButtons);
        //JRadioButton lineTypeButton = getSelected(lineTypeButtons);
        
        //Get paramaters to pass into constructor
        //notate = (Notate)this.getParent();
        String scaleDegString;
        if(scaleDeg!=null){
           scaleDegString = scaleDeg.getText(); 
        }else{
            scaleDegString = "NOCHORD";
        }
        
        String scaleDegString2;
        if(scaleDeg2!=null){
           scaleDegString2 = scaleDeg2.getText(); 
        }else{
            scaleDegString2 = "NOCHORD";
        }
        
        boolean alternating = true;
        int duration = buttonToDuration(maxDur);
        //int lineType = buttonToLineType(lineTypeButton);
        boolean allowColor = allowColorBox.isSelected();
        boolean mix = twoLines.isSelected();


        //construct a guide tone line generator, make a guide tone line (melody part), then add it as a new chorus
        
        if(!notate.getChordProg().getChords().isEmpty()){
            GuideLineGenerator guideLine = new GuideLineGenerator(notate.getChordProg(), 
                                                              buttonToDirection(direction), 
                                                              scaleDegString,
                                                              scaleDegString2,
                                                              alternating, 
                                                              range[LOW], range[HIGH], 
                                                              duration,
                                                              mix,
                                                              allowColor);
            MelodyPart guideToneLine = guideLine.makeGuideLine();
            notate.addChorus(guideToneLine);
        }
        
        updatePlayButtons();

    }//GEN-LAST:event_generateLineActionPerformed

    private int buttonToDuration(JRadioButton b){
        if(b.equals(noPref)){
            return 0;
        }else if(b.equals(whole)){
            return WHOLE;
        }else if(b.equals(half)){
            return HALF;
        }else if(b.equals(quarter)){
            return QUARTER;
        }else{
            //shouldn't happen
            return 0;
        }
    }
    
    
    public void updateButtons(){
        setButtonText(scaleDegreeButtons, scaleDegPanel);
        setButtonText(scaleDegree2Buttons, scaleDeg2Panel);
        enableButtons(scaleDegree2Buttons, twoLines.isSelected());
        setVisible(isVisible());
    }
    
    //called from notate when stave type is changed
    public void updateRange(){
        
        
        int [] limits, defaultRange;
        StaveType stave = Preferences.getStaveTypeFromPreferences();
        
        if(stave==StaveType.TREBLE){
            limits = trebleLimits;
            defaultRange = trebleDefaults;
        }else if(stave==StaveType.BASS){
            limits = bassLimits;
            defaultRange = bassDefaults;
        }else{
            limits = grandLimits;
            defaultRange = grandDefaults;
        }
        
        //if the range needs to be changed, change it.
        if(range==null||!inRange(range[LOW], limits[LOW], limits[HIGH])||!inRange(range[HIGH], limits[LOW], limits[HIGH])){
            range = defaultRange;
        }
    }
    
    private boolean inRange(int n, int low, int high){
        return n>=low&&n<=high;
    }
    
    private void setButtonText(ButtonGroup group, JPanel panel){
        panel.removeAll();
        if(panel.equals(scaleDegPanel)){
            panel.add(scaleDegLabel);
        }else if(panel.equals(scaleDeg2Panel)){
            panel.add(scaleDeg2Label);
        }
        
        removeAll(group);
        Chord firstChord = notate.getChordProg().getChord(0);
        if(firstChord==null){
            return;
        }
        Polylist chordSpell = firstChord.getSpell();
        if(chordSpell==null){
            return;
        }
        while(!chordSpell.isEmpty()){
            Note nextNote = ((NoteSymbol)chordSpell.first()).toNote();
            Polylist relPitch = nextNote.toRelativePitch(firstChord);
            String degree = (String)relPitch.second();
            chordSpell = chordSpell.rest();
            JRadioButton b = new JRadioButton(degree);
            panel.add(b);
            group.add(b);
            b.setSelected(true);
        }
        if(allowColorBox.isSelected()){
            Polylist chordColor = firstChord.getColor();
            if(chordColor==null){
                return;
            }
            while(!chordColor.isEmpty()){
                Note nextNote = ((NoteSymbol)chordColor.first()).toNote();
                Polylist relPitch = nextNote.toRelativePitch(firstChord);
                String degree = (String)relPitch.second();
                chordColor = chordColor.rest();
                JRadioButton b = new JRadioButton(degree);
                panel.add(b);
                group.add(b);
                b.setSelected(true);
            }
        }
        if(panel.getComponents().length>1){
            JRadioButton first = (JRadioButton)panel.getComponent(1);
            first.setSelected(true);
        }
        
        
    }
    
    private void twoLinesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_twoLinesActionPerformed
        enableButtons(scaleDegree2Buttons, true);
    }//GEN-LAST:event_twoLinesActionPerformed

    /**
     * 
     * @param group ButtonGroup to enable/disable
     * @param enabled true to enable, false to disable
     */
    private void enableButtons(ButtonGroup group, boolean enabled){
        for(Enumeration<AbstractButton> buttons = group.getElements(); buttons.hasMoreElements();){
            AbstractButton b = buttons.nextElement();
            b.setEnabled(enabled);
        }
    }
    
    /**
     * Removes all buttons from a button group
     * @param group 
     */
    private void removeAll(ButtonGroup group){
        for(Enumeration<AbstractButton> buttons = group.getElements(); buttons.hasMoreElements();){
            AbstractButton b = buttons.nextElement();
            group.remove(b);
        }
    }
    
    private void oneLineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_oneLineActionPerformed
        enableButtons(scaleDegree2Buttons, false);
    }//GEN-LAST:event_oneLineActionPerformed

    private void transformLineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transformLineActionPerformed

        applySubstitutions();
        
      //  transformationPanel.applySubstitutions();
        
      //  updateTransformButtons();
        
        updatePlayButtons();
        
    }//GEN-LAST:event_transformLineActionPerformed

    private void revertLineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_revertLineActionPerformed
        
        revertSubs();
        
        //updateTransformButtons();
        
        updatePlayButtons();

    }//GEN-LAST:event_revertLineActionPerformed
    
    private void allowColorBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allowColorBoxActionPerformed
        this.setVisible(false);
        updateButtons();
        this.setVisible(true);
    }//GEN-LAST:event_allowColorBoxActionPerformed

    public void updateTransformButtons(){
        revertLine.setEnabled(transformationPanel.getRevertEnabled());
        reapplyTransform.setEnabled(transformationPanel.getReapplyEnabled());
    }
    
    private void reapplyTransformActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reapplyTransformActionPerformed
        
        revertSubs();
        applySubstitutions();
        
        //updateTransformButtons();
        
        updatePlayButtons();
        
    }//GEN-LAST:event_reapplyTransformActionPerformed

    public void updatePlayButtons(){
        playBtn.setEnabled(notate.getPlayEnabled());
        pauseBtn.setEnabled(notate.getPauseEnabled());
        stopBtn.setEnabled(notate.getStopEnabled());
        
        playBtn.setSelected(notate.getPlaySelected());
        pauseBtn.setSelected(notate.getPauseSelected());
        stopBtn.setSelected(notate.getStopSelected());
    }
    
    
    private void playBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playBtnActionPerformed
        notate.improvisationOn = false;
        notate.improvOn = false;
        notate.playAll();
        
        updatePlayButtons();
    }//GEN-LAST:event_playBtnActionPerformed

    private void stopBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopBtnActionPerformed
        notate.stopButtonPressed();
        
        updatePlayButtons();
    }//GEN-LAST:event_stopBtnActionPerformed

    private void pauseBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pauseBtnActionPerformed
        if( notate.getMode() == Mode.PLAYING_PAUSED )
        {
            notate.setMode(Mode.PLAYING);
        }
        else
        {
            notate.setMode(Mode.PLAYING_PAUSED);
        }
        notate.pauseScore();
        if( notate.getKeyboard() != null )
        {
            String v = notate.getKeyboard().voicingFromKeyboard();
            String currentChord = notate.getKeyboard().getPresentChordDisplayText();

            if( notate.getVoicingTestFrame() != null && notate.getVoicingTestFrame().isVisible() )
            {
                notate.selectVoicing(v, currentChord);
            }
        }

        updatePlayButtons();
    }//GEN-LAST:event_pauseBtnActionPerformed

    private void rangeChooserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rangeChooserButtonActionPerformed
        RangeChooser rangeChooser = new RangeChooser(notate, range[LOW], range[HIGH], OCTAVE);
        range = rangeChooser.getRange();
    }//GEN-LAST:event_rangeChooserButtonActionPerformed

    /**
     * returns which JRadioButton in a ButtonGroup is selected
     * @param group the ButtonGroup from which you want to return the selected button
     * @return the JRadioButton that is selected
     */
    private JRadioButton getSelected(ButtonGroup group){
        for(Enumeration<AbstractButton> buttons = group.getElements(); buttons.hasMoreElements();){
            AbstractButton b = buttons.nextElement();
            if(b.isSelected()){
                return (JRadioButton)b;
            }
        }
        return null;
    }
    
    /**
     * returns the direction associated with the given button
     * @param b a JRadioButton
     * @return the direction associated with that button (1 for up, 0 for same, -1 for down)
     */
    private int buttonToDirection(JRadioButton b){
        if(b.equals(ascending)){
            return 1;
        }else if(b.equals(descending)){
            return -1;
        }else if(b.equals(noPreference)){
            return 0;
        }else{
            //shouldn't happen
            return 0;
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GuideToneLineDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GuideToneLineDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GuideToneLineDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GuideToneLineDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                GuideToneLineDialog dialog = new GuideToneLineDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox allowColorBox;
    private javax.swing.JPanel allowColorPanel;
    private javax.swing.JRadioButton ascending;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JLabel colorLabel;
    private javax.swing.JRadioButton descending;
    private javax.swing.ButtonGroup directionButtons;
    private javax.swing.JLabel directionLabel;
    private javax.swing.JPanel directionPanel;
    private javax.swing.Box.Filler filler1;
    private javax.swing.Box.Filler filler2;
    private javax.swing.Box.Filler filler3;
    private javax.swing.Box.Filler filler4;
    private javax.swing.Box.Filler filler5;
    private javax.swing.Box.Filler filler6;
    private javax.swing.Box.Filler filler7;
    private javax.swing.Box.Filler filler8;
    private javax.swing.Box.Filler filler9;
    private javax.swing.JButton generateLine;
    private javax.swing.JRadioButton half;
    private javax.swing.JLabel jLabel1;
    private javax.swing.ButtonGroup lineTypeButtons;
    private javax.swing.JPanel linesPanel;
    private javax.swing.ButtonGroup maxDurationButtons;
    private javax.swing.JLabel maxDurationLabel;
    private javax.swing.JPanel maxDurationPanel;
    private javax.swing.JComboBox musicianChooser;
    private javax.swing.JRadioButton noPref;
    private javax.swing.JRadioButton noPreference;
    private javax.swing.ButtonGroup numberOfLinesButtons;
    private javax.swing.JLabel numberOfLinesLabel;
    private javax.swing.JRadioButton oneLine;
    private javax.swing.JToggleButton pauseBtn;
    private javax.swing.JButton playBtn;
    private javax.swing.JLabel playLabel;
    private javax.swing.JPanel playPanel;
    private javax.swing.JRadioButton quarter;
    private javax.swing.JButton rangeChooserButton;
    private javax.swing.JPanel rangeChooserPanel;
    private javax.swing.JLabel rangeLabel;
    private javax.swing.JButton reapplyTransform;
    private javax.swing.JButton revertLine;
    private javax.swing.JPanel revertOrReapplyPanel;
    private javax.swing.JLabel scaleDeg2Label;
    private javax.swing.JPanel scaleDeg2Panel;
    private javax.swing.JLabel scaleDegLabel;
    private javax.swing.JPanel scaleDegPanel;
    private javax.swing.ButtonGroup scaleDegree2Buttons;
    private javax.swing.ButtonGroup scaleDegreeButtons;
    private javax.swing.JLabel soloLabel;
    private javax.swing.JLabel startLabel;
    private javax.swing.JButton stopBtn;
    private javax.swing.JButton transformLine;
    private javax.swing.JPanel transformPanel;
    private javax.swing.JRadioButton twoLines;
    private javax.swing.JRadioButton whole;
    // End of variables declaration//GEN-END:variables

    private void applySubstitutions() {
        if(notate.getChordProg().getChords().isEmpty()){
            return;
        }
        notate.stopPlaying();
        notate.adjustSelection();
        int start = notate.getCurrentSelectionStart();
        int stop = notate.getCurrentSelectionEnd();
        MelodyPart melody = notate.getCurrentMelodyPart().extract(start,
                                                                  stop,
                                                                  false);
        ChordPart chords = notate.getChordProg().extract(start, stop);
        applySubstitutionsToPart(melody, chords);
    }

    private void applySubstitutionsToPart(MelodyPart melody, ChordPart chords) {
        String musician = (String)musicianChooser.getSelectedItem();
        File directory = ImproVisor.getTransformDirectory();
        File file = new File(directory, musician+TransformFilter.EXTENSION);
        //String dir = System.getProperty("user.dir");
        //File file = new File(dir + "/transforms/"+musician+".transform");
        transform = new Transform(file);
        if(transform != null)
        {
            Stave stave = notate.getCurrentStave();
            int start = notate.getCurrentSelectionStart();
            int stop = notate.getCurrentSelectionEnd();
            notate.getCurrentMelodyPart().pushOriginalVersion(new MelodyInContext(melody.copy(), stave, start, stop));

            MelodyPart transformedPart = transform.applySubstitutionsToMelodyPart(melody,
                                                                                  chords,
                                                                                  true);
            
            pasteOver(notate.getMelodyPart(stave), transformedPart, start);
            
            //always rectify
            notate.rectifySelection(stave,start,stop);

            notate.playCurrentSelection(false, 
                                        0, 
                                        PlayScoreCommand.USEDRUMS, 
                                        "putLick " + start + " - " + stop);
            ImproVisor.setPlayEntrySounds(true);
            
            //Current MelodyPart was just transformed - set enabled to true
            revertLine.setEnabled(true);
            reapplyTransform.setEnabled(true);
        }
    }

    /**
     * Pastes source melody over dest melody at startingSlot. This calls the 
     * PasteCommand so that undo and redo can be used in notate. 
     * @param dest
     * @param source
     * @param startingSlot 
     */
    public void pasteOver(MelodyPart dest, MelodyPart source, int startingSlot)
    {
        PasteCommand paste = new PasteCommand(source,dest,startingSlot,false);
        notate.cm.execute(paste);
    }

    private void revertSubs() {
        MelodyPart currentPart = notate.getCurrentMelodyPart();
        MelodyInContext originalPart = currentPart.getRecentVersion();
        
        //prevent null pointer exception, don't try to revert an original melody
        if(originalPart==null){
            return;
        }
        //MelodyInContext originalPart = savedMelodies.pop();
        notate.stopPlaying();
        Stave stave = originalPart.getStave();
        int start = originalPart.getStart();
        int stop = originalPart.getStop();
        
        stave.setSelection(start, stop);
        pasteOver(notate.getMelodyPart(stave), originalPart.getMelody(), start);
        
        //if the stack is empty
        if(currentPart.isOriginal()){
           revertLine.setEnabled(false);
           reapplyTransform.setEnabled(false); 
        }
    }

    
}
