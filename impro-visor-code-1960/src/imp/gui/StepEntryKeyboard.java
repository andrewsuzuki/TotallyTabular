/**
 * This Java Class is part of the Impro-Visor Application
 *
 * Copyright (C) 2005-2014 Robert Keller and Harvey Mudd College
 *
 * Impro-Visor is free software; you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free Software
 * Foundation; either version 2 of the License, or (at your option) any later
 * version.
 *
 * Impro-Visor is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of merchantability or fitness
 * for a particular purpose. See the GNU General Public License for more
 * details.
 *
 *
 * You should have received a copy of the GNU General Public License along with
 * Impro-Visor; if not, write to the Free Software Foundation, Inc., 51 Franklin
 * St, Fifth Floor, Boston, MA 02110-1301 USA
 */
package imp.gui;


import imp.lickgen.Expectancy;
import imp.Constants;
import imp.com.PlayScoreCommand;
import imp.com.SetNoteCommand;
import imp.com.SetRestCommand;
import imp.data.*;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import javax.swing.Icon;
import javax.swing.JLabel;

/**
 *
 * @author Audrey Musselman-Brown, 2012 Modified from the VoicingKeyboard class
 */
public class StepEntryKeyboard extends javax.swing.JFrame {
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {
        java.awt.GridBagConstraints gridBagConstraints;

        keyboardHelpDialog = new javax.swing.JDialog();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        keyboardLP = new javax.swing.JLayeredPane();
        keyA0 = new javax.swing.JLabel();
        keyB0 = new javax.swing.JLabel();
        keyC1 = new javax.swing.JLabel();
        keyD1 = new javax.swing.JLabel();
        keyE1 = new javax.swing.JLabel();
        keyF1 = new javax.swing.JLabel();
        keyG1 = new javax.swing.JLabel();
        keyA1 = new javax.swing.JLabel();
        keyB1 = new javax.swing.JLabel();
        keyC2 = new javax.swing.JLabel();
        keyD2 = new javax.swing.JLabel();
        keyE2 = new javax.swing.JLabel();
        keyF2 = new javax.swing.JLabel();
        keyG2 = new javax.swing.JLabel();
        keyA2 = new javax.swing.JLabel();
        keyB2 = new javax.swing.JLabel();
        keyC3 = new javax.swing.JLabel();
        keyD3 = new javax.swing.JLabel();
        keyE3 = new javax.swing.JLabel();
        keyF3 = new javax.swing.JLabel();
        keyG3 = new javax.swing.JLabel();
        keyA3 = new javax.swing.JLabel();
        keyB3 = new javax.swing.JLabel();
        keyC4 = new javax.swing.JLabel();
        keyD4 = new javax.swing.JLabel();
        keyE4 = new javax.swing.JLabel();
        keyF4 = new javax.swing.JLabel();
        keyG4 = new javax.swing.JLabel();
        keyA4 = new javax.swing.JLabel();
        keyB4 = new javax.swing.JLabel();
        keyC5 = new javax.swing.JLabel();
        keyD5 = new javax.swing.JLabel();
        keyE5 = new javax.swing.JLabel();
        keyF5 = new javax.swing.JLabel();
        keyG5 = new javax.swing.JLabel();
        keyA5 = new javax.swing.JLabel();
        keyB5 = new javax.swing.JLabel();
        keyC6 = new javax.swing.JLabel();
        keyD6 = new javax.swing.JLabel();
        keyE6 = new javax.swing.JLabel();
        keyF6 = new javax.swing.JLabel();
        keyG6 = new javax.swing.JLabel();
        keyA6 = new javax.swing.JLabel();
        keyB6 = new javax.swing.JLabel();
        keyC7 = new javax.swing.JLabel();
        keyD7 = new javax.swing.JLabel();
        keyE7 = new javax.swing.JLabel();
        keyF7 = new javax.swing.JLabel();
        keyG7 = new javax.swing.JLabel();
        keyA7 = new javax.swing.JLabel();
        keyB7 = new javax.swing.JLabel();
        keyC8 = new javax.swing.JLabel();
        keyBb0 = new javax.swing.JLabel();
        keyCsharp1 = new javax.swing.JLabel();
        keyEb1 = new javax.swing.JLabel();
        keyFsharp1 = new javax.swing.JLabel();
        keyGsharp1 = new javax.swing.JLabel();
        keyBb1 = new javax.swing.JLabel();
        keyCsharp2 = new javax.swing.JLabel();
        keyEb2 = new javax.swing.JLabel();
        keyFsharp2 = new javax.swing.JLabel();
        keyGsharp2 = new javax.swing.JLabel();
        keyBb2 = new javax.swing.JLabel();
        keyCsharp3 = new javax.swing.JLabel();
        keyEb3 = new javax.swing.JLabel();
        keyFsharp3 = new javax.swing.JLabel();
        keyGsharp3 = new javax.swing.JLabel();
        keyBb3 = new javax.swing.JLabel();
        keyCsharp4 = new javax.swing.JLabel();
        keyEb4 = new javax.swing.JLabel();
        keyFsharp4 = new javax.swing.JLabel();
        keyGsharp4 = new javax.swing.JLabel();
        keyBb4 = new javax.swing.JLabel();
        keyCsharp5 = new javax.swing.JLabel();
        keyEb5 = new javax.swing.JLabel();
        keyFsharp5 = new javax.swing.JLabel();
        keyGsharp5 = new javax.swing.JLabel();
        keyBb5 = new javax.swing.JLabel();
        keyCsharp6 = new javax.swing.JLabel();
        keyEb6 = new javax.swing.JLabel();
        keyFsharp6 = new javax.swing.JLabel();
        keyGsharp6 = new javax.swing.JLabel();
        keyBb6 = new javax.swing.JLabel();
        keyCsharp7 = new javax.swing.JLabel();
        keyEb7 = new javax.swing.JLabel();
        keyFsharp7 = new javax.swing.JLabel();
        keyGsharp7 = new javax.swing.JLabel();
        keyBb7 = new javax.swing.JLabel();
        A0Label = new javax.swing.JLabel();
        B0Label = new javax.swing.JLabel();
        C1Label = new javax.swing.JLabel();
        D1Label = new javax.swing.JLabel();
        E1Label = new javax.swing.JLabel();
        F1Label = new javax.swing.JLabel();
        G1Label = new javax.swing.JLabel();
        A1Label = new javax.swing.JLabel();
        B1Label = new javax.swing.JLabel();
        C2Label = new javax.swing.JLabel();
        D2Label = new javax.swing.JLabel();
        E2Label = new javax.swing.JLabel();
        F2Label = new javax.swing.JLabel();
        G2Label = new javax.swing.JLabel();
        A2Label = new javax.swing.JLabel();
        B2Label = new javax.swing.JLabel();
        C3Label = new javax.swing.JLabel();
        D3Label = new javax.swing.JLabel();
        E3Label = new javax.swing.JLabel();
        F3Label = new javax.swing.JLabel();
        G3Label = new javax.swing.JLabel();
        A3Label = new javax.swing.JLabel();
        B3Label = new javax.swing.JLabel();
        C4Label = new javax.swing.JLabel();
        D4Label = new javax.swing.JLabel();
        E4Label = new javax.swing.JLabel();
        F4Label = new javax.swing.JLabel();
        G4Label = new javax.swing.JLabel();
        A4Label = new javax.swing.JLabel();
        B4Label = new javax.swing.JLabel();
        C5Label = new javax.swing.JLabel();
        D5Label = new javax.swing.JLabel();
        E5Label = new javax.swing.JLabel();
        F5Label = new javax.swing.JLabel();
        G5Label = new javax.swing.JLabel();
        A5Label = new javax.swing.JLabel();
        B5Label = new javax.swing.JLabel();
        C6Label = new javax.swing.JLabel();
        D6Label = new javax.swing.JLabel();
        E6Label = new javax.swing.JLabel();
        F6Label = new javax.swing.JLabel();
        G6Label = new javax.swing.JLabel();
        A6Label = new javax.swing.JLabel();
        B6Label = new javax.swing.JLabel();
        C7Label = new javax.swing.JLabel();
        D7Label = new javax.swing.JLabel();
        E7Label = new javax.swing.JLabel();
        F7Label = new javax.swing.JLabel();
        G7Label = new javax.swing.JLabel();
        A7Label = new javax.swing.JLabel();
        B7Label = new javax.swing.JLabel();
        C8Label = new javax.swing.JLabel();
        Bb0Label = new javax.swing.JLabel();
        Csharp1Label = new javax.swing.JLabel();
        Eb1Label = new javax.swing.JLabel();
        Fsharp1Label = new javax.swing.JLabel();
        Gsharp1Label = new javax.swing.JLabel();
        Bb1Label = new javax.swing.JLabel();
        Csharp2Label = new javax.swing.JLabel();
        Eb2Label = new javax.swing.JLabel();
        Fsharp2Label = new javax.swing.JLabel();
        Gsharp2Label = new javax.swing.JLabel();
        Bb2Label = new javax.swing.JLabel();
        Csharp3Label = new javax.swing.JLabel();
        Eb3Label = new javax.swing.JLabel();
        Fsharp3Label = new javax.swing.JLabel();
        Gsharp3Label = new javax.swing.JLabel();
        Bb3Label = new javax.swing.JLabel();
        Csharp4Label = new javax.swing.JLabel();
        Eb4Label = new javax.swing.JLabel();
        Fsharp4Label = new javax.swing.JLabel();
        Gsharp4Label = new javax.swing.JLabel();
        Bb4Label = new javax.swing.JLabel();
        Csharp5Label = new javax.swing.JLabel();
        Eb5Label = new javax.swing.JLabel();
        Fsharp5Label = new javax.swing.JLabel();
        Gsharp5Label = new javax.swing.JLabel();
        Bb5Label = new javax.swing.JLabel();
        Csharp6Label = new javax.swing.JLabel();
        Eb6Label = new javax.swing.JLabel();
        Fsharp6Label = new javax.swing.JLabel();
        Gsharp6Label = new javax.swing.JLabel();
        Bb6Label = new javax.swing.JLabel();
        Csharp7Label = new javax.swing.JLabel();
        Eb7Label = new javax.swing.JLabel();
        Fsharp7Label = new javax.swing.JLabel();
        Gsharp7Label = new javax.swing.JLabel();
        Bb7Label = new javax.swing.JLabel();
        inputRestBtn = new javax.swing.JButton();
        chordNameDisplay = new javax.swing.JLabel();
        adviceNumSpinner = new javax.swing.JSpinner();
        refreshAdviceBtn = new javax.swing.JButton();
        adviceSpinnerLabel = new javax.swing.JLabel();
        SkipBtn = new javax.swing.JButton();
        BackBtn = new javax.swing.JButton();
        subDivComboBox = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        pointerC4 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        EditMenu = new javax.swing.JMenu();
        undoBtn = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        optionsMenu = new javax.swing.JMenu();
        clearKeyboardMI = new javax.swing.JMenuItem();
        defaultSettingsBtn = new javax.swing.JMenuItem();
        useAdviceMI = new javax.swing.JCheckBoxMenuItem();
        useExpectanciesMI = new javax.swing.JCheckBoxMenuItem();
        useBlueAdviceMI = new javax.swing.JCheckBoxMenuItem();
        fixNotesMI = new javax.swing.JCheckBoxMenuItem();
        playbackMenu = new javax.swing.JMenu();
        startPlayMI = new javax.swing.JMenuItem();
        pausePlayMI = new javax.swing.JMenuItem();
        stopPlayMI = new javax.swing.JMenuItem();
        startSelPlayMI = new javax.swing.JMenuItem();
        stopSelPlayMI = new javax.swing.JMenuItem();
        windowMenu = new javax.swing.JMenu();
        closeWindowMI = new javax.swing.JMenuItem();
        cascadeMI = new javax.swing.JMenuItem();
        windowMenuSeparator = new javax.swing.JSeparator();
        HelpMenu = new javax.swing.JMenu();

        keyboardHelpDialog.setTitle("Advising Keyboard Help");
        keyboardHelpDialog.setAlwaysOnTop(true);
        keyboardHelpDialog.setMinimumSize(new java.awt.Dimension(500, 500));

        jScrollPane3.setMinimumSize(new java.awt.Dimension(100, 100));
        jScrollPane3.setName("Keyboard Help"); // NOI18N

        jTextArea1.setRows(5);
        jTextArea1.setTabSize(4);
        jTextArea1.setText("\nAdvice:\n\tChord tones are displayed in gray\n\tColor tones are displayed in green\n\tBass note is in light blue\n\nAdvice Window:\n\tThis refers to the range of notes that will be colored\n\twhen advice is turned on.  It can be set to any\n\tnumber from 0 to 88.\n\nAuto-Rectify:\n\tWhen auto-rectify is turned on, out-of-key notes are\n\tautomatically rectified to the nearest chord or color\n\ttone.\n\nBlue Note Awareness:\n\tWhen an out-of-key note is played, it is assumed\n\tthat it was intended to be a \"blue\" note, and should\n\ttherefore lead to an adjacent note.  When blue note\n\tawareness is turned on and an out-of-key note is\n\tplayed, then only the adjacent pitches are suggested.\n\nExpected Notes:\n\tWhen expected notes are turned on, notes within the\n\tadvice window display numbers between 1 and 10,\n\twhich indicate how expected it is for that note to be\n\tplayed next based on the preceding melody, with 10\n\tbeing the most expected. Notes with no number\n\thave a value of 0, and are not expected.\n\n\tThese values are intended to assist the composer\n\twith constructing interesting melodies by combining\n\texpected notes and unexpected notes.\n\nLeft and Right Arrows:\n\tThe arrows move the selected slot forward or\n\tbackward one slot subdivision. The 'a' key performs\n\tthe same action as the left arrow and the 'f' key\n\tperforms the same action as the right arrow.\n\nRest:\n\tInputs a rest into the selected slot on the staff.\n\nRedo:\n\tReplaces the most recently removed note.\n\nStave Slot Subdivisions:\n\tThe number in this box corresponds to the number of\n\tsubdivisions in the selected beat on the staff. The\n\tnumber keys 1, 2, 3, 4, 5, 6, and 8 also change the \n\tnumber of subdivisions in the selected beat.\n\nUndo:\n\tRemoves the most recently input note from the staff.");
        jScrollPane3.setViewportView(jTextArea1);
        jTextArea1.setEditable(false);

        keyboardHelpDialog.getContentPane().add(jScrollPane3, java.awt.BorderLayout.CENTER);

        setTitle("Advice Keyboard");
        setAlwaysOnTop(true);
        setMinimumSize(new java.awt.Dimension(1100, 228));
        setPreferredSize(new java.awt.Dimension(1100, 228));
        addWindowListener(new java.awt.event.WindowAdapter()
        {
            public void windowClosing(java.awt.event.WindowEvent evt)
            {
                formWindowClosing(evt);
            }
        });
        addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                formKeyPressed(evt);
            }
        });
        getContentPane().setLayout(new java.awt.GridBagLayout());

        jPanel1.setBackground(new java.awt.Color(253, 158, 4));
        jPanel1.setForeground(new java.awt.Color(153, 153, 153));
        jPanel1.setMinimumSize(new java.awt.Dimension(1057, 130));
        jPanel1.setPreferredSize(new java.awt.Dimension(1056, 120));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        keyboardLP.setBackground(new java.awt.Color(153, 153, 153));
        keyboardLP.setForeground(new java.awt.Color(102, 102, 102));
        keyboardLP.setDoubleBuffered(true);
        keyboardLP.setMinimumSize(new java.awt.Dimension(1055, 150));
        keyboardLP.setPreferredSize(new java.awt.Dimension(1055, 140));
        keyboardLP.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                keyboardLPMouseClicked(evt);
            }
        });
        keyboardLP.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyPressed(java.awt.event.KeyEvent evt)
            {
                keyboardLPKeyPressed(evt);
            }
        });

        keyA0.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imp/gui/graphics/whitekey.jpg"))); // NOI18N
        keyA0.setBounds(0, 0, 20, 120);
        keyboardLP.add(keyA0, javax.swing.JLayeredPane.DEFAULT_LAYER);

        keyB0.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imp/gui/graphics/whitekey.jpg"))); // NOI18N
        keyB0.setBounds(20, 0, 20, 120);
        keyboardLP.add(keyB0, javax.swing.JLayeredPane.DEFAULT_LAYER);

        keyC1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imp/gui/graphics/whitekey.jpg"))); // NOI18N
        keyC1.setBounds(42, 0, 20, 120);
        keyboardLP.add(keyC1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        keyD1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imp/gui/graphics/whitekey.jpg"))); // NOI18N
        keyD1.setBounds(62, 0, 20, 120);
        keyboardLP.add(keyD1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        keyE1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imp/gui/graphics/whitekey.jpg"))); // NOI18N
        keyE1.setBounds(82, 0, 20, 120);
        keyboardLP.add(keyE1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        keyF1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imp/gui/graphics/whitekey.jpg"))); // NOI18N
        keyF1.setBounds(102, 0, 20, 120);
        keyboardLP.add(keyF1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        keyG1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imp/gui/graphics/whitekey.jpg"))); // NOI18N
        keyG1.setBounds(122, 0, 20, 120);
        keyboardLP.add(keyG1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        keyA1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imp/gui/graphics/whitekey.jpg"))); // NOI18N
        keyA1.setBounds(142, 0, 20, 120);
        keyboardLP.add(keyA1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        keyB1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imp/gui/graphics/whitekey.jpg"))); // NOI18N
        keyB1.setBounds(162, 0, 20, 120);
        keyboardLP.add(keyB1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        keyC2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imp/gui/graphics/whitekey.jpg"))); // NOI18N
        keyC2.setBounds(184, 0, 20, 120);
        keyboardLP.add(keyC2, javax.swing.JLayeredPane.DEFAULT_LAYER);

        keyD2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imp/gui/graphics/whitekey.jpg"))); // NOI18N
        keyD2.setBounds(204, 0, 20, 120);
        keyboardLP.add(keyD2, javax.swing.JLayeredPane.DEFAULT_LAYER);

        keyE2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imp/gui/graphics/whitekey.jpg"))); // NOI18N
        keyE2.setBounds(224, 0, 20, 120);
        keyboardLP.add(keyE2, javax.swing.JLayeredPane.DEFAULT_LAYER);

        keyF2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imp/gui/graphics/whitekey.jpg"))); // NOI18N
        keyF2.setBounds(244, 0, 20, 120);
        keyboardLP.add(keyF2, javax.swing.JLayeredPane.DEFAULT_LAYER);

        keyG2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imp/gui/graphics/whitekey.jpg"))); // NOI18N
        keyG2.setBounds(264, 0, 20, 120);
        keyboardLP.add(keyG2, javax.swing.JLayeredPane.DEFAULT_LAYER);

        keyA2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imp/gui/graphics/whitekey.jpg"))); // NOI18N
        keyA2.setBounds(284, 0, 20, 120);
        keyboardLP.add(keyA2, javax.swing.JLayeredPane.DEFAULT_LAYER);

        keyB2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imp/gui/graphics/whitekey.jpg"))); // NOI18N
        keyB2.setBounds(304, 0, 20, 120);
        keyboardLP.add(keyB2, javax.swing.JLayeredPane.DEFAULT_LAYER);

        keyC3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imp/gui/graphics/whitekey.jpg"))); // NOI18N
        keyC3.setBounds(326, 0, 20, 120);
        keyboardLP.add(keyC3, javax.swing.JLayeredPane.DEFAULT_LAYER);

        keyD3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imp/gui/graphics/whitekey.jpg"))); // NOI18N
        keyD3.setBounds(346, 0, 20, 120);
        keyboardLP.add(keyD3, javax.swing.JLayeredPane.DEFAULT_LAYER);

        keyE3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imp/gui/graphics/whitekey.jpg"))); // NOI18N
        keyE3.setBounds(366, 0, 20, 120);
        keyboardLP.add(keyE3, javax.swing.JLayeredPane.DEFAULT_LAYER);

        keyF3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imp/gui/graphics/whitekey.jpg"))); // NOI18N
        keyF3.setBounds(386, 0, 20, 120);
        keyboardLP.add(keyF3, javax.swing.JLayeredPane.DEFAULT_LAYER);

        keyG3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imp/gui/graphics/whitekey.jpg"))); // NOI18N
        keyG3.setBounds(406, 0, 20, 120);
        keyboardLP.add(keyG3, javax.swing.JLayeredPane.DEFAULT_LAYER);

        keyA3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imp/gui/graphics/whitekey.jpg"))); // NOI18N
        keyA3.setBounds(426, 0, 20, 120);
        keyboardLP.add(keyA3, javax.swing.JLayeredPane.DEFAULT_LAYER);

        keyB3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imp/gui/graphics/whitekey.jpg"))); // NOI18N
        keyB3.setBounds(446, 0, 20, 120);
        keyboardLP.add(keyB3, javax.swing.JLayeredPane.DEFAULT_LAYER);

        keyC4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imp/gui/graphics/whitekey.jpg"))); // NOI18N
        keyC4.setBounds(468, 0, 20, 120);
        keyboardLP.add(keyC4, javax.swing.JLayeredPane.DEFAULT_LAYER);

        keyD4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imp/gui/graphics/whitekey.jpg"))); // NOI18N
        keyD4.setBounds(488, 0, 20, 120);
        keyboardLP.add(keyD4, javax.swing.JLayeredPane.DEFAULT_LAYER);

        keyE4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imp/gui/graphics/whitekey.jpg"))); // NOI18N
        keyE4.setBounds(508, 0, 20, 120);
        keyboardLP.add(keyE4, javax.swing.JLayeredPane.DEFAULT_LAYER);

        keyF4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imp/gui/graphics/whitekey.jpg"))); // NOI18N
        keyF4.setBounds(528, 0, 20, 120);
        keyboardLP.add(keyF4, javax.swing.JLayeredPane.DEFAULT_LAYER);

        keyG4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imp/gui/graphics/whitekey.jpg"))); // NOI18N
        keyG4.setBounds(548, 0, 20, 120);
        keyboardLP.add(keyG4, javax.swing.JLayeredPane.DEFAULT_LAYER);

        keyA4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imp/gui/graphics/whitekey.jpg"))); // NOI18N
        keyA4.setBounds(568, 0, 20, 120);
        keyboardLP.add(keyA4, javax.swing.JLayeredPane.DEFAULT_LAYER);

        keyB4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imp/gui/graphics/whitekey.jpg"))); // NOI18N
        keyB4.setBounds(588, 0, 20, 120);
        keyboardLP.add(keyB4, javax.swing.JLayeredPane.DEFAULT_LAYER);

        keyC5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imp/gui/graphics/whitekey.jpg"))); // NOI18N
        keyC5.setBounds(610, 0, 20, 120);
        keyboardLP.add(keyC5, javax.swing.JLayeredPane.DEFAULT_LAYER);

        keyD5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imp/gui/graphics/whitekey.jpg"))); // NOI18N
        keyD5.setBounds(630, 0, 20, 120);
        keyboardLP.add(keyD5, javax.swing.JLayeredPane.DEFAULT_LAYER);

        keyE5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imp/gui/graphics/whitekey.jpg"))); // NOI18N
        keyE5.setBounds(650, 0, 20, 120);
        keyboardLP.add(keyE5, javax.swing.JLayeredPane.DEFAULT_LAYER);

        keyF5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imp/gui/graphics/whitekey.jpg"))); // NOI18N
        keyF5.setBounds(670, 0, 20, 120);
        keyboardLP.add(keyF5, javax.swing.JLayeredPane.DEFAULT_LAYER);

        keyG5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imp/gui/graphics/whitekey.jpg"))); // NOI18N
        keyG5.setBounds(690, 0, 20, 120);
        keyboardLP.add(keyG5, javax.swing.JLayeredPane.DEFAULT_LAYER);

        keyA5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imp/gui/graphics/whitekey.jpg"))); // NOI18N
        keyA5.setBounds(710, 0, 20, 120);
        keyboardLP.add(keyA5, javax.swing.JLayeredPane.DEFAULT_LAYER);

        keyB5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imp/gui/graphics/whitekey.jpg"))); // NOI18N
        keyB5.setBounds(730, 0, 20, 120);
        keyboardLP.add(keyB5, javax.swing.JLayeredPane.DEFAULT_LAYER);

        keyC6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imp/gui/graphics/whitekey.jpg"))); // NOI18N
        keyC6.setBounds(752, 0, 20, 120);
        keyboardLP.add(keyC6, javax.swing.JLayeredPane.DEFAULT_LAYER);

        keyD6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imp/gui/graphics/whitekey.jpg"))); // NOI18N
        keyD6.setBounds(772, 0, 20, 120);
        keyboardLP.add(keyD6, javax.swing.JLayeredPane.DEFAULT_LAYER);

        keyE6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imp/gui/graphics/whitekey.jpg"))); // NOI18N
        keyE6.setBounds(792, 0, 20, 120);
        keyboardLP.add(keyE6, javax.swing.JLayeredPane.DEFAULT_LAYER);

        keyF6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imp/gui/graphics/whitekey.jpg"))); // NOI18N
        keyF6.setBounds(812, 0, 20, 120);
        keyboardLP.add(keyF6, javax.swing.JLayeredPane.DEFAULT_LAYER);

        keyG6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imp/gui/graphics/whitekey.jpg"))); // NOI18N
        keyG6.setBounds(832, 0, 20, 120);
        keyboardLP.add(keyG6, javax.swing.JLayeredPane.DEFAULT_LAYER);

        keyA6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imp/gui/graphics/whitekey.jpg"))); // NOI18N
        keyA6.setBounds(852, 0, 20, 120);
        keyboardLP.add(keyA6, javax.swing.JLayeredPane.DEFAULT_LAYER);

        keyB6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imp/gui/graphics/whitekey.jpg"))); // NOI18N
        keyB6.setBounds(872, 0, 20, 120);
        keyboardLP.add(keyB6, javax.swing.JLayeredPane.DEFAULT_LAYER);

        keyC7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imp/gui/graphics/whitekey.jpg"))); // NOI18N
        keyC7.setBounds(894, 0, 20, 120);
        keyboardLP.add(keyC7, javax.swing.JLayeredPane.DEFAULT_LAYER);

        keyD7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imp/gui/graphics/whitekey.jpg"))); // NOI18N
        keyD7.setBounds(914, 0, 20, 120);
        keyboardLP.add(keyD7, javax.swing.JLayeredPane.DEFAULT_LAYER);

        keyE7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imp/gui/graphics/whitekey.jpg"))); // NOI18N
        keyE7.setBounds(934, 0, 20, 120);
        keyboardLP.add(keyE7, javax.swing.JLayeredPane.DEFAULT_LAYER);

        keyF7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imp/gui/graphics/whitekey.jpg"))); // NOI18N
        keyF7.setBounds(954, 0, 20, 120);
        keyboardLP.add(keyF7, javax.swing.JLayeredPane.DEFAULT_LAYER);

        keyG7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imp/gui/graphics/whitekey.jpg"))); // NOI18N
        keyG7.setBounds(974, 0, 20, 120);
        keyboardLP.add(keyG7, javax.swing.JLayeredPane.DEFAULT_LAYER);

        keyA7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imp/gui/graphics/whitekey.jpg"))); // NOI18N
        keyA7.setBounds(994, 0, 20, 120);
        keyboardLP.add(keyA7, javax.swing.JLayeredPane.DEFAULT_LAYER);

        keyB7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imp/gui/graphics/whitekey.jpg"))); // NOI18N
        keyB7.setBounds(1014, 0, 20, 120);
        keyboardLP.add(keyB7, javax.swing.JLayeredPane.DEFAULT_LAYER);

        keyC8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imp/gui/graphics/whitekey.jpg"))); // NOI18N
        keyC8.setBounds(1036, 0, 20, 120);
        keyboardLP.add(keyC8, javax.swing.JLayeredPane.DEFAULT_LAYER);

        keyBb0.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imp/gui/graphics/blackkey.jpg"))); // NOI18N
        keyBb0.setBounds(13, 0, 14, 80);
        keyboardLP.add(keyBb0, javax.swing.JLayeredPane.PALETTE_LAYER);

        keyCsharp1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imp/gui/graphics/blackkey.jpg"))); // NOI18N
        keyCsharp1.setBounds(55, 0, 14, 80);
        keyboardLP.add(keyCsharp1, javax.swing.JLayeredPane.PALETTE_LAYER);

        keyEb1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imp/gui/graphics/blackkey.jpg"))); // NOI18N
        keyEb1.setBounds(75, 0, 14, 80);
        keyboardLP.add(keyEb1, javax.swing.JLayeredPane.PALETTE_LAYER);

        keyFsharp1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imp/gui/graphics/blackkey.jpg"))); // NOI18N
        keyFsharp1.setBounds(115, 0, 14, 80);
        keyboardLP.add(keyFsharp1, javax.swing.JLayeredPane.PALETTE_LAYER);

        keyGsharp1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imp/gui/graphics/blackkey.jpg"))); // NOI18N
        keyGsharp1.setBounds(135, 0, 14, 80);
        keyboardLP.add(keyGsharp1, javax.swing.JLayeredPane.PALETTE_LAYER);

        keyBb1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imp/gui/graphics/blackkey.jpg"))); // NOI18N
        keyBb1.setBounds(155, 0, 14, 80);
        keyboardLP.add(keyBb1, javax.swing.JLayeredPane.PALETTE_LAYER);

        keyCsharp2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imp/gui/graphics/blackkey.jpg"))); // NOI18N
        keyCsharp2.setBounds(197, 0, 14, 80);
        keyboardLP.add(keyCsharp2, javax.swing.JLayeredPane.PALETTE_LAYER);

        keyEb2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imp/gui/graphics/blackkey.jpg"))); // NOI18N
        keyEb2.setBounds(217, 0, 14, 80);
        keyboardLP.add(keyEb2, javax.swing.JLayeredPane.PALETTE_LAYER);

        keyFsharp2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imp/gui/graphics/blackkey.jpg"))); // NOI18N
        keyFsharp2.setBounds(257, 0, 14, 80);
        keyboardLP.add(keyFsharp2, javax.swing.JLayeredPane.PALETTE_LAYER);

        keyGsharp2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imp/gui/graphics/blackkey.jpg"))); // NOI18N
        keyGsharp2.setBounds(277, 0, 14, 80);
        keyboardLP.add(keyGsharp2, javax.swing.JLayeredPane.PALETTE_LAYER);

        keyBb2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imp/gui/graphics/blackkey.jpg"))); // NOI18N
        keyBb2.setBounds(297, 0, 14, 80);
        keyboardLP.add(keyBb2, javax.swing.JLayeredPane.PALETTE_LAYER);

        keyCsharp3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imp/gui/graphics/blackkey.jpg"))); // NOI18N
        keyCsharp3.setBounds(339, 0, 14, 80);
        keyboardLP.add(keyCsharp3, javax.swing.JLayeredPane.PALETTE_LAYER);

        keyEb3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imp/gui/graphics/blackkey.jpg"))); // NOI18N
        keyEb3.setBounds(359, 0, 14, 80);
        keyboardLP.add(keyEb3, javax.swing.JLayeredPane.PALETTE_LAYER);

        keyFsharp3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imp/gui/graphics/blackkey.jpg"))); // NOI18N
        keyFsharp3.setBounds(399, 0, 14, 80);
        keyboardLP.add(keyFsharp3, javax.swing.JLayeredPane.PALETTE_LAYER);

        keyGsharp3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imp/gui/graphics/blackkey.jpg"))); // NOI18N
        keyGsharp3.setBounds(419, 0, 14, 80);
        keyboardLP.add(keyGsharp3, javax.swing.JLayeredPane.PALETTE_LAYER);

        keyBb3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imp/gui/graphics/blackkey.jpg"))); // NOI18N
        keyBb3.setBounds(439, 0, 14, 80);
        keyboardLP.add(keyBb3, javax.swing.JLayeredPane.PALETTE_LAYER);

        keyCsharp4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imp/gui/graphics/blackkey.jpg"))); // NOI18N
        keyCsharp4.setBounds(481, 0, 14, 80);
        keyboardLP.add(keyCsharp4, javax.swing.JLayeredPane.PALETTE_LAYER);

        keyEb4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imp/gui/graphics/blackkey.jpg"))); // NOI18N
        keyEb4.setBounds(501, 0, 14, 80);
        keyboardLP.add(keyEb4, javax.swing.JLayeredPane.PALETTE_LAYER);

        keyFsharp4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imp/gui/graphics/blackkey.jpg"))); // NOI18N
        keyFsharp4.setBounds(541, 0, 14, 80);
        keyboardLP.add(keyFsharp4, javax.swing.JLayeredPane.PALETTE_LAYER);

        keyGsharp4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imp/gui/graphics/blackkey.jpg"))); // NOI18N
        keyGsharp4.setBounds(561, 0, 14, 80);
        keyboardLP.add(keyGsharp4, javax.swing.JLayeredPane.PALETTE_LAYER);

        keyBb4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imp/gui/graphics/blackkey.jpg"))); // NOI18N
        keyBb4.setBounds(581, 0, 14, 80);
        keyboardLP.add(keyBb4, javax.swing.JLayeredPane.PALETTE_LAYER);

        keyCsharp5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imp/gui/graphics/blackkey.jpg"))); // NOI18N
        keyCsharp5.setBounds(623, 0, 14, 80);
        keyboardLP.add(keyCsharp5, javax.swing.JLayeredPane.PALETTE_LAYER);

        keyEb5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imp/gui/graphics/blackkey.jpg"))); // NOI18N
        keyEb5.setBounds(643, 0, 14, 80);
        keyboardLP.add(keyEb5, javax.swing.JLayeredPane.PALETTE_LAYER);

        keyFsharp5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imp/gui/graphics/blackkey.jpg"))); // NOI18N
        keyFsharp5.setBounds(683, 0, 14, 80);
        keyboardLP.add(keyFsharp5, javax.swing.JLayeredPane.PALETTE_LAYER);

        keyGsharp5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imp/gui/graphics/blackkey.jpg"))); // NOI18N
        keyGsharp5.setBounds(703, 0, 14, 80);
        keyboardLP.add(keyGsharp5, javax.swing.JLayeredPane.PALETTE_LAYER);

        keyBb5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imp/gui/graphics/blackkey.jpg"))); // NOI18N
        keyBb5.setBounds(723, 0, 14, 80);
        keyboardLP.add(keyBb5, javax.swing.JLayeredPane.PALETTE_LAYER);

        keyCsharp6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imp/gui/graphics/blackkey.jpg"))); // NOI18N
        keyCsharp6.setBounds(765, 0, 14, 80);
        keyboardLP.add(keyCsharp6, javax.swing.JLayeredPane.PALETTE_LAYER);

        keyEb6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imp/gui/graphics/blackkey.jpg"))); // NOI18N
        keyEb6.setBounds(785, 0, 14, 80);
        keyboardLP.add(keyEb6, javax.swing.JLayeredPane.PALETTE_LAYER);

        keyFsharp6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imp/gui/graphics/blackkey.jpg"))); // NOI18N
        keyFsharp6.setBounds(825, 0, 14, 80);
        keyboardLP.add(keyFsharp6, javax.swing.JLayeredPane.PALETTE_LAYER);

        keyGsharp6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imp/gui/graphics/blackkey.jpg"))); // NOI18N
        keyGsharp6.setBounds(845, 0, 14, 80);
        keyboardLP.add(keyGsharp6, javax.swing.JLayeredPane.PALETTE_LAYER);

        keyBb6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imp/gui/graphics/blackkey.jpg"))); // NOI18N
        keyBb6.setBounds(865, 0, 14, 80);
        keyboardLP.add(keyBb6, javax.swing.JLayeredPane.PALETTE_LAYER);

        keyCsharp7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imp/gui/graphics/blackkey.jpg"))); // NOI18N
        keyCsharp7.setBounds(907, 0, 14, 80);
        keyboardLP.add(keyCsharp7, javax.swing.JLayeredPane.PALETTE_LAYER);

        keyEb7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imp/gui/graphics/blackkey.jpg"))); // NOI18N
        keyEb7.setBounds(927, 0, 14, 80);
        keyboardLP.add(keyEb7, javax.swing.JLayeredPane.PALETTE_LAYER);

        keyFsharp7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imp/gui/graphics/blackkey.jpg"))); // NOI18N
        keyFsharp7.setBounds(967, 0, 14, 80);
        keyboardLP.add(keyFsharp7, javax.swing.JLayeredPane.PALETTE_LAYER);

        keyGsharp7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imp/gui/graphics/blackkey.jpg"))); // NOI18N
        keyGsharp7.setBounds(987, 0, 14, 80);
        keyboardLP.add(keyGsharp7, javax.swing.JLayeredPane.PALETTE_LAYER);

        keyBb7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imp/gui/graphics/blackkey.jpg"))); // NOI18N
        keyBb7.setBounds(1007, 0, 14, 80);
        keyboardLP.add(keyBb7, javax.swing.JLayeredPane.PALETTE_LAYER);

        A0Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        A0Label.setLabelFor(keyA0);
        A0Label.setText("  ");
        A0Label.setBounds(1, 100, 17, 16);
        keyboardLP.add(A0Label, javax.swing.JLayeredPane.PALETTE_LAYER);
        A0Label.getAccessibleContext().setAccessibleName("LabelA0");

        B0Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        B0Label.setText("  ");
        B0Label.setBounds(21, 100, 17, 16);
        keyboardLP.add(B0Label, javax.swing.JLayeredPane.PALETTE_LAYER);

        C1Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        C1Label.setText("  ");
        C1Label.setBounds(43, 100, 17, 16);
        keyboardLP.add(C1Label, javax.swing.JLayeredPane.PALETTE_LAYER);

        D1Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        D1Label.setText("  ");
        D1Label.setBounds(63, 100, 17, 16);
        keyboardLP.add(D1Label, javax.swing.JLayeredPane.PALETTE_LAYER);

        E1Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        E1Label.setText("  ");
        E1Label.setBounds(83, 100, 17, 16);
        keyboardLP.add(E1Label, javax.swing.JLayeredPane.PALETTE_LAYER);

        F1Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        F1Label.setText("  ");
        F1Label.setBounds(103, 100, 17, 16);
        keyboardLP.add(F1Label, javax.swing.JLayeredPane.PALETTE_LAYER);

        G1Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        G1Label.setLabelFor(keyA0);
        G1Label.setText("  ");
        G1Label.setBounds(123, 100, 17, 16);
        keyboardLP.add(G1Label, javax.swing.JLayeredPane.PALETTE_LAYER);

        A1Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        A1Label.setText("  ");
        A1Label.setBounds(143, 100, 17, 16);
        keyboardLP.add(A1Label, javax.swing.JLayeredPane.PALETTE_LAYER);

        B1Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        B1Label.setText("  ");
        B1Label.setBounds(163, 100, 17, 16);
        keyboardLP.add(B1Label, javax.swing.JLayeredPane.PALETTE_LAYER);

        C2Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        C2Label.setText("  ");
        C2Label.setBounds(185, 100, 17, 16);
        keyboardLP.add(C2Label, javax.swing.JLayeredPane.PALETTE_LAYER);

        D2Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        D2Label.setText("  ");
        D2Label.setBounds(205, 100, 17, 16);
        keyboardLP.add(D2Label, javax.swing.JLayeredPane.PALETTE_LAYER);

        E2Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        E2Label.setText("  ");
        E2Label.setBounds(225, 100, 17, 16);
        keyboardLP.add(E2Label, javax.swing.JLayeredPane.PALETTE_LAYER);

        F2Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        F2Label.setLabelFor(keyA0);
        F2Label.setText("  ");
        F2Label.setBounds(245, 100, 17, 16);
        keyboardLP.add(F2Label, javax.swing.JLayeredPane.PALETTE_LAYER);

        G2Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        G2Label.setText("  ");
        G2Label.setBounds(265, 100, 17, 16);
        keyboardLP.add(G2Label, javax.swing.JLayeredPane.PALETTE_LAYER);

        A2Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        A2Label.setText("  ");
        A2Label.setBounds(285, 100, 17, 16);
        keyboardLP.add(A2Label, javax.swing.JLayeredPane.PALETTE_LAYER);

        B2Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        B2Label.setText("  ");
        B2Label.setBounds(305, 100, 17, 16);
        keyboardLP.add(B2Label, javax.swing.JLayeredPane.PALETTE_LAYER);

        C3Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        C3Label.setText("  ");
        C3Label.setBounds(327, 100, 17, 16);
        keyboardLP.add(C3Label, javax.swing.JLayeredPane.PALETTE_LAYER);

        D3Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        D3Label.setText("  ");
        D3Label.setBounds(347, 100, 17, 16);
        keyboardLP.add(D3Label, javax.swing.JLayeredPane.PALETTE_LAYER);

        E3Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        E3Label.setLabelFor(keyA0);
        E3Label.setText("  ");
        E3Label.setBounds(367, 100, 17, 16);
        keyboardLP.add(E3Label, javax.swing.JLayeredPane.PALETTE_LAYER);

        F3Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        F3Label.setText("  ");
        F3Label.setBounds(387, 100, 17, 16);
        keyboardLP.add(F3Label, javax.swing.JLayeredPane.PALETTE_LAYER);

        G3Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        G3Label.setText("  ");
        G3Label.setBounds(407, 100, 17, 16);
        keyboardLP.add(G3Label, javax.swing.JLayeredPane.PALETTE_LAYER);

        A3Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        A3Label.setText("  ");
        A3Label.setBounds(427, 100, 17, 16);
        keyboardLP.add(A3Label, javax.swing.JLayeredPane.PALETTE_LAYER);

        B3Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        B3Label.setText("  ");
        B3Label.setBounds(447, 100, 17, 16);
        keyboardLP.add(B3Label, javax.swing.JLayeredPane.PALETTE_LAYER);

        C4Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        C4Label.setText("  ");
        C4Label.setBounds(469, 100, 17, 16);
        keyboardLP.add(C4Label, javax.swing.JLayeredPane.PALETTE_LAYER);

        D4Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        D4Label.setLabelFor(keyA0);
        D4Label.setText("  ");
        D4Label.setBounds(489, 100, 17, 16);
        keyboardLP.add(D4Label, javax.swing.JLayeredPane.PALETTE_LAYER);

        E4Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        E4Label.setText("  ");
        E4Label.setBounds(509, 100, 17, 16);
        keyboardLP.add(E4Label, javax.swing.JLayeredPane.PALETTE_LAYER);

        F4Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        F4Label.setText("  ");
        F4Label.setBounds(529, 100, 17, 16);
        keyboardLP.add(F4Label, javax.swing.JLayeredPane.PALETTE_LAYER);

        G4Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        G4Label.setText("  ");
        G4Label.setBounds(549, 100, 17, 16);
        keyboardLP.add(G4Label, javax.swing.JLayeredPane.PALETTE_LAYER);

        A4Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        A4Label.setText("  ");
        A4Label.setBounds(569, 100, 17, 16);
        keyboardLP.add(A4Label, javax.swing.JLayeredPane.PALETTE_LAYER);

        B4Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        B4Label.setLabelFor(keyA0);
        B4Label.setText("  ");
        B4Label.setBounds(589, 100, 17, 16);
        keyboardLP.add(B4Label, javax.swing.JLayeredPane.PALETTE_LAYER);

        C5Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        C5Label.setText("  ");
        C5Label.setBounds(611, 100, 17, 16);
        keyboardLP.add(C5Label, javax.swing.JLayeredPane.PALETTE_LAYER);

        D5Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        D5Label.setText("  ");
        D5Label.setBounds(631, 100, 17, 16);
        keyboardLP.add(D5Label, javax.swing.JLayeredPane.PALETTE_LAYER);

        E5Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        E5Label.setText("  ");
        E5Label.setBounds(651, 100, 17, 16);
        keyboardLP.add(E5Label, javax.swing.JLayeredPane.PALETTE_LAYER);

        F5Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        F5Label.setText("  ");
        F5Label.setBounds(671, 100, 17, 16);
        keyboardLP.add(F5Label, javax.swing.JLayeredPane.PALETTE_LAYER);

        G5Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        G5Label.setText("  ");
        G5Label.setBounds(691, 100, 17, 16);
        keyboardLP.add(G5Label, javax.swing.JLayeredPane.PALETTE_LAYER);

        A5Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        A5Label.setLabelFor(keyA0);
        A5Label.setText("  ");
        A5Label.setBounds(711, 100, 17, 16);
        keyboardLP.add(A5Label, javax.swing.JLayeredPane.PALETTE_LAYER);

        B5Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        B5Label.setText("  ");
        B5Label.setBounds(731, 100, 17, 16);
        keyboardLP.add(B5Label, javax.swing.JLayeredPane.PALETTE_LAYER);

        C6Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        C6Label.setText("  ");
        C6Label.setBounds(753, 100, 17, 16);
        keyboardLP.add(C6Label, javax.swing.JLayeredPane.PALETTE_LAYER);

        D6Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        D6Label.setText("  ");
        D6Label.setBounds(773, 100, 17, 16);
        keyboardLP.add(D6Label, javax.swing.JLayeredPane.PALETTE_LAYER);

        E6Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        E6Label.setText("  ");
        E6Label.setBounds(793, 100, 17, 16);
        keyboardLP.add(E6Label, javax.swing.JLayeredPane.PALETTE_LAYER);

        F6Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        F6Label.setText("  ");
        F6Label.setBounds(813, 100, 17, 16);
        keyboardLP.add(F6Label, javax.swing.JLayeredPane.PALETTE_LAYER);

        G6Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        G6Label.setLabelFor(keyA0);
        G6Label.setText("  ");
        G6Label.setBounds(833, 100, 17, 16);
        keyboardLP.add(G6Label, javax.swing.JLayeredPane.PALETTE_LAYER);

        A6Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        A6Label.setText("  ");
        A6Label.setBounds(853, 100, 17, 16);
        keyboardLP.add(A6Label, javax.swing.JLayeredPane.PALETTE_LAYER);

        B6Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        B6Label.setText("  ");
        B6Label.setBounds(873, 100, 17, 16);
        keyboardLP.add(B6Label, javax.swing.JLayeredPane.PALETTE_LAYER);

        C7Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        C7Label.setText("  ");
        C7Label.setBounds(895, 100, 17, 16);
        keyboardLP.add(C7Label, javax.swing.JLayeredPane.PALETTE_LAYER);

        D7Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        D7Label.setText("  ");
        D7Label.setBounds(915, 100, 17, 16);
        keyboardLP.add(D7Label, javax.swing.JLayeredPane.PALETTE_LAYER);

        E7Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        E7Label.setText("  ");
        E7Label.setBounds(935, 100, 17, 16);
        keyboardLP.add(E7Label, javax.swing.JLayeredPane.PALETTE_LAYER);

        F7Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        F7Label.setLabelFor(keyA0);
        F7Label.setText("  ");
        F7Label.setBounds(955, 100, 17, 16);
        keyboardLP.add(F7Label, javax.swing.JLayeredPane.PALETTE_LAYER);

        G7Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        G7Label.setText("  ");
        G7Label.setBounds(975, 100, 17, 16);
        keyboardLP.add(G7Label, javax.swing.JLayeredPane.PALETTE_LAYER);

        A7Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        A7Label.setText("  ");
        A7Label.setBounds(995, 100, 17, 16);
        keyboardLP.add(A7Label, javax.swing.JLayeredPane.PALETTE_LAYER);

        B7Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        B7Label.setText("  ");
        B7Label.setBounds(1015, 100, 17, 16);
        keyboardLP.add(B7Label, javax.swing.JLayeredPane.PALETTE_LAYER);

        C8Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        C8Label.setText("  ");
        C8Label.setBounds(1037, 100, 17, 16);
        keyboardLP.add(C8Label, javax.swing.JLayeredPane.PALETTE_LAYER);

        Bb0Label.setFont(new java.awt.Font("Lucida Grande", 1, 12)); // NOI18N
        Bb0Label.setForeground(new java.awt.Color(255, 255, 255));
        Bb0Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Bb0Label.setText("  ");
        Bb0Label.setBounds(12, 62, 17, 15);
        keyboardLP.add(Bb0Label, javax.swing.JLayeredPane.POPUP_LAYER);

        Csharp1Label.setFont(new java.awt.Font("Lucida Grande", 1, 12)); // NOI18N
        Csharp1Label.setForeground(new java.awt.Color(255, 255, 255));
        Csharp1Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Csharp1Label.setLabelFor(keyA0);
        Csharp1Label.setText("  ");
        Csharp1Label.setBounds(54, 62, 17, 15);
        keyboardLP.add(Csharp1Label, javax.swing.JLayeredPane.POPUP_LAYER);

        Eb1Label.setFont(new java.awt.Font("Lucida Grande", 1, 12)); // NOI18N
        Eb1Label.setForeground(new java.awt.Color(255, 255, 255));
        Eb1Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Eb1Label.setText("  ");
        Eb1Label.setBounds(74, 62, 17, 15);
        keyboardLP.add(Eb1Label, javax.swing.JLayeredPane.POPUP_LAYER);

        Fsharp1Label.setFont(new java.awt.Font("Lucida Grande", 1, 12)); // NOI18N
        Fsharp1Label.setForeground(new java.awt.Color(255, 255, 255));
        Fsharp1Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Fsharp1Label.setText("  ");
        Fsharp1Label.setBounds(114, 62, 17, 15);
        keyboardLP.add(Fsharp1Label, javax.swing.JLayeredPane.POPUP_LAYER);

        Gsharp1Label.setFont(new java.awt.Font("Lucida Grande", 1, 12)); // NOI18N
        Gsharp1Label.setForeground(new java.awt.Color(255, 255, 255));
        Gsharp1Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Gsharp1Label.setText("  ");
        Gsharp1Label.setBounds(134, 62, 17, 15);
        keyboardLP.add(Gsharp1Label, javax.swing.JLayeredPane.POPUP_LAYER);

        Bb1Label.setFont(new java.awt.Font("Lucida Grande", 1, 12)); // NOI18N
        Bb1Label.setForeground(new java.awt.Color(255, 255, 255));
        Bb1Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Bb1Label.setText("  ");
        Bb1Label.setBounds(154, 62, 17, 15);
        keyboardLP.add(Bb1Label, javax.swing.JLayeredPane.POPUP_LAYER);

        Csharp2Label.setFont(new java.awt.Font("Lucida Grande", 1, 12)); // NOI18N
        Csharp2Label.setForeground(new java.awt.Color(255, 255, 255));
        Csharp2Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Csharp2Label.setText("  ");
        Csharp2Label.setBounds(196, 62, 17, 15);
        keyboardLP.add(Csharp2Label, javax.swing.JLayeredPane.POPUP_LAYER);

        Eb2Label.setFont(new java.awt.Font("Lucida Grande", 1, 12)); // NOI18N
        Eb2Label.setForeground(new java.awt.Color(255, 255, 255));
        Eb2Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Eb2Label.setLabelFor(keyA0);
        Eb2Label.setText("  ");
        Eb2Label.setBounds(216, 62, 17, 15);
        keyboardLP.add(Eb2Label, javax.swing.JLayeredPane.POPUP_LAYER);

        Fsharp2Label.setFont(new java.awt.Font("Lucida Grande", 1, 12)); // NOI18N
        Fsharp2Label.setForeground(new java.awt.Color(255, 255, 255));
        Fsharp2Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Fsharp2Label.setText("  ");
        Fsharp2Label.setBounds(256, 62, 17, 15);
        keyboardLP.add(Fsharp2Label, javax.swing.JLayeredPane.POPUP_LAYER);

        Gsharp2Label.setFont(new java.awt.Font("Lucida Grande", 1, 12)); // NOI18N
        Gsharp2Label.setForeground(new java.awt.Color(255, 255, 255));
        Gsharp2Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Gsharp2Label.setText("  ");
        Gsharp2Label.setBounds(276, 62, 17, 15);
        keyboardLP.add(Gsharp2Label, javax.swing.JLayeredPane.POPUP_LAYER);

        Bb2Label.setFont(new java.awt.Font("Lucida Grande", 1, 12)); // NOI18N
        Bb2Label.setForeground(new java.awt.Color(255, 255, 255));
        Bb2Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Bb2Label.setText("  ");
        Bb2Label.setBounds(296, 62, 17, 15);
        keyboardLP.add(Bb2Label, javax.swing.JLayeredPane.POPUP_LAYER);

        Csharp3Label.setFont(new java.awt.Font("Lucida Grande", 1, 12)); // NOI18N
        Csharp3Label.setForeground(new java.awt.Color(255, 255, 255));
        Csharp3Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Csharp3Label.setText("  ");
        Csharp3Label.setBounds(338, 62, 17, 15);
        keyboardLP.add(Csharp3Label, javax.swing.JLayeredPane.POPUP_LAYER);

        Eb3Label.setFont(new java.awt.Font("Lucida Grande", 1, 12)); // NOI18N
        Eb3Label.setForeground(new java.awt.Color(255, 255, 255));
        Eb3Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Eb3Label.setText("  ");
        Eb3Label.setBounds(358, 62, 17, 15);
        keyboardLP.add(Eb3Label, javax.swing.JLayeredPane.POPUP_LAYER);

        Fsharp3Label.setFont(new java.awt.Font("Lucida Grande", 1, 12)); // NOI18N
        Fsharp3Label.setForeground(new java.awt.Color(255, 255, 255));
        Fsharp3Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Fsharp3Label.setLabelFor(keyA0);
        Fsharp3Label.setText("  ");
        Fsharp3Label.setBounds(398, 62, 17, 15);
        keyboardLP.add(Fsharp3Label, javax.swing.JLayeredPane.POPUP_LAYER);

        Gsharp3Label.setFont(new java.awt.Font("Lucida Grande", 1, 12)); // NOI18N
        Gsharp3Label.setForeground(new java.awt.Color(255, 255, 255));
        Gsharp3Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Gsharp3Label.setText("  ");
        Gsharp3Label.setBounds(418, 62, 17, 15);
        keyboardLP.add(Gsharp3Label, javax.swing.JLayeredPane.POPUP_LAYER);

        Bb3Label.setFont(new java.awt.Font("Lucida Grande", 1, 12)); // NOI18N
        Bb3Label.setForeground(new java.awt.Color(255, 255, 255));
        Bb3Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Bb3Label.setText("  ");
        Bb3Label.setBounds(438, 62, 17, 15);
        keyboardLP.add(Bb3Label, javax.swing.JLayeredPane.POPUP_LAYER);

        Csharp4Label.setFont(new java.awt.Font("Lucida Grande", 1, 12)); // NOI18N
        Csharp4Label.setForeground(new java.awt.Color(255, 255, 255));
        Csharp4Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Csharp4Label.setText("  ");
        Csharp4Label.setBounds(480, 62, 17, 15);
        keyboardLP.add(Csharp4Label, javax.swing.JLayeredPane.POPUP_LAYER);

        Eb4Label.setFont(new java.awt.Font("Lucida Grande", 1, 12)); // NOI18N
        Eb4Label.setForeground(new java.awt.Color(255, 255, 255));
        Eb4Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Eb4Label.setText("  ");
        Eb4Label.setBounds(500, 62, 17, 15);
        keyboardLP.add(Eb4Label, javax.swing.JLayeredPane.POPUP_LAYER);

        Fsharp4Label.setFont(new java.awt.Font("Lucida Grande", 1, 12)); // NOI18N
        Fsharp4Label.setForeground(new java.awt.Color(255, 255, 255));
        Fsharp4Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Fsharp4Label.setText("  ");
        Fsharp4Label.setBounds(540, 62, 17, 15);
        keyboardLP.add(Fsharp4Label, javax.swing.JLayeredPane.POPUP_LAYER);

        Gsharp4Label.setFont(new java.awt.Font("Lucida Grande", 1, 12)); // NOI18N
        Gsharp4Label.setForeground(new java.awt.Color(255, 255, 255));
        Gsharp4Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Gsharp4Label.setLabelFor(keyA0);
        Gsharp4Label.setText("  ");
        Gsharp4Label.setBounds(560, 62, 17, 15);
        keyboardLP.add(Gsharp4Label, javax.swing.JLayeredPane.POPUP_LAYER);

        Bb4Label.setFont(new java.awt.Font("Lucida Grande", 1, 12)); // NOI18N
        Bb4Label.setForeground(new java.awt.Color(255, 255, 255));
        Bb4Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Bb4Label.setText("  ");
        Bb4Label.setBounds(580, 62, 17, 15);
        keyboardLP.add(Bb4Label, javax.swing.JLayeredPane.POPUP_LAYER);

        Csharp5Label.setFont(new java.awt.Font("Lucida Grande", 1, 12)); // NOI18N
        Csharp5Label.setForeground(new java.awt.Color(255, 255, 255));
        Csharp5Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Csharp5Label.setText("  ");
        Csharp5Label.setBounds(622, 62, 17, 15);
        keyboardLP.add(Csharp5Label, javax.swing.JLayeredPane.POPUP_LAYER);

        Eb5Label.setFont(new java.awt.Font("Lucida Grande", 1, 12)); // NOI18N
        Eb5Label.setForeground(new java.awt.Color(255, 255, 255));
        Eb5Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Eb5Label.setText("  ");
        Eb5Label.setBounds(642, 62, 17, 15);
        keyboardLP.add(Eb5Label, javax.swing.JLayeredPane.POPUP_LAYER);

        Fsharp5Label.setFont(new java.awt.Font("Lucida Grande", 1, 12)); // NOI18N
        Fsharp5Label.setForeground(new java.awt.Color(255, 255, 255));
        Fsharp5Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Fsharp5Label.setText("  ");
        Fsharp5Label.setBounds(682, 62, 17, 15);
        keyboardLP.add(Fsharp5Label, javax.swing.JLayeredPane.POPUP_LAYER);

        Gsharp5Label.setFont(new java.awt.Font("Lucida Grande", 1, 12)); // NOI18N
        Gsharp5Label.setForeground(new java.awt.Color(255, 255, 255));
        Gsharp5Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Gsharp5Label.setText("  ");
        Gsharp5Label.setBounds(702, 62, 17, 15);
        keyboardLP.add(Gsharp5Label, javax.swing.JLayeredPane.POPUP_LAYER);

        Bb5Label.setFont(new java.awt.Font("Lucida Grande", 1, 12)); // NOI18N
        Bb5Label.setForeground(new java.awt.Color(255, 255, 255));
        Bb5Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Bb5Label.setLabelFor(keyA0);
        Bb5Label.setText("  ");
        Bb5Label.setBounds(722, 62, 17, 15);
        keyboardLP.add(Bb5Label, javax.swing.JLayeredPane.POPUP_LAYER);

        Csharp6Label.setFont(new java.awt.Font("Lucida Grande", 1, 12)); // NOI18N
        Csharp6Label.setForeground(new java.awt.Color(255, 255, 255));
        Csharp6Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Csharp6Label.setText("  ");
        Csharp6Label.setBounds(764, 62, 17, 15);
        keyboardLP.add(Csharp6Label, javax.swing.JLayeredPane.POPUP_LAYER);

        Eb6Label.setFont(new java.awt.Font("Lucida Grande", 1, 12)); // NOI18N
        Eb6Label.setForeground(new java.awt.Color(255, 255, 255));
        Eb6Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Eb6Label.setText("  ");
        Eb6Label.setBounds(784, 62, 17, 15);
        keyboardLP.add(Eb6Label, javax.swing.JLayeredPane.POPUP_LAYER);

        Fsharp6Label.setFont(new java.awt.Font("Lucida Grande", 1, 12)); // NOI18N
        Fsharp6Label.setForeground(new java.awt.Color(255, 255, 255));
        Fsharp6Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Fsharp6Label.setText("  ");
        Fsharp6Label.setBounds(824, 62, 17, 15);
        keyboardLP.add(Fsharp6Label, javax.swing.JLayeredPane.POPUP_LAYER);

        Gsharp6Label.setFont(new java.awt.Font("Lucida Grande", 1, 12)); // NOI18N
        Gsharp6Label.setForeground(new java.awt.Color(255, 255, 255));
        Gsharp6Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Gsharp6Label.setText("  ");
        Gsharp6Label.setBounds(844, 62, 17, 15);
        keyboardLP.add(Gsharp6Label, javax.swing.JLayeredPane.POPUP_LAYER);

        Bb6Label.setFont(new java.awt.Font("Lucida Grande", 1, 12)); // NOI18N
        Bb6Label.setForeground(new java.awt.Color(255, 255, 255));
        Bb6Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Bb6Label.setText("  ");
        Bb6Label.setBounds(864, 62, 17, 15);
        keyboardLP.add(Bb6Label, javax.swing.JLayeredPane.POPUP_LAYER);

        Csharp7Label.setFont(new java.awt.Font("Lucida Grande", 1, 12)); // NOI18N
        Csharp7Label.setForeground(new java.awt.Color(255, 255, 255));
        Csharp7Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Csharp7Label.setLabelFor(keyA0);
        Csharp7Label.setText("  ");
        Csharp7Label.setBounds(906, 62, 17, 15);
        keyboardLP.add(Csharp7Label, javax.swing.JLayeredPane.POPUP_LAYER);

        Eb7Label.setFont(new java.awt.Font("Lucida Grande", 1, 12)); // NOI18N
        Eb7Label.setForeground(new java.awt.Color(255, 255, 255));
        Eb7Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Eb7Label.setText("  ");
        Eb7Label.setBounds(926, 62, 17, 15);
        keyboardLP.add(Eb7Label, javax.swing.JLayeredPane.POPUP_LAYER);

        Fsharp7Label.setFont(new java.awt.Font("Lucida Grande", 1, 12)); // NOI18N
        Fsharp7Label.setForeground(new java.awt.Color(255, 255, 255));
        Fsharp7Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Fsharp7Label.setText("  ");
        Fsharp7Label.setBounds(966, 62, 17, 15);
        keyboardLP.add(Fsharp7Label, javax.swing.JLayeredPane.POPUP_LAYER);

        Gsharp7Label.setFont(new java.awt.Font("Lucida Grande", 1, 12)); // NOI18N
        Gsharp7Label.setForeground(new java.awt.Color(255, 255, 255));
        Gsharp7Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Gsharp7Label.setText("  ");
        Gsharp7Label.setBounds(986, 62, 17, 15);
        keyboardLP.add(Gsharp7Label, javax.swing.JLayeredPane.POPUP_LAYER);

        Bb7Label.setFont(new java.awt.Font("Lucida Grande", 1, 12)); // NOI18N
        Bb7Label.setForeground(new java.awt.Color(255, 255, 255));
        Bb7Label.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        Bb7Label.setText("  ");
        Bb7Label.setBounds(1006, 62, 17, 15);
        keyboardLP.add(Bb7Label, javax.swing.JLayeredPane.POPUP_LAYER);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 523;
        gridBagConstraints.ipady = 75;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanel1.add(keyboardLP, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        getContentPane().add(jPanel1, gridBagConstraints);

        inputRestBtn.setText("Rest");
        inputRestBtn.setToolTipText("Insert a rest");
        inputRestBtn.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                inputRestBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(30, 850, 0, 0);
        getContentPane().add(inputRestBtn, gridBagConstraints);

        chordNameDisplay.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        chordNameDisplay.setText("                             ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 20, 0);
        getContentPane().add(chordNameDisplay, gridBagConstraints);

        adviceNumSpinner.setToolTipText("Adjust the number of suggestions displayed");
        adviceNumSpinner.setValue(ADVICE_NUM_INIT);
        adviceNumSpinner.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                adviceNumSpinnerStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.ipadx = 10;
        gridBagConstraints.insets = new java.awt.Insets(30, 0, 0, 640);
        getContentPane().add(adviceNumSpinner, gridBagConstraints);

        refreshAdviceBtn.setText("Refresh Advice");
        refreshAdviceBtn.setToolTipText("Refresh the suggested notes");
        refreshAdviceBtn.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                refreshAdviceBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(30, 0, 0, 400);
        getContentPane().add(refreshAdviceBtn, gridBagConstraints);

        adviceSpinnerLabel.setText("Advice Window:");
        adviceSpinnerLabel.setAutoscrolls(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(30, 0, 0, 830);
        getContentPane().add(adviceSpinnerLabel, gridBagConstraints);

        SkipBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imp/gui/graphics/icons/play.gif"))); // NOI18N
        SkipBtn.setToolTipText("Forward one slot");
        SkipBtn.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                SkipBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(30, 600, 0, 0);
        getContentPane().add(SkipBtn, gridBagConstraints);

        BackBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imp/gui/graphics/icons/playReversed.png"))); // NOI18N
        BackBtn.setToolTipText("Back one slot");
        BackBtn.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                BackBtnActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(30, 420, 0, 0);
        getContentPane().add(BackBtn, gridBagConstraints);

        subDivComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6", "8" }));
        subDivComboBox.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                subDivComboBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 600);
        getContentPane().add(subDivComboBox, gridBagConstraints);

        jLabel1.setText("Stave Slot Subdivisions:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 10, 850);
        getContentPane().add(jLabel1, gridBagConstraints);

        pointerC4.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        pointerC4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imp/gui/graphics/pointer.png"))); // NOI18N
        pointerC4.setLabelFor(keyboardLP);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 32, 100);
        getContentPane().add(pointerC4, gridBagConstraints);

        EditMenu.setText("Edit");

        undoBtn.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, 0));
        undoBtn.setText("Undo");
        undoBtn.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                undoBtnActionPerformed(evt);
            }
        });
        EditMenu.add(undoBtn);

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y, 0));
        jMenuItem1.setText("Redo");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jMenuItem1ActionPerformed(evt);
            }
        });
        EditMenu.add(jMenuItem1);

        jMenuBar1.add(EditMenu);

        optionsMenu.setText("Options");

        clearKeyboardMI.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, 0));
        clearKeyboardMI.setText("Clear Keyboard");
        clearKeyboardMI.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                clearKeyboardMIActionPerformed(evt);
            }
        });
        optionsMenu.add(clearKeyboardMI);

        defaultSettingsBtn.setText("Default Settings");
        defaultSettingsBtn.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                defaultSettingsBtnActionPerformed(evt);
            }
        });
        optionsMenu.add(defaultSettingsBtn);

        useAdviceMI.setSelected(useAdvice);
        useAdviceMI.setText("Use Advice");
        useAdviceMI.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                useAdviceMIActionPerformed(evt);
            }
        });
        optionsMenu.add(useAdviceMI);

        useExpectanciesMI.setSelected(useExpectancies);
        useExpectanciesMI.setText("Show Expected Notes");
        useExpectanciesMI.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                useExpectanciesMIActionPerformed(evt);
            }
        });
        optionsMenu.add(useExpectanciesMI);

        useBlueAdviceMI.setSelected(useBlueAdvice);
        useBlueAdviceMI.setText("Use Blue Note Awareness");
        useBlueAdviceMI.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                useBlueAdviceMIActionPerformed(evt);
            }
        });
        optionsMenu.add(useBlueAdviceMI);

        fixNotesMI.setSelected(fixNotes);
        fixNotesMI.setText("Auto-Rectify Notes");
        fixNotesMI.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                fixNotesMIActionPerformed(evt);
            }
        });
        optionsMenu.add(fixNotesMI);

        jMenuBar1.add(optionsMenu);

        playbackMenu.setText("Playback");

        startPlayMI.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_I, 0));
        startPlayMI.setText("Start play");
        startPlayMI.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                startPlayMIActionPerformed(evt);
            }
        });
        playbackMenu.add(startPlayMI);

        pausePlayMI.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, 0));
        pausePlayMI.setText("Pause play");
        pausePlayMI.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                pausePlayMIActionPerformed(evt);
            }
        });
        playbackMenu.add(pausePlayMI);

        stopPlayMI.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_K, 0));
        stopPlayMI.setText("Stop play");
        stopPlayMI.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                stopPlayMIActionPerformed(evt);
            }
        });
        playbackMenu.add(stopPlayMI);

        startSelPlayMI.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ENTER, 0));
        startSelPlayMI.setText("Start selection play");
        startSelPlayMI.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                startSelPlayMIActionPerformed(evt);
            }
        });
        playbackMenu.add(startSelPlayMI);

        stopSelPlayMI.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ENTER, java.awt.event.InputEvent.SHIFT_MASK));
        stopSelPlayMI.setText("Play from selection to end");
        stopSelPlayMI.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                stopSelPlayMIActionPerformed(evt);
            }
        });
        playbackMenu.add(stopSelPlayMI);

        jMenuBar1.add(playbackMenu);

        windowMenu.setMnemonic('W');
        windowMenu.setText("Window");
        windowMenu.addMenuListener(new javax.swing.event.MenuListener()
        {
            public void menuSelected(javax.swing.event.MenuEvent evt)
            {
                windowMenuMenuSelected(evt);
            }
            public void menuDeselected(javax.swing.event.MenuEvent evt)
            {
            }
            public void menuCanceled(javax.swing.event.MenuEvent evt)
            {
            }
        });

        closeWindowMI.setMnemonic('C');
        closeWindowMI.setText("Close Window");
        closeWindowMI.setToolTipText("Closes the current window (exits program if there are no other windows)");
        closeWindowMI.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                closeWindowMIActionPerformed(evt);
            }
        });
        windowMenu.add(closeWindowMI);

        cascadeMI.setMnemonic('A');
        cascadeMI.setText("Cascade Windows");
        cascadeMI.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                cascadeMIActionPerformed(evt);
            }
        });
        windowMenu.add(cascadeMI);
        windowMenu.add(windowMenuSeparator);

        jMenuBar1.add(windowMenu);

        HelpMenu.setText("Help");
        HelpMenu.addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseClicked(java.awt.event.MouseEvent evt)
            {
                HelpMenuMouseClicked(evt);
            }
        });
        jMenuBar1.add(HelpMenu);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    Notate notate;
        
    /**
     * the array of StepPianoKeys for this Keyboard
     */
    public StepPianoKey[] pkeys;
    
    /**
     * Getting the piano key images.
     */
    public javax.swing.ImageIcon whiteKey =
        new javax.swing.ImageIcon(getClass().getResource(
            "/imp/gui/graphics/whitekey.jpg"));
    public javax.swing.ImageIcon whiteKeyPressed =
        new javax.swing.ImageIcon(getClass().getResource(
            "/imp/gui/graphics/whitekeypurple.jpg"));
    public javax.swing.ImageIcon whiteKeyChord =
        new javax.swing.ImageIcon(getClass().getResource(
            "/imp/gui/graphics/whitekeypressedgrayscale.jpg"));
    public javax.swing.ImageIcon whiteKeyColor =
        new javax.swing.ImageIcon(getClass().getResource(
            "/imp/gui/graphics/whitekeypressed.jpg"));
    public javax.swing.ImageIcon blackKey =
        new javax.swing.ImageIcon(getClass().getResource(
            "/imp/gui/graphics/blackkey.jpg"));
    public javax.swing.ImageIcon blackKeyPressed =
        new javax.swing.ImageIcon(getClass().getResource(
            "/imp/gui/graphics/blackkeypurple.jpg"));
    public javax.swing.ImageIcon blackKeyChord =
        new javax.swing.ImageIcon(getClass().getResource(
            "/imp/gui/graphics/blackkeypressedgrayscale.jpg"));
    public javax.swing.ImageIcon blackKeyColor =
        new javax.swing.ImageIcon(getClass().getResource(
            "/imp/gui/graphics/blackkeypressed.jpg"));
    public javax.swing.ImageIcon bassKey =
        new javax.swing.ImageIcon(getClass().getResource(
            "/imp/gui/graphics/rootkey.jpg"));
    public javax.swing.ImageIcon blackBassKey =
        new javax.swing.ImageIcon(getClass().getResource(
            "/imp/gui/graphics/blackrootkey.jpg"));
    
    /**
     * Setting some useful constants.
     */
    public boolean playback = false;    // true if keyboard is in playback mode 
    public final int BKHEIGHT = 80;     // height of a black key
    public final int BKWIDTH = 14;      // width of a black key
    public final int WKWIDTH = 20;      // width of a white key
    public final int WKHEIGHT = 120;    // height of a white key
    public final int SPWIDTH = 2;
    public final int OCTAVE = 140;      // width of an octave
    public final int OCTKEYS = 7;       // 7 white keys per octave
    public final int P_OCTAVE = 12;     // 12 notes per octave
    public final int A = 21;            // MIDI value of 1st key on keyboard
    public final int C_EIGHTH = 108;    // MIDI value of last key on keyboard
    public final int MIDDLE_C = 60;     // MIDI value of C4
    public final int LOW_BASS = 24;     // The lowest possible bass note
    public final int HALF_STEP = 1;     // MIDI difference between half-steps
    public final int SLOTS_PER_BEAT = 120;
    private final int NO_NOTE = -1; // DON'T CHANGE THIS VALUE. This is the same
                                    // as the value that MelodyPart.getPitch()
                                    // returns if the previous lastNote was a
                                    // rest, which is important.
    private final int ADVICE_NUM_MIN = 0;   // The minimum advice window size
    private final int ADVICE_NUM_MAX = 88;  // The maximum advice window size
    private final int ADVICE_NUM_INIT = P_OCTAVE;
    private final boolean USE_BLUE_ADVICE_INIT = true;
    private final boolean USE_ADVICE_INIT = true;
    private final boolean USE_EXPECTANCIES_INIT = false;
    private final boolean FIX_NOTES_INIT = false;
    
    
    private int adviceNum = ADVICE_NUM_INIT;
    private boolean useBlueAdvice = USE_BLUE_ADVICE_INIT;
    private boolean useAdvice = USE_ADVICE_INIT;
    private boolean useExpectancies = USE_EXPECTANCIES_INIT;
    private boolean fixNotes = FIX_NOTES_INIT;
    
    private String lastChord = null;

    public static final int HELP_DIALOG_WIDTH = 980;
    public static final int HELP_DIALOG_HEIGHT = 600;
  
    /**
     * Creates new form StepEntryKeyboard
     */
    public StepEntryKeyboard(Notate notate, int x, int y)
    {
        initComponents();
        initKeys();
        this.notate = notate;
        setSize(1045, 285);
        setLocation(x, y);
        WindowRegistry.registerWindow(this);
        setVisible(true);
    }
    
    Notate getNotate()
    {
        return notate;
    }
    
    /**
     * Colors the keyboard based on the selected slot on the stave and the the
     * last played midi value.
     */
    public void resetAdvice()
    {
        int slot = notate.getCurrentStave().getSelectionStart();
        resetAdvice(slot);
    }
    
    /**
     * Colors the keyboard based on the last played midi value and the given
     * slot. If useAdvice is on, it also colors suggested notes and the
     * bass lastNote.
     *
     * @param selectedSlot
     */
    public void resetAdvice(int selectedSlot)
    {
        // Don't bother if the keyboard isn't open
        if (!notate.getCurrentStepKeyboard().isVisible())
            return;
        
        // housekeeping
        setSubDivComboBox();
         
       // Get some data we need
        Stave currentStave = notate.getCurrentStave();
        MelodyPart melodyPart = currentStave.getMelodyPart();
        Note lastNote = melodyPart.getPrevNote(selectedSlot);

        
        // Set the midi to no note initially. That way we can tell whether
        // we get a pitch from the last note played
        int midiValue = NO_NOTE;
        boolean displayNote = false; // Decides whether the last note played
                                     // appears along with the suggested notes 
        
        // If the lastNote exists, let's use it.
        if (lastNote != null)
        {
            midiValue = lastNote.getPitch();
            displayNote = true;
            
            // If it turns out we still don't have a note, find the closest note
            // behind us on the staff. In this case, we won't display the note,
            // since the note we are using for reference isn't next to our
            // current slot.
            if (midiValue == NO_NOTE)
            {
                midiValue = lastRealNote(selectedSlot);
                displayNote = false;
            }
        }
        
        // If we STILL don't have a reference note, give up and use middle C.
        if (midiValue == NO_NOTE) midiValue = MIDDLE_C;
        
        clearKeyLabels();
        
        if (useExpectancies)
            findAndDisplayExpectancies(selectedSlot);
        
        if (useAdvice)
        {              
            ChordPart chordProg = currentStave.getChordProg();
            Chord currentChord = chordProg.getCurrentChord(selectedSlot);
            
            String chordName = currentChord.getName();
            chordNameDisplay.setText(chordName);

            ArrayList<Integer> chordMIDIs;
            ArrayList<Integer> colorMIDIs;
            
            if (!chordName.equals(Constants.NOCHORD))
            {
                ChordForm curForm = currentChord.getChordForm();
                String root = currentChord.getRoot();

                // Get lists of the actual midi values we want to color
                chordMIDIs = // the midi values for the notes in the chord
                    chordToAdvice(curForm.getSpellMIDIarray(root), midiValue);
                colorMIDIs = // the midi values for the color notes
                    chordToAdvice(curForm.getColorMIDIarray(root), midiValue);

                // Get a midi value for the bass note
                Integer bassMidi = findBass(root);
                StepPianoKey bass = pianoKeys()[bassMidi - A];
                
                // We only want to use blue advice if (a) blue advice is turned
                // on (b) the reference note we're using is actually adjacent to
                // the current selected slot and (c) the reference note is
                // outside of the chord.
                 
                if (useBlueAdvice && displayNote
                    && isBlue(midiValue, selectedSlot, chordProg))
                {
                    clearUnusedNotes(midiValue, bassMidi);
                    findAndPressBlueNotes(midiValue, chordMIDIs, colorMIDIs);
                }
                else
                {
                    pressPianoKeys(chordMIDIs, colorMIDIs, chordName,
                                   midiValue, bassMidi);
                }

                bass.setPressed(true);
                pressKey(bass, bass.getBassIcon());
            }
         
            lastChord = chordName;
        }
        
        else clearKeyColors(midiValue);

        if (displayNote)
        {
            StepPianoKey key = pianoKeys()[midiValue - A];
            key.setPressed(true);
            pressKey(key, key.getPressedIcon());
        }
    }
    
    /**
     * This method passes keyEvents to notate for
     * processing.
     * @param e 
     */
    public void keyPressed(KeyEvent e)
    {
        notate.keyPressed(e);           
    }
    
    /**
     * Given a selected slot and the current melody, determines how expected
     * each lastNote within the advice window is, normalizes it, and displays
     * the positive numbers on the keyboard.
     * 
     * @param selectedSlot
     * @param melody 
     */
    private void findAndDisplayExpectancies(int selectedSlot)
    {
        Stave stave = notate.getCurrentStave();
        int prevSlot = stave.getPreviousCstrLine(selectedSlot);
        
        int prevPitch = lastRealNote(selectedSlot);
        int prevPrevPitch = secondToLastRealNote(selectedSlot);
         
        Chord chord = stave.getChordProg().getCurrentChord(prevSlot);

        // if we don't have two real notes to base our 
        // expectancies on, we won't bother.
        if (prevPitch == NO_NOTE || prevPrevPitch == NO_NOTE) return;
        
        // Find the bounds of the advice window such that they conform to the
        // number of suggestions the user wants.
        int minNote = prevPitch - (int) Math.floor(adviceNum / 2.0);
        int maxNote = prevPitch + (int) Math.ceil(adviceNum / 2.0);
        
        ArrayList<Integer> midiArray = new ArrayList<Integer>(adviceNum + 1);
        ArrayList<Double> expectancies = new ArrayList<Double>(adviceNum + 1);
        
        // The following three if-statements ensure that the suggestions don't
        // extend off either end of the keyboard while preserving the size of
        // the suggestion window as best we can.
        if (maxNote > C_EIGHTH)
        {
            int diff = maxNote - C_EIGHTH;
            maxNote = C_EIGHTH;
            minNote -= diff;
        }
        if (minNote < A)
        {
            int diff = A - minNote;
            minNote = A;
            maxNote += diff;    
        }
        if (maxNote > C_EIGHTH)
            maxNote = C_EIGHTH;
        
        // Expectancies will never be less than zero, so this
        // is a fair initial value
        double maxExpect = 0;
        
        // Sort the midi values of the notes in the advice range
        // by their expectancies
        for (int midi = minNote ; midi <= maxNote; midi++ )
        {
            double expect = Expectancy.getExpectancy(midi, prevPitch,
                                                     prevPrevPitch, chord);
            midiArray.add(midi);
            expectancies.add(expect);
            
            if (expect > maxExpect) maxExpect = expect;
        }
        
        // Displays expectancies on the keyboard
        for(int i = 0; i < midiArray.size(); i++)
        {
            int midi = midiArray.get(i);
            StepPianoKey pk = pianoKeys()[midi - A];
            JLabel label = pk.getNumLabel();
            int value = (int)Math.floor(10*expectancies.get(i)/maxExpect);
            
            if (value > 0)
            {
                String str = Integer.toString(value);
                label.setText(str);
            }
        }
    }
    
    /**
     * Colors the notes in the given arrays that are a half-step away from the
     * midiValue.
     * 
     * @param midiValue
     * @param chordMIDIs
     * @param colorMIDIs
     */
    private void findAndPressBlueNotes(int midiValue,
                                       ArrayList<Integer> chordMIDIs,
                                       ArrayList<Integer> colorMIDIs)
    {

        
        StepPianoKey nextDown = pianoKeys()[midiValue - HALF_STEP - A];
        
        if (chordMIDIs.contains(midiValue - HALF_STEP))
        {
            nextDown.setPressed(true);
            pressKey(nextDown, nextDown.getChordIcon());
        }
        
        else if (colorMIDIs.contains(midiValue - HALF_STEP))
        {
            nextDown.setPressed(true);
            pressKey(nextDown, nextDown.getColorIcon());
        }
        
        else
        {
            nextDown.setPressed(false);
            pressKey(nextDown, nextDown.getOffIcon());
        }
        
        StepPianoKey nextUp = pianoKeys()[midiValue + HALF_STEP - A];
        
        if (chordMIDIs.contains(midiValue + HALF_STEP))
        {
            nextUp.setPressed(true);
            pressKey(nextUp, nextUp.getChordIcon());
        }
        
        else if (colorMIDIs.contains(midiValue + HALF_STEP))
        {
            nextUp.setPressed(true);
            pressKey(nextUp, nextUp.getColorIcon());
        }
        
        else
        {
            nextUp.setPressed(false);
            pressKey(nextUp, nextUp.getOffIcon());
        }
        
    }
    
    /**
     * 
     * 
     * @param midiValue
     * @param bassMidi 
     */
    private void clearUnusedNotes(int midiValue, int bassMidi)
    {
        for (StepPianoKey pk : pianoKeys())
        {
            pk.getNumLabel().setText("");
            int curMidi = pk.getMIDI();
            
            if (Math.abs(curMidi-midiValue) <= 1 || curMidi == bassMidi)
                continue;
            
            if (pk.isPressed())
            {
                pk.setPressed(false);
                pressKey(pk, pk.getOffIcon());
            }
        }
    }
    
    /**
     * Determines whether the given midiValue is outside of the chord based on
     * the given stave and slot.
     *
     * @param midiValue
     * @param selectedSlot
     * @param stave
     * @return
     */
    private boolean isBlue(int midiValue, int selectedSlot, ChordPart chords)
    {
        Stave stave = notate.getCurrentStave();
        // Get the chord that was current when the last note was played
        Chord currentChord = chords.getCurrentChord(
                                    stave.getPreviousCstrLine(selectedSlot));
        
        if (currentChord.getName().equals(Constants.NOCHORD)) return false;
        
        ChordForm curChordForm = currentChord.getChordForm();
        String root = currentChord.getRoot();

        ArrayList<Integer> chordMIDIs = // the midi values for the chord tones
                chordToAdvice(curChordForm.getSpellMIDIarray(root), midiValue);
        ArrayList<Integer> colorMIDIs = // the midi values for the color tones
                chordToAdvice(curChordForm.getColorMIDIarray(root), midiValue);

        return !(chordMIDIs.contains(midiValue) ||
                colorMIDIs.contains(midiValue) ||
                midiValue == NO_NOTE);
    }
    
    /**
     * Takes in an array and a reference pitch and returns an array containing
     * those same notes in every octave within an appropriate distance of the
     * reference such that the suggestion range is small enough.
     *
     * @param MIDIarray
     * @param reference
     * @return
     */
    private ArrayList<Integer> chordToAdvice(ArrayList<Integer> MIDIarray,
                                             int reference)
    {
        ArrayList<Integer> newMIDIs = new ArrayList();
        int minNote = reference - (int) Math.floor(adviceNum / 2.0);
        int maxNote = reference + (int) Math.ceil(adviceNum / 2.0);

        // The following three if-statements ensure that the suggestions don't
        // extend off either end of the keyboard while preserving the size of
        // the suggestion window as best we can
        if (maxNote > C_EIGHTH)
        {
            int diff = maxNote - C_EIGHTH;
            maxNote = C_EIGHTH;
            minNote -= diff;
        }
        if (minNote < A)
        {
            int diff = A - minNote;
            minNote = A;
            maxNote += diff;    
        }
        if (maxNote > C_EIGHTH)
            maxNote = C_EIGHTH;
        
        // Find all the octaves in which each note falls in correct range.
        // Make a list.
        for (int i = 0; i < MIDIarray.size(); i++)
        {
            int note = MIDIarray.get(i);

            while (note >= minNote)
                note -= P_OCTAVE;
            
            while (note <= maxNote)
            {
                if (note >= minNote)
                    newMIDIs.add(note);

                note += P_OCTAVE;
            }
        }
        
        return newMIDIs;
    }
    
    /**
     * 
     * 
     * @param midi
     * @return 
     */
    private int fixNote(int midi)
    {
        Stave currentStave = notate.getCurrentStave();
        ChordPart chordProg = currentStave.getChordProg();
        Chord currentChord = chordProg.getCurrentChord(
                                currentStave.getSelectionStart());

        String chordName = currentChord.getName();
        chordNameDisplay.setText(chordName);

        if (!chordName.equals(Constants.NOCHORD))
        {
            ChordForm curChordForm = currentChord.getChordForm();
            String root = currentChord.getRoot();

            // Get lists of the actual midi values we want to color
            ArrayList<Integer> chordMIDIs = // the values for the chord tones
                    chordToAdvice(curChordForm.getSpellMIDIarray(root), midi);
            ArrayList<Integer> colorMIDIs = // the values for the color notes
                    chordToAdvice(curChordForm.getColorMIDIarray(root), midi);

            int down = midi;
            int up = midi;

            while(true)
            {
                if (chordMIDIs.contains(down) || colorMIDIs.contains(down))
                    return down;

                if (chordMIDIs.contains(up) || colorMIDIs.contains(up))
                    return up;

                down--;
                up++;
            }
        }
        
        else return midi;
    }
    
    /**
     * Finds the chord root key based on the chord root text field.
     *
     * @return the integer value of the chord root key.
     */
    public int findBass(String bass)
    {
        int midiValue = NoteSymbol.makeNoteSymbol(bass).getMIDI();
        int lowRange = LOW_BASS;
        int highRange = lowRange + P_OCTAVE - 1;

        while (midiValue > highRange)
            midiValue -= P_OCTAVE;

        return midiValue;
    }
    
    /**
     * Finds the midi value of the first note preceding the given slot that has 
     * a nonnegative midi value. If there are none, it returns NO_NOTE.
     *
     * @param stave the current stave
     * @param melody the MelodyPart for the current stave
     * @param selectedSlot the
     */
    private int lastRealNote(int selectedSlot)
    {
        Stave stave = notate.getCurrentStave();
        MelodyPart melody = stave.getMelodyPart();
        
        int midi = NO_NOTE;
        while (midi == NO_NOTE)
        {
            Note note = melody.getPrevNote(selectedSlot);
            
            if (note == null) break;
            
            midi = note.getPitch();
            selectedSlot = stave.getPreviousCstrLine(selectedSlot);
        }
        return midi;
    }
    
    /**
     * Finds the second note preceding the given slot that has a nonnegative
     * midi value. This is the note immediately before the one returned by 
     * lastRealNote.
     * 
     * @param stave
     * @param melody
     * @param selectedSlot
     * @return 
     */
    private int secondToLastRealNote(int selectedSlot)
    {
        Stave stave = notate.getCurrentStave();
        MelodyPart melody = stave.getMelodyPart();
        
        int midi = NO_NOTE;
        boolean seenOneNote = false;
        while (midi == NO_NOTE)
        {
            Note note = melody.getPrevNote(selectedSlot);
            
            if (note == null) break;
            
            int curMidi =  note.getPitch();
            
            if (seenOneNote)
                midi = curMidi;
            else if (curMidi != NO_NOTE)
                seenOneNote = true;
                        
            selectedSlot = stave.getPreviousCstrLine(selectedSlot);
        }
        return midi;
    }

    /**
     * Inputs a note corresponding to the midiValue to the stave and advances
     * the selected slot.
     *
     * @param midiValue
     */
    private void inputNoteToStave(int midiValue)
    {
        Stave stave = notate.getCurrentStave();
        int index = notate.getCurrentSelectionStart();
        
        if (fixNotes) midiValue = fixNote(midiValue);
        
        Note newNote = new Note(midiValue);
        
        newNote.setEnharmonic(notate.getScore().getCurrentEnharmonics(index));
        notate.cm.execute(new SetNoteCommand(index, newNote,
                          notate.getCurrentMelodyPart()));
        
        int next = stave.getNextCstrLine(index);
        
        if (next >= 0)
            stave.setSelection(next, next);

        stave.repaint();
        stave.playSelectionNote(newNote, index);
    }

    /**
     * Puts a rest in the selected slot to the stave and advances the selected
     * slot.
     */
    private void inputRestToStave()
    {
        Stave stave = notate.getCurrentStave();
        int index = notate.getCurrentSelectionStart();
        
        notate.cm.execute(new SetRestCommand(index,
                          notate.getCurrentMelodyPart()));
        
        int next = stave.getNextCstrLine(index);
        
        if (next >= 0)
            stave.setSelection(next, next);

        stave.repaint();
    }

    /**
     * Advances the selected slot without putting a note in the previous one.
     */
    private void nextStaveSlot()
    {
        Stave stave = notate.getCurrentStave();
        int index = notate.getCurrentSelectionStart();
        int next = stave.getNextCstrLine(index);
        if (next >= 0)
            stave.setSelection(next, next);
        stave.repaint();
    }

    /**
     * Moves the selected slot back one space without placing a lastNote.
     */
    private void previousStaveSlot() 
    {
        Stave stave = notate.getCurrentStave();
        int index = notate.getCurrentSelectionStart();
        int previous = stave.getPreviousCstrLine(index);
        stave.setSelection(previous, previous);

        stave.repaint();
    }
    
    /**
     * pressKey changes the images of the keys based on whether they have been
     * pressed or not.
     *
     * @param keyPlayed
     */
    public void pressKey(StepPianoKey keyPlayed, Icon icon)
    {

        JLabel label = keyPlayed.getLabel();
        
        if (label.getIcon() != icon)
            label.setIcon(icon);

        forcePaint();
    }
    
    /**
     * Colors the piano keys corresponding to the midi values in the two lists
     * appropriately and updates the coloring of the rest of the keyboard based
     * on the chord name and pressed note.
     * @param chordMIDIs
     * @param colorMIDIs
     * @param chordName
     * @param pressedMidi 
     */
    private void pressPianoKeys(ArrayList<Integer> chordMIDIs,
                                ArrayList<Integer> colorMIDIs,
                                String chordName,
                                int pressedMidi, int bassMidi)
    {   
        for (StepPianoKey currentKey : pianoKeys())
        {
            
            int midi = currentKey.getMIDI();
            
            if (midi == pressedMidi || midi == bassMidi)
                continue;
            
            JLabel label = currentKey.getLabel();

            if (colorMIDIs.contains(midi))
            {
                Icon colorIcon = currentKey.getColorIcon();
                currentKey.setPressed(true);
                label.setIcon(colorIcon);
            }
            
            else if (chordMIDIs.contains(midi))
            {
                Icon chordIcon = currentKey.getChordIcon();
                currentKey.setPressed(true);
                label.setIcon(chordIcon);
            }
            
            else if (label.getIcon() == currentKey.getPressedIcon() || 
                    Math.abs(midi - pressedMidi) > (3*adviceNum)/4 || 
                    !chordName.equals(lastChord))
            {
                Icon offIcon = currentKey.getOffIcon();
                currentKey.setPressed(false);
                label.setIcon(offIcon);
            }
        }
        
        forcePaint();
    }

    /**
     * Restores the keyboard to its original state.
     */
    public void clearKeyboard()
    {
        for (StepPianoKey pk : pianoKeys())
        {
            pk.getNumLabel().setText("");
            if (pk.isPressed())
            {
                pk.setPressed(false);
                pressKey(pk, pk.getOffIcon());
            }
        }
    }
    
    /**
     * Clears all keys except for the key corresponding to the given midi.
     * @param midi 
     */
    
    public void clearKeyColors(int midi)
    {
        for (StepPianoKey pk : pianoKeys())
            if (pk.isPressed() && pk.getMIDI() != midi)
            {
                pk.setPressed(false);
                pressKey(pk, pk.getOffIcon());
            }
    }
    
    /**
     * Clears all the number labels on the keys and
     * sets them to the empty string.
     */
    public void clearKeyLabels()
    {
        for (StepPianoKey pk : pianoKeys())
            pk.getNumLabel().setText("");

    }

    /**
     * Determines whether the keyboard is in playback mode.
     *
     * @return true if the keyboard is playing, false otherwise
     */
    public boolean isPlaying()
    {
        return playback;
    }

    /**
     * turns playback mode on or off
     *
     * @param on
     */
    public void setPlayback(boolean on)
    {
        playback = on;
    }
    
    /**
     * Sets the combo box governing beat subdivisions to the given value.
     * @param value 
     */
    public void setSubDivComboBox(int value)
    {
        String boxValueStr = Integer.toString(value);
        subDivComboBox.setSelectedItem(boxValueStr);
    }
    
    /**
     * Sets the combo box governing beat subdivisions to the value in the
     * currently selected stave slot.
     */
    public void setSubDivComboBox()
    {
        Stave stave = notate.getCurrentStave();
        int subDivs = stave.getSubDivs(stave.getSelectionStart()/SLOTS_PER_BEAT);
        setSubDivComboBox(subDivs);
    }
    
    /**
     * Force painting the window, without waiting for repaint to do it, as
     * repaints may be queued when the calling application sleeps.
     */
    private void forcePaint()
    {
        paint(getGraphics());
    }
    
    /**
     * Initialize all keys.
     */
    private void initKeys()
    {
        pkeys = new StepPianoKey[88];
        // 0th octave keys
        pkeys[0] = new StepPianoKey(21, whiteKeyChord, whiteKeyColor,
            whiteKeyPressed, whiteKey, bassKey, keyA0, A0Label);
        pkeys[1] = new StepPianoKey(22, blackKeyChord, blackKeyColor,
            blackKeyPressed, blackKey, blackBassKey, keyBb0, Bb0Label);
        pkeys[2] = new StepPianoKey(23, whiteKeyChord, whiteKeyColor,
            whiteKeyPressed, whiteKey, bassKey, keyB0, B0Label);

        // 1st octave keys
        pkeys[3] = new StepPianoKey(24, whiteKeyChord, whiteKeyColor,
            whiteKeyPressed, whiteKey, bassKey, keyC1, C1Label);
        pkeys[4] = new StepPianoKey(25, blackKeyChord, blackKeyColor,
            blackKeyPressed, blackKey, blackBassKey, keyCsharp1, Csharp1Label);
        pkeys[5] = new StepPianoKey(26, whiteKeyChord, whiteKeyColor,
            whiteKeyPressed, whiteKey, bassKey, keyD1, D1Label);
        pkeys[6] = new StepPianoKey(27, blackKeyChord, blackKeyColor,
            blackKeyPressed, blackKey, blackBassKey, keyEb1, Eb1Label);
        pkeys[7] = new StepPianoKey(28, whiteKeyChord, whiteKeyColor,
            whiteKeyPressed, whiteKey, bassKey, keyE1, E1Label);
        pkeys[8] = new StepPianoKey(29, whiteKeyChord, whiteKeyColor,
            whiteKeyPressed, whiteKey, bassKey, keyF1, F1Label);
        pkeys[9] = new StepPianoKey(30, blackKeyChord, blackKeyColor,
            blackKeyPressed, blackKey, blackBassKey, keyFsharp1, Fsharp1Label);
        pkeys[10] = new StepPianoKey(31, whiteKeyChord, whiteKeyColor,
            whiteKeyPressed, whiteKey, bassKey, keyG1, G1Label);
        pkeys[11] = new StepPianoKey(32, blackKeyChord, blackKeyColor, 
            blackKeyPressed, blackKey, blackBassKey, keyGsharp1, Gsharp1Label);
        pkeys[12] = new StepPianoKey(33, whiteKeyChord, whiteKeyColor, 
            whiteKeyPressed, whiteKey, bassKey, keyA1, A1Label);
        pkeys[13] = new StepPianoKey(34, blackKeyChord, blackKeyColor,
            blackKeyPressed, blackKey, blackBassKey, keyBb1, Bb1Label);
        pkeys[14] = new StepPianoKey(35, whiteKeyChord, whiteKeyColor,
            whiteKeyPressed, whiteKey, bassKey, keyB1, B1Label);

        // 2nd octave keys
        pkeys[15] = new StepPianoKey(36, whiteKeyChord, whiteKeyColor,
            whiteKeyPressed, whiteKey, bassKey, keyC2, C2Label);
        pkeys[16] = new StepPianoKey(37, blackKeyChord, blackKeyColor,
            blackKeyPressed, blackKey, blackBassKey, keyCsharp2, Csharp2Label);
        pkeys[17] = new StepPianoKey(38, whiteKeyChord, whiteKeyColor,
            whiteKeyPressed, whiteKey, bassKey, keyD2, D2Label);
        pkeys[18] = new StepPianoKey(39, blackKeyChord, blackKeyColor,
            blackKeyPressed, blackKey, blackBassKey, keyEb2, Eb2Label);
        pkeys[19] = new StepPianoKey(40, whiteKeyChord, whiteKeyColor,
            whiteKeyPressed, whiteKey, bassKey, keyE2, E2Label);
        pkeys[20] = new StepPianoKey(41, whiteKeyChord, whiteKeyColor,
            whiteKeyPressed, whiteKey, bassKey, keyF2, F2Label);
        pkeys[21] = new StepPianoKey(42, blackKeyChord, blackKeyColor,
            blackKeyPressed, blackKey, blackBassKey, keyFsharp2, Fsharp2Label);
        pkeys[22] = new StepPianoKey(43, whiteKeyChord, whiteKeyColor,
            whiteKeyPressed, whiteKey, bassKey, keyG2, G2Label);
        pkeys[23] = new StepPianoKey(44, blackKeyChord, blackKeyColor,
            blackKeyPressed, blackKey, blackBassKey, keyGsharp2, Gsharp2Label);
        pkeys[24] = new StepPianoKey(45, whiteKeyChord, whiteKeyColor,
            whiteKeyPressed, whiteKey, bassKey, keyA2, A2Label);
        pkeys[25] = new StepPianoKey(46, blackKeyChord, blackKeyColor,
            blackKeyPressed, blackKey, blackBassKey, keyBb2, Bb2Label);
        pkeys[26] = new StepPianoKey(47, whiteKeyChord, whiteKeyColor,
            whiteKeyPressed, whiteKey, bassKey, keyB2, B2Label);

        // 3rd octave keys
        pkeys[27] = new StepPianoKey(48, whiteKeyChord, whiteKeyColor,
            whiteKeyPressed, whiteKey, bassKey, keyC3, C3Label);
        pkeys[28] = new StepPianoKey(49, blackKeyChord, blackKeyColor,
            blackKeyPressed, blackKey, blackBassKey, keyCsharp3, Csharp3Label);
        pkeys[29] = new StepPianoKey(50, whiteKeyChord, whiteKeyColor,
            whiteKeyPressed, whiteKey, bassKey, keyD3, D3Label);
        pkeys[30] = new StepPianoKey(51, blackKeyChord, blackKeyColor,
            blackKeyPressed, blackKey, blackBassKey, keyEb3, Eb3Label);
        pkeys[31] = new StepPianoKey(52, whiteKeyChord, whiteKeyColor,
            whiteKeyPressed, whiteKey, bassKey, keyE3, E3Label);
        pkeys[32] = new StepPianoKey(53, whiteKeyChord, whiteKeyColor, 
            whiteKeyPressed, whiteKey, bassKey, keyF3, F3Label);
        pkeys[33] = new StepPianoKey(54, blackKeyChord, blackKeyColor,
            blackKeyPressed, blackKey, blackBassKey, keyFsharp3, Fsharp3Label);
        pkeys[34] = new StepPianoKey(55, whiteKeyChord, whiteKeyColor,
            whiteKeyPressed, whiteKey, bassKey, keyG3, G3Label);
        pkeys[35] = new StepPianoKey(56, blackKeyChord, blackKeyColor,
            blackKeyPressed, blackKey, blackBassKey, keyGsharp3, Gsharp3Label);
        pkeys[36] = new StepPianoKey(57, whiteKeyChord, whiteKeyColor,
            whiteKeyPressed, whiteKey, bassKey, keyA3, A3Label);
        pkeys[37] = new StepPianoKey(58, blackKeyChord, blackKeyColor,
            blackKeyPressed, blackKey, blackBassKey, keyBb3, Bb3Label);
        pkeys[38] = new StepPianoKey(59, whiteKeyChord, whiteKeyColor,
            whiteKeyPressed, whiteKey, bassKey, keyB3, B3Label);

        // 4th octave keys
        pkeys[39] = new StepPianoKey(60, whiteKeyChord, whiteKeyColor,
            whiteKeyPressed, whiteKey, bassKey, keyC4, C4Label);
        pkeys[40] = new StepPianoKey(61, blackKeyChord, blackKeyColor,
            blackKeyPressed, blackKey, blackBassKey, keyCsharp4, Csharp4Label);
        pkeys[41] = new StepPianoKey(62, whiteKeyChord, whiteKeyColor,
            whiteKeyPressed, whiteKey, bassKey, keyD4, D4Label);
        pkeys[42] = new StepPianoKey(63, blackKeyChord, blackKeyColor,
            blackKeyPressed, blackKey, blackBassKey, keyEb4, Eb4Label);
        pkeys[43] = new StepPianoKey(64, whiteKeyChord, whiteKeyColor,
            whiteKeyPressed, whiteKey, bassKey, keyE4, E4Label);
        pkeys[44] = new StepPianoKey(65, whiteKeyChord, whiteKeyColor,
            whiteKeyPressed, whiteKey, bassKey, keyF4, F4Label);
        pkeys[45] = new StepPianoKey(66, blackKeyChord, blackKeyColor,
            blackKeyPressed, blackKey, blackBassKey, keyFsharp4, Fsharp4Label);
        pkeys[46] = new StepPianoKey(67, whiteKeyChord, whiteKeyColor,
            whiteKeyPressed, whiteKey, bassKey, keyG4, G4Label);
        pkeys[47] = new StepPianoKey(68, blackKeyChord, blackKeyColor,
            blackKeyPressed, blackKey, blackBassKey, keyGsharp4, Gsharp4Label);
        pkeys[48] = new StepPianoKey(69, whiteKeyChord, whiteKeyColor,
            whiteKeyPressed, whiteKey, bassKey, keyA4, A4Label);
        pkeys[49] = new StepPianoKey(70, blackKeyChord, blackKeyColor,
            blackKeyPressed, blackKey, blackBassKey, keyBb4, Bb4Label);
        pkeys[50] = new StepPianoKey(71, whiteKeyChord, whiteKeyColor,
            whiteKeyPressed, whiteKey, bassKey, keyB4, B4Label);

        // 5th octave keys
        pkeys[51] = new StepPianoKey(72, whiteKeyChord, whiteKeyColor,
            whiteKeyPressed, whiteKey, bassKey, keyC5, C5Label);
        pkeys[52] = new StepPianoKey(73, blackKeyChord, blackKeyColor,
            blackKeyPressed, blackKey, blackBassKey, keyCsharp5, Csharp5Label);
        pkeys[53] = new StepPianoKey(74, whiteKeyChord, whiteKeyColor,
            whiteKeyPressed, whiteKey, bassKey, keyD5, D5Label);
        pkeys[54] = new StepPianoKey(75, blackKeyChord, blackKeyColor,
            blackKeyPressed, blackKey, blackBassKey, keyEb5, Eb5Label);
        pkeys[55] = new StepPianoKey(76, whiteKeyChord, whiteKeyColor,
            whiteKeyPressed, whiteKey, bassKey, keyE5, E5Label);
        pkeys[56] = new StepPianoKey(77, whiteKeyChord, whiteKeyColor,
            whiteKeyPressed, whiteKey, bassKey, keyF5, F5Label);
        pkeys[57] = new StepPianoKey(78, blackKeyChord, blackKeyColor,
            blackKeyPressed, blackKey, blackBassKey, keyFsharp5, Fsharp5Label);
        pkeys[58] = new StepPianoKey(79, whiteKeyChord, whiteKeyColor,
            whiteKeyPressed, whiteKey, bassKey, keyG5, G5Label);
        pkeys[59] = new StepPianoKey(80, blackKeyChord, blackKeyColor,
            blackKeyPressed, blackKey, blackBassKey, keyGsharp5, Gsharp5Label);
        pkeys[60] = new StepPianoKey(81, whiteKeyChord, whiteKeyColor,
            whiteKeyPressed, whiteKey, bassKey, keyA5, A5Label);
        pkeys[61] = new StepPianoKey(82, blackKeyChord, blackKeyColor,
            blackKeyPressed, blackKey, blackBassKey, keyBb5, Bb5Label);
        pkeys[62] = new StepPianoKey(83, whiteKeyChord, whiteKeyColor,
            whiteKeyPressed, whiteKey, bassKey, keyB5, B5Label);

        // 6th octave keys
        pkeys[63] = new StepPianoKey(84, whiteKeyChord, whiteKeyColor,
            whiteKeyPressed, whiteKey, bassKey, keyC6, C6Label);
        pkeys[64] = new StepPianoKey(85, blackKeyChord, blackKeyColor,
            blackKeyPressed, blackKey, blackBassKey, keyCsharp6, Csharp5Label);
        pkeys[65] = new StepPianoKey(86, whiteKeyChord, whiteKeyColor,
            whiteKeyPressed, whiteKey, bassKey, keyD6, D6Label);
        pkeys[66] = new StepPianoKey(87, blackKeyChord, blackKeyColor,
            blackKeyPressed, blackKey, blackBassKey, keyEb6, Eb6Label);
        pkeys[67] = new StepPianoKey(88, whiteKeyChord, whiteKeyColor,
            whiteKeyPressed, whiteKey, bassKey, keyE6, E6Label);
        pkeys[68] = new StepPianoKey(89, whiteKeyChord, whiteKeyColor,
            whiteKeyPressed, whiteKey, bassKey, keyF6, F6Label);
        pkeys[69] = new StepPianoKey(90, blackKeyChord, blackKeyColor,
            blackKeyPressed, blackKey, blackBassKey, keyFsharp6, Fsharp6Label);
        pkeys[70] = new StepPianoKey(91, whiteKeyChord, whiteKeyColor,
            whiteKeyPressed, whiteKey, bassKey, keyG6, G6Label);
        pkeys[71] = new StepPianoKey(92, blackKeyChord, blackKeyColor,
            blackKeyPressed, blackKey, blackBassKey, keyGsharp6, Gsharp6Label);
        pkeys[72] = new StepPianoKey(93, whiteKeyChord, whiteKeyColor,
            whiteKeyPressed, whiteKey, bassKey, keyA6, A6Label);
        pkeys[73] = new StepPianoKey(94, blackKeyChord, blackKeyColor,
            blackKeyPressed, blackKey, blackBassKey, keyBb6, Bb6Label);
        pkeys[74] = new StepPianoKey(95, whiteKeyChord, whiteKeyColor,
            whiteKeyPressed, whiteKey, bassKey, keyB6, B6Label);

        // 7th octave keys
        pkeys[75] = new StepPianoKey(96, whiteKeyChord, whiteKeyColor,
            whiteKeyPressed, whiteKey, bassKey, keyC7, C7Label);
        pkeys[76] = new StepPianoKey(97, blackKeyChord, blackKeyColor,
            blackKeyPressed, blackKey, blackBassKey, keyCsharp7, Csharp7Label);
        pkeys[77] = new StepPianoKey(98, whiteKeyChord, whiteKeyColor,
            whiteKeyPressed, whiteKey, bassKey, keyD7, D7Label);
        pkeys[78] = new StepPianoKey(99, blackKeyChord, blackKeyColor,
            blackKeyPressed, blackKey, blackBassKey, keyEb7, Eb7Label);
        pkeys[79] = new StepPianoKey(100, whiteKeyChord, whiteKeyColor,
            whiteKeyPressed, whiteKey, bassKey, keyE7, E7Label);
        pkeys[80] = new StepPianoKey(101, whiteKeyChord, whiteKeyColor,
            whiteKeyPressed, whiteKey, bassKey, keyF7, F7Label);
        pkeys[81] = new StepPianoKey(102, blackKeyChord, blackKeyColor,
            blackKeyPressed, blackKey, blackBassKey, keyFsharp7, Fsharp7Label);
        pkeys[82] = new StepPianoKey(103, whiteKeyChord, whiteKeyColor,
            whiteKeyPressed, whiteKey, bassKey, keyG7, G7Label);
        pkeys[83] = new StepPianoKey(104, blackKeyChord, blackKeyColor,
            blackKeyPressed, blackKey, blackBassKey, keyGsharp7, Gsharp7Label);
        pkeys[84] = new StepPianoKey(105, whiteKeyChord, whiteKeyColor,
            whiteKeyPressed, whiteKey, bassKey, keyA7, A7Label);
        pkeys[85] = new StepPianoKey(106, blackKeyChord, blackKeyColor,
            blackKeyPressed, blackKey, blackBassKey, keyBb7, Bb7Label);
        pkeys[86] = new StepPianoKey(107, whiteKeyChord, whiteKeyColor,
            whiteKeyPressed, whiteKey, bassKey, keyB7, B7Label);

        // 8th octave keys
        pkeys[87] = new StepPianoKey(108, whiteKeyChord, whiteKeyColor,
            whiteKeyPressed, whiteKey, bassKey, keyC8, C8Label);
    }

    public StepPianoKey[] pianoKeys()
    {
        return pkeys;
    }

    /**
     *
    * Opens the help dialog.
    *
    */
    public void openHelpDialog()
    {
        keyboardHelpDialog.setVisible(true);
    }
    
    public void closeWindow()
    {
        setVisible(false);
        WindowRegistry.unregisterWindow(this);
        notate.closeStepKeyboard();
    }
    
private void keyboardLPMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_keyboardLPMouseClicked

    playback = false;

    // Getting the position of the mouse click
    int y = evt.getY(); 
    int x = evt.getX();

    if (y < WKHEIGHT && !playback) {
        // True if the user clicked a black key.
        boolean blackPianoKey = false;

        // Determines the number of white keys from the bottom of the keyboard
        int whiteKeyNum = (int)((x - (5.0/7) * SPWIDTH)/(WKWIDTH + (1.0/7)));

        int note = whiteKeyNum;

        // gives the octave number (ex. 4 in C4 for middle C) by 
        // determining where x is in relation to the pixel width of an octave
        int octave = ((whiteKeyNum + 5) / 7);

        // Only occurs if the click is at a y position that could be a black key
        // I don't really understand what's going on here, but it works so I'm
        // going to leave it.
        if (y < BKHEIGHT) {
            // find the position of the click within the key
            int inKey = x - (whiteKeyNum * WKWIDTH + SPWIDTH * octave);

            // if click is in right half of black key
            if (inKey < (BKWIDTH / 2 + 1)) {
                blackPianoKey = true;
                note -= 1;

                // not on a black key if note number is 1 or 4
                if (note % OCTKEYS == 1 || note % OCTKEYS == 4) {
                    blackPianoKey = false;
                }
            } // if click is in left half of black key
            else if (inKey > WKWIDTH - (BKWIDTH / 2 + 1)) {
                blackPianoKey = true;
                note = whiteKeyNum;

                // not on a black key if note number is 1 or 4
                if (note % OCTKEYS == 1 || note % OCTKEYS == 4) {
                    blackPianoKey = false;
                }
            }
        }
        
        // determine the MIDI value of the note clicked
        int baseMidi = 0;

        int oct = note - OCTKEYS * (octave - 1);

        if (octave == 0) {
            oct = note - OCTKEYS * octave;
        }

        // if the note is a black key
        if (blackPianoKey) {
            switch (oct) {
                case 0:
                    baseMidi = A + 1;     // A#/Bb
                    break;
                case 2:
                    baseMidi = A + 4;     // C#/Db
                    break;
                case 3:
                    baseMidi = A + 6;     // D#/Eb
                    break;
                case 5:
                    baseMidi = A + 9;     // F#/Gb
                    break;
                case 6:
                    baseMidi = A + 11;    // G#/Ab
                    break;
                case 7:
                    baseMidi = A + 13;    // A#/Bb
                    break;
            }
        } // if the note is not a black key
        else {
            switch (oct) {
                case 0:
                    baseMidi = A;      //A
                    break;
                case 1:
                    baseMidi = A + 2;  //B
                    break;
                case 2:
                    baseMidi = A + 3;  //C
                    break;
                case 3:
                    baseMidi = A + 5;  //D
                    break;
                case 4:
                    baseMidi = A + 7;  //E
                    break;
                case 5:
                    baseMidi = A + 8;  //F
                    break;
                case 6:
                    baseMidi = A + 10; //G
                    break;
                case 7:
                    baseMidi = A + 12; //A
                    break;
                case 8:
                    baseMidi = A + 14; //B
                    break;
            }
        }

        // Adjust the MIDI value for different octaves
        int midiValue = baseMidi + P_OCTAVE * (octave - 1);

        if (octave == 0) {
            midiValue = baseMidi;
        }

        int m = evt.getModifiers();
        String mod = MouseEvent.getMouseModifiersText(m);

        if (notate.stepInputSelected()) {
            inputNoteToStave(midiValue);
        }

    }
    keyboardLP.requestFocus();
}//GEN-LAST:event_keyboardLPMouseClicked

private void startPlayMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startPlayMIActionPerformed

    playback = true;
    notate.playScore();
}//GEN-LAST:event_startPlayMIActionPerformed

private void stopPlayMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopPlayMIActionPerformed

    playback = false;
    notate.stopPlaying();
    clearKeyboard();
}//GEN-LAST:event_stopPlayMIActionPerformed

private void startSelPlayMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startSelPlayMIActionPerformed

    playback = true;
    notate.getCurrentStave().playSelection(false, 0, PlayScoreCommand.USEDRUMS,
                                           "VoicingKeyboard");
}//GEN-LAST:event_startSelPlayMIActionPerformed

private void stopSelPlayMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopSelPlayMIActionPerformed

    playback = false;
    notate.getCurrentStave().playSelection(true, 0, PlayScoreCommand.USEDRUMS,
                                           "VoicingKeyboard");
}//GEN-LAST:event_stopSelPlayMIActionPerformed

private void pausePlayMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pausePlayMIActionPerformed

    if (playback)
        notate.pauseToKeyboard();
}//GEN-LAST:event_pausePlayMIActionPerformed

private void closeWindowMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeWindowMIActionPerformed

    closeWindow();
}//GEN-LAST:event_closeWindowMIActionPerformed

private void cascadeMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cascadeMIActionPerformed

    WindowRegistry.cascadeWindows(this);
}//GEN-LAST:event_cascadeMIActionPerformed

private void windowMenuMenuSelected(javax.swing.event.MenuEvent evt) {//GEN-FIRST:event_windowMenuMenuSelected

    windowMenu.removeAll();
    windowMenu.add(closeWindowMI);
    windowMenu.add(cascadeMI);
    windowMenu.add(windowMenuSeparator);

    for (WindowMenuItem w : WindowRegistry.getWindows())
        windowMenu.add(w.getMI(this));  // these are static, and calling getMI
                                        // updates the name on them too in case
                                        // the window title changed

    windowMenu.repaint();
}//GEN-LAST:event_windowMenuMenuSelected

    private void clearKeyboardMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearKeyboardMIActionPerformed

        clearKeyboard();
        }//GEN-LAST:event_clearKeyboardMIActionPerformed

    private void inputRestBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputRestBtnActionPerformed
        
        inputRestToStave();
        requestFocus();
    }//GEN-LAST:event_inputRestBtnActionPerformed

    private void adviceNumSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_adviceNumSpinnerStateChanged
        try {
            String newValueStr = adviceNumSpinner.getValue().toString();
            int newValue = new Integer(newValueStr);

            if (newValue <= ADVICE_NUM_MIN)
            {
                adviceNum = ADVICE_NUM_MIN;
                adviceNumSpinner.setValue(adviceNum);
            }
            else if (newValue > ADVICE_NUM_MAX)
            {
                adviceNum = ADVICE_NUM_MAX;
                adviceNumSpinner.setValue(adviceNum);        
            }            
            else adviceNum = newValue;
        }
        catch (NumberFormatException e)
        {
            // do nothing
        }
        requestFocus();
    }//GEN-LAST:event_adviceNumSpinnerStateChanged

    private void SkipBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SkipBtnActionPerformed
        
        nextStaveSlot();
        requestFocus();
    }//GEN-LAST:event_SkipBtnActionPerformed

    private void BackBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackBtnActionPerformed
        
        previousStaveSlot();
        requestFocus();
    }//GEN-LAST:event_BackBtnActionPerformed

    private void refreshAdviceBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshAdviceBtnActionPerformed

        resetAdvice();
        requestFocus();
    }//GEN-LAST:event_refreshAdviceBtnActionPerformed

    private void subDivComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subDivComboBoxActionPerformed
        
        try
        {
            String newValueStr = subDivComboBox.getSelectedItem().toString();
            int newValue = new Integer(newValueStr);
            Stave stave = notate.getCurrentStave();
            
            int slot = stave.getSelectionStart()/SLOTS_PER_BEAT;
            stave.setSubDivs(slot,newValue);
            stave.repaint();
            keyboardLP.requestFocus();  
        }
        catch (NumberFormatException e)
        {
            // do nothing
        }
    }//GEN-LAST:event_subDivComboBoxActionPerformed

    private void defaultSettingsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_defaultSettingsBtnActionPerformed
        
        useAdvice = USE_ADVICE_INIT;
        useAdviceMI.setSelected(USE_ADVICE_INIT);
        
        useBlueAdvice = USE_BLUE_ADVICE_INIT;
        useBlueAdviceMI.setSelected(USE_BLUE_ADVICE_INIT);
        
        useExpectancies = USE_EXPECTANCIES_INIT;
        useExpectanciesMI.setSelected(USE_EXPECTANCIES_INIT);
        
        fixNotes = FIX_NOTES_INIT;
        fixNotesMI.setSelected(FIX_NOTES_INIT);
        
        resetAdvice();
    }//GEN-LAST:event_defaultSettingsBtnActionPerformed

    private void fixNotesMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fixNotesMIActionPerformed
        
        if (fixNotesMI.isSelected()) fixNotes = true;
        else fixNotes = false;
    }//GEN-LAST:event_fixNotesMIActionPerformed

    private void useBlueAdviceMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useBlueAdviceMIActionPerformed
        
        if (useBlueAdviceMI.isSelected()) useBlueAdvice = true;
        else useBlueAdvice = false;
        
        resetAdvice();
    }//GEN-LAST:event_useBlueAdviceMIActionPerformed

    private void useAdviceMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useAdviceMIActionPerformed
        
        if (useAdviceMI.isSelected())
            useAdvice = true;
        else
            useAdvice = false;

        resetAdvice();
        requestFocus();
    }//GEN-LAST:event_useAdviceMIActionPerformed

    private void useExpectanciesMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useExpectanciesMIActionPerformed
        
        if (useExpectanciesMI.isSelected()) useExpectancies = true;
        else useExpectancies = false;
      
        resetAdvice();
        requestFocus();
    }//GEN-LAST:event_useExpectanciesMIActionPerformed

    private void HelpMenuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_HelpMenuMouseClicked
        
        openHelpDialog();
        HelpMenu.setSelected(false);
        requestFocus();
    }//GEN-LAST:event_HelpMenuMouseClicked

    private void undoBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_undoBtnActionPerformed
        
        notate.undoCommand();
        requestFocus();
    }//GEN-LAST:event_undoBtnActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        
        notate.redoCommand();
        requestFocus();

    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        keyPressed(evt);
    }//GEN-LAST:event_formKeyPressed

    private void keyboardLPKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_keyboardLPKeyPressed

        keyPressed(evt);
    }//GEN-LAST:event_keyboardLPKeyPressed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        closeWindow();
    }//GEN-LAST:event_formWindowClosing

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel A0Label;
    private javax.swing.JLabel A1Label;
    private javax.swing.JLabel A2Label;
    private javax.swing.JLabel A3Label;
    private javax.swing.JLabel A4Label;
    private javax.swing.JLabel A5Label;
    private javax.swing.JLabel A6Label;
    private javax.swing.JLabel A7Label;
    private javax.swing.JLabel B0Label;
    private javax.swing.JLabel B1Label;
    private javax.swing.JLabel B2Label;
    private javax.swing.JLabel B3Label;
    private javax.swing.JLabel B4Label;
    private javax.swing.JLabel B5Label;
    private javax.swing.JLabel B6Label;
    private javax.swing.JLabel B7Label;
    private javax.swing.JButton BackBtn;
    private javax.swing.JLabel Bb0Label;
    private javax.swing.JLabel Bb1Label;
    private javax.swing.JLabel Bb2Label;
    private javax.swing.JLabel Bb3Label;
    private javax.swing.JLabel Bb4Label;
    private javax.swing.JLabel Bb5Label;
    private javax.swing.JLabel Bb6Label;
    private javax.swing.JLabel Bb7Label;
    private javax.swing.JLabel C1Label;
    private javax.swing.JLabel C2Label;
    private javax.swing.JLabel C3Label;
    private javax.swing.JLabel C4Label;
    private javax.swing.JLabel C5Label;
    private javax.swing.JLabel C6Label;
    private javax.swing.JLabel C7Label;
    private javax.swing.JLabel C8Label;
    private javax.swing.JLabel Csharp1Label;
    private javax.swing.JLabel Csharp2Label;
    private javax.swing.JLabel Csharp3Label;
    private javax.swing.JLabel Csharp4Label;
    private javax.swing.JLabel Csharp5Label;
    private javax.swing.JLabel Csharp6Label;
    private javax.swing.JLabel Csharp7Label;
    private javax.swing.JLabel D1Label;
    private javax.swing.JLabel D2Label;
    private javax.swing.JLabel D3Label;
    private javax.swing.JLabel D4Label;
    private javax.swing.JLabel D5Label;
    private javax.swing.JLabel D6Label;
    private javax.swing.JLabel D7Label;
    private javax.swing.JLabel E1Label;
    private javax.swing.JLabel E2Label;
    private javax.swing.JLabel E3Label;
    private javax.swing.JLabel E4Label;
    private javax.swing.JLabel E5Label;
    private javax.swing.JLabel E6Label;
    private javax.swing.JLabel E7Label;
    private javax.swing.JLabel Eb1Label;
    private javax.swing.JLabel Eb2Label;
    private javax.swing.JLabel Eb3Label;
    private javax.swing.JLabel Eb4Label;
    private javax.swing.JLabel Eb5Label;
    private javax.swing.JLabel Eb6Label;
    private javax.swing.JLabel Eb7Label;
    private javax.swing.JMenu EditMenu;
    private javax.swing.JLabel F1Label;
    private javax.swing.JLabel F2Label;
    private javax.swing.JLabel F3Label;
    private javax.swing.JLabel F4Label;
    private javax.swing.JLabel F5Label;
    private javax.swing.JLabel F6Label;
    private javax.swing.JLabel F7Label;
    private javax.swing.JLabel Fsharp1Label;
    private javax.swing.JLabel Fsharp2Label;
    private javax.swing.JLabel Fsharp3Label;
    private javax.swing.JLabel Fsharp4Label;
    private javax.swing.JLabel Fsharp5Label;
    private javax.swing.JLabel Fsharp6Label;
    private javax.swing.JLabel Fsharp7Label;
    private javax.swing.JLabel G1Label;
    private javax.swing.JLabel G2Label;
    private javax.swing.JLabel G3Label;
    private javax.swing.JLabel G4Label;
    private javax.swing.JLabel G5Label;
    private javax.swing.JLabel G6Label;
    private javax.swing.JLabel G7Label;
    private javax.swing.JLabel Gsharp1Label;
    private javax.swing.JLabel Gsharp2Label;
    private javax.swing.JLabel Gsharp3Label;
    private javax.swing.JLabel Gsharp4Label;
    private javax.swing.JLabel Gsharp5Label;
    private javax.swing.JLabel Gsharp6Label;
    private javax.swing.JLabel Gsharp7Label;
    private javax.swing.JMenu HelpMenu;
    private javax.swing.JButton SkipBtn;
    private javax.swing.JSpinner adviceNumSpinner;
    private javax.swing.JLabel adviceSpinnerLabel;
    private javax.swing.JMenuItem cascadeMI;
    private javax.swing.JLabel chordNameDisplay;
    private javax.swing.JMenuItem clearKeyboardMI;
    private javax.swing.JMenuItem closeWindowMI;
    private javax.swing.JMenuItem defaultSettingsBtn;
    private javax.swing.JCheckBoxMenuItem fixNotesMI;
    private javax.swing.JButton inputRestBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JLabel keyA0;
    private javax.swing.JLabel keyA1;
    private javax.swing.JLabel keyA2;
    private javax.swing.JLabel keyA3;
    private javax.swing.JLabel keyA4;
    private javax.swing.JLabel keyA5;
    private javax.swing.JLabel keyA6;
    private javax.swing.JLabel keyA7;
    private javax.swing.JLabel keyB0;
    private javax.swing.JLabel keyB1;
    private javax.swing.JLabel keyB2;
    private javax.swing.JLabel keyB3;
    private javax.swing.JLabel keyB4;
    private javax.swing.JLabel keyB5;
    private javax.swing.JLabel keyB6;
    private javax.swing.JLabel keyB7;
    private javax.swing.JLabel keyBb0;
    private javax.swing.JLabel keyBb1;
    private javax.swing.JLabel keyBb2;
    private javax.swing.JLabel keyBb3;
    private javax.swing.JLabel keyBb4;
    private javax.swing.JLabel keyBb5;
    private javax.swing.JLabel keyBb6;
    private javax.swing.JLabel keyBb7;
    private javax.swing.JLabel keyC1;
    private javax.swing.JLabel keyC2;
    private javax.swing.JLabel keyC3;
    private javax.swing.JLabel keyC4;
    private javax.swing.JLabel keyC5;
    private javax.swing.JLabel keyC6;
    private javax.swing.JLabel keyC7;
    private javax.swing.JLabel keyC8;
    private javax.swing.JLabel keyCsharp1;
    private javax.swing.JLabel keyCsharp2;
    private javax.swing.JLabel keyCsharp3;
    private javax.swing.JLabel keyCsharp4;
    private javax.swing.JLabel keyCsharp5;
    private javax.swing.JLabel keyCsharp6;
    private javax.swing.JLabel keyCsharp7;
    private javax.swing.JLabel keyD1;
    private javax.swing.JLabel keyD2;
    private javax.swing.JLabel keyD3;
    private javax.swing.JLabel keyD4;
    private javax.swing.JLabel keyD5;
    private javax.swing.JLabel keyD6;
    private javax.swing.JLabel keyD7;
    private javax.swing.JLabel keyE1;
    private javax.swing.JLabel keyE2;
    private javax.swing.JLabel keyE3;
    private javax.swing.JLabel keyE4;
    private javax.swing.JLabel keyE5;
    private javax.swing.JLabel keyE6;
    private javax.swing.JLabel keyE7;
    private javax.swing.JLabel keyEb1;
    private javax.swing.JLabel keyEb2;
    private javax.swing.JLabel keyEb3;
    private javax.swing.JLabel keyEb4;
    private javax.swing.JLabel keyEb5;
    private javax.swing.JLabel keyEb6;
    private javax.swing.JLabel keyEb7;
    private javax.swing.JLabel keyF1;
    private javax.swing.JLabel keyF2;
    private javax.swing.JLabel keyF3;
    private javax.swing.JLabel keyF4;
    private javax.swing.JLabel keyF5;
    private javax.swing.JLabel keyF6;
    private javax.swing.JLabel keyF7;
    private javax.swing.JLabel keyFsharp1;
    private javax.swing.JLabel keyFsharp2;
    private javax.swing.JLabel keyFsharp3;
    private javax.swing.JLabel keyFsharp4;
    private javax.swing.JLabel keyFsharp5;
    private javax.swing.JLabel keyFsharp6;
    private javax.swing.JLabel keyFsharp7;
    private javax.swing.JLabel keyG1;
    private javax.swing.JLabel keyG2;
    private javax.swing.JLabel keyG3;
    private javax.swing.JLabel keyG4;
    private javax.swing.JLabel keyG5;
    private javax.swing.JLabel keyG6;
    private javax.swing.JLabel keyG7;
    private javax.swing.JLabel keyGsharp1;
    private javax.swing.JLabel keyGsharp2;
    private javax.swing.JLabel keyGsharp3;
    private javax.swing.JLabel keyGsharp4;
    private javax.swing.JLabel keyGsharp5;
    private javax.swing.JLabel keyGsharp6;
    private javax.swing.JLabel keyGsharp7;
    private javax.swing.JDialog keyboardHelpDialog;
    private javax.swing.JLayeredPane keyboardLP;
    private javax.swing.JMenu optionsMenu;
    private javax.swing.JMenuItem pausePlayMI;
    private javax.swing.JMenu playbackMenu;
    private javax.swing.JLabel pointerC4;
    private javax.swing.JButton refreshAdviceBtn;
    private javax.swing.JMenuItem startPlayMI;
    private javax.swing.JMenuItem startSelPlayMI;
    private javax.swing.JMenuItem stopPlayMI;
    private javax.swing.JMenuItem stopSelPlayMI;
    private javax.swing.JComboBox subDivComboBox;
    private javax.swing.JMenuItem undoBtn;
    private javax.swing.JCheckBoxMenuItem useAdviceMI;
    private javax.swing.JCheckBoxMenuItem useBlueAdviceMI;
    private javax.swing.JCheckBoxMenuItem useExpectanciesMI;
    private javax.swing.JMenu windowMenu;
    private javax.swing.JSeparator windowMenuSeparator;
    // End of variables declaration//GEN-END:variables


}