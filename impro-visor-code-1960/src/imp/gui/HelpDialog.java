/**
 * This Java Class is part of the Impro-Visor Application
 *
 * Copyright (C) 2005-2009 Robert Keller and Harvey Mudd College
 *
 * Impro-Visor is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * Impro-Visor is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * merchantability or fitness for a particular purpose.  See the
 * GNU General Public License for more details.
 *

 * You should have received a copy of the GNU General Public License
 * along with Impro-Visor; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */

package imp.gui;

/**
 *
 * @author  keller
 */
public class HelpDialog extends javax.swing.JDialog {

    /** Creates new form HelpDialog */
    public HelpDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        helpTabbedPane = new javax.swing.JTabbedPane();
        helpByTopic = new javax.swing.JScrollPane();
        helpByTopicList = new javax.swing.JTextArea();
        alphaCommandPane = new javax.swing.JScrollPane();
        alphaCommandList = new javax.swing.JTextArea();
        melodyNotation = new javax.swing.JScrollPane();
        melodyNotationHelp = new javax.swing.JTextArea();
        chordListingPane = new javax.swing.JScrollPane();
        chordList = new javax.swing.JTextArea();
        SoloGenerator = new javax.swing.JScrollPane();
        soloGenInstructions = new javax.swing.JTextArea();
        styleHelpPane = new javax.swing.JScrollPane();
        styleHelpList1 = new javax.swing.JTextArea();
        drawingHelpPane = new javax.swing.JScrollPane();
        drawingHelp = new javax.swing.JTextArea();
        roadmapHelpPane = new javax.swing.JScrollPane();
        roadmapHelp = new javax.swing.JTextArea();
        lickGenSettingsPane = new javax.swing.JScrollPane();
        lickGenSettings = new javax.swing.JTextArea();
        audioInputPane = new javax.swing.JScrollPane();
        audioInputPaneText = new javax.swing.JTextArea();
        transformFunctionsPane = new javax.swing.JScrollPane();
        functionDocumentationTextArea = new javax.swing.JTextArea();
        transformHelpPane = new javax.swing.JScrollPane();
        transformHelpTextArea = new javax.swing.JTextArea();
        guideToneHelpPane = new javax.swing.JScrollPane();
        guideToneHelpTextArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(680, 800));
        getContentPane().setLayout(new java.awt.GridBagLayout());

        helpTabbedPane.setToolTipText("Alphabetic Listing of Key Commands");
        helpTabbedPane.setMinimumSize(new java.awt.Dimension(500, 700));
        helpTabbedPane.setPreferredSize(new java.awt.Dimension(600, 800));

        helpByTopic.setMinimumSize(new java.awt.Dimension(500, 800));
        helpByTopic.setPreferredSize(new java.awt.Dimension(600, 900));

        helpByTopicList.setEditable(false);
        helpByTopicList.setColumns(20);
        helpByTopicList.setFont(new java.awt.Font("Lucida Console", 0, 13)); // NOI18N
        helpByTopicList.setRows(5);
        helpByTopicList.setText("Impro-Visor Help By Topic\n\nWe give the key-stroke version of most commands. The menus can also be used to refresh your memory.\n\nGrid Lines:\n\n\tGrid lines indicate potential note, rest, and chord starting and ending points. \n\tGrid lines appear in a measure when the mouse is moved over it.\n\tMultiple adjacent grid lines may be selected.\n\tSome commands, such as Advice, only function if a single grid line is selected.\n\tIf one or more grid lines are selected, we call this \"the selection\".\n\nTo select a grid line, or to extend a selection:\n\n\tSelected grid lines are shown by high-lighting the line and any note on it.\n\n\tIf no grid line is already selected, shift-click on the desired grid line.\n\tIf a grid line is already selected, shift-click twice on the desired grid line.\n\n\tShift-clicking on a grid line inside the selection causes just that grid line to be selected.\n\tShift-clicking on a grid line outside the selection extends the selection to include that grid line.\n\tControl-a selects all grid lines at once.\n\tEscape unselects everything.\n\tIf a single grid line is selected, it can be moved back and forth using keys f and a.\n\nEntering notes:\n\n\tClick on the intersection of any grid line and staff line or space.\n\tAlternatively, notes can be entered in the text entry field using leadsheet notation.\n\tAccidentals:\n\t\tUse keys e and d to raise and lower notes by half step.\n\t\tUse the space bar to change an accidental enharmonically.\n\t\tUse keys t and g to raise and lower notes by octave.\n\tIf you make a mistake entering a note, just click another note on the same grid line.\n\tYou may also undo one or more note entry actions with key z.\n\tThe duration values of notes will be long when you first click.\n\tClick over the tied portion to enter the next note in a sequence.\n\tIf you want a rest, click a note or select a grid line, then press key r.\n\t\nRemoving notes:\n\n\tSelect the grid line that begins the note you want to remove. Then press either r or x.\n\tPressing r will replace the note with a rest.\n\tPressing x will remove the note, but extend the value of the previous note over it.\n\nExtending the duration of a note:\n\n\tIf the note to be extended is followed by a rest, select the grid line of that starts the rest,then press x.\n\nEntering chords:\n\n\tEnter the chord names in the text entry field, pressing enter when desired.\n\tChords will be entered starting at the first grid line selected.\n\tIf there is no grid line selected, nothing will happen.\n\tUse bars | to indicate measures.\n\tChords are spaced evenly within a measure. \n\tUse / to indicate more time for the previous chord.\n\tExample:\t| A B C / |\tmeans that C gets twice the value that A and B get.\n\tUse keys E and D to raise or lower a chord by half steps.\n\nCopying a selection:\n\n\tFirst create the selection by shift clicking as described above.\n\tPress c to copy the notes in the selection.\n\tPress C to copy the chords in the selection.\n\tPress control-c to copy both notes and chords.\n\tCopying takes place to a \"clip-board\" that is not visible.\n\tThe copied selection is not removed.\n\nPasting a selection:\n\n\tPasting is done from the invisible \"clip-board\" mentioned above.\n\tFirst select a single grid line.\n\tPress v to paste the notes previously copied or cut.\n\tPress V to paste the chords previously copied or cut.\n\tPress control-v to paste both notes and chords.\n\tThe selection can be pasted multiple times in different positions.\n\nCutting a selection:\n\n\tCutting is like copying, except the selection is removed as well.\n\tFirst create the selection by shift clicking as described above.\n\tPress x to copy the notes in the selection.\n\tPress X to copy the chords in the selection.\n\tPress control-x to copy both notes and chords.\n\tBoth cut and copy put notes and chords into the \"clip-board\".\n\nUndoing a paste or cut:\n\n\tUse key z to undo.\n\tMultiple undos are allowed.\n\tUse key y to redo something you just undid.\n\nPasting from the text entry field:\n\n\tBoth chords and notes can be entered through the text entry field.\n\tPressing return enters the contents at the current selection.\n\tOne can also select a grid line then re-enter the text entry items at that point as follows:\n\t\tPress b to enter the notes only.\n\t\tPress B to enter the chords only.\n\t\tPress control-b to enter both notes and chords.\n\nCopying a selection from the staff to the text entry:\n\n\tThis is a good way to learn leadsheet notation.\n\tCreate a selection.\n\tPress j to copy the notes in the selection to the text entry.\n\tPress J to copy the chords in the selection to the text entry.\n\tPress control-j to copy the notes and chords in the selection to the text entry.\n\nTransposing an entire selection:\n\n\tUse d to transpose selected notes down 1/2 step.\n \tUse D to transpose selected chords down 1/2 step.\n\tUse control-d to transpose selected notes and chords down 1/2 step.\n\tUse g to transpose selected notes down an octave.\n\tUse s to transpose selected notes down harmonically about 1/2 step.\n\n\tUse e to transpose selected notes up 1/2 step.\n \tUse E to transpose selected chords up 1/2 step.\n\tUse control-e to transpose selected notes and chords up 1/2 step.\n\tUse t to transpose selected notes up an octave.\n\tUse w to transpose selected notes up harmonically about 1/2 step.\n\nPlaying a selection or the entire piece:\n\n\tWith the mouse in the staff window, press enter to play the selection (notes and chords).\n\tPress shift-enter to play from the selection to the end of the leadsheet.\n\tPress i to play the entire leadsheet.\n\tPress k to stop playback.\n \nSaving licks, cells, idioms, or quotes:\n\n\tSelect what you want to save.\n\tPress u. A dialog will open that allows you to select the type and name the item.\n\nMarking and unmarking licks, cells, idioms, or quotes:\n\n\tMarking allows you to find the marked item in the vocabulary file using a text editor.\n\tUse M to mark a lick, cell, idiom, or quote.\n\tUse m to unmark an already-marked item.\n\nOther composer functions:\n\n\tUse R to rectify (align to harmony) the notes in the selected  melody.\n\tUse / to reverse the notes in the selected  melody.\n\tUse \\ to invert the notes in the selected melody.\n\nLeadsheet file commands:\n\n\tUse control-o to open an existing leadsheet.\n\tUse control-s to save the current leadsheet under the same name.\n\tUse control-w to save the current leadsheet under a new name.\n\tUse control-r to revert the leadsheet to the last saved version. Changes since then are lost.\n\tUse control-n to open a new leadsheet. The current one stays in its own window.\n\nMiscellaneous:\n\tUse control-l to perform a one-time auto-layout adjustment of the measures per line.\n\tTo set a specific number of measures per line: shift click on the line, then select \"Over-ride ... \".\n\tControl-q quits improvisor.\n\n\n");
        helpByTopic.setViewportView(helpByTopicList);
        helpByTopicList.setEditable(false);

        helpTabbedPane.addTab("Topics", helpByTopic);

        alphaCommandPane.setMinimumSize(new java.awt.Dimension(500, 800));
        alphaCommandPane.setPreferredSize(new java.awt.Dimension(600, 900));

        alphaCommandList.setEditable(false);
        alphaCommandList.setColumns(20);
        alphaCommandList.setFont(new java.awt.Font("Lucida Console", 0, 13)); // NOI18N
        alphaCommandList.setRows(5);
        alphaCommandList.setText("Impro-Visor Key Bindings Alphabetically (^ means hold control key)\n\nNote: Key commands are case-sensitive.\n\nescape\tUnselect everything, also stop playback if playing.\n\nenter\t\tPlay selection.\nshift-Enter\tPlay from selection to end of sheet.\n\nspace\tToggle enharmonic notes in selection.\n\na\tMove selection backward to previous grid line.\n^a\tSelect all chords and melody.\n\n b\tEnter melody from text entry field.\n B\tEnter chords from text entry field.\n^b\tEnter melody and chords from text entry field.\n\n c\tCopy melody in selection to clipboard.\n C\tCopy chords in selection to clipboard.\n^c\tCopy melody and chords in selection to clipboard.\n \n d\tTranspose selected melody down 1/2 step.\n D\tTranspose selected chords down 1/2 step.\n^d\tTranspose selected melody and chords down 1/2 step.\n\n e\tTranspose selected melody up 1/2 step.\n E\tTranspose selected chords up 1/2 step.\n^e\tTranspose selected melody and chords up 1/2 step.\n\n f\tMove selection forward to next grid line.\n\n g\tTranspose selected melody down one octave.\n ^g\tOpen the Lick Generator Controls.\n\n i\tStart playback of entire sheet.\n^i\tOpen voicing editor.\n\n j\tCopy melody of selection to text window.\n J\tCopy chords of selection to text window.\n^j\tCopy chords and melody of selection to text window.\n\n k\tStop playback.\n^k\tOpen piano keyboard.\n\n^l\tPerform one-time auto-layout adjustment.\n\n M\tMark advice cell, idiom, lick, or quote.\n m\tUnmark advice cell, idiom, lick, or quote.\n\n^n\tStart a new leadsheet in addition to the current one.\n\n^o\tOpen another leadsheet in place of the current one.\n\n p\tOpen preferences dialog.\n^p\tPrint leadsheet.\n\n^q\tQuit Impro-Visor.\n\n r\tAdd  a rest at selected grid line.\n R\tRectify melody to the chordal harmony.\n^r\tRevert file to previous save.\n\ns\tTranspose down harmonically.\n^s\tSave leadsheet file.\n\n t\tTranspose selected melody up one octave.\n \n u\tSave selection in the vocabulary as a cell, lick, idiom, or quote.\n\n v\tPaste melody from clipboard.\n V\tPaste chords from clipboard.\n^v\tPaste melody and chords from clipboard.\n\nw\tTranspose up harmonically.\n^w\tWrite leadsheet file as a specified name.\n\n x\tCut melody in selection, saving to clipboard.\n X\tCut chords in selection, saving to clipboard.\n^x\tCut melody and chords in selection, saving to clipboard.\n\n y\tRedo undone command.\n\n z\tUndo previous command.\n\n /\tReverse melody in selection.\n \\\tInvert melody in selection.\n\n");
        alphaCommandPane.setViewportView(alphaCommandList);
        alphaCommandList.setEditable(false);

        helpTabbedPane.addTab("Keys", alphaCommandPane);

        melodyNotation.setToolTipText("Melody notation");
        melodyNotation.setMinimumSize(new java.awt.Dimension(500, 800));
        melodyNotation.setPreferredSize(new java.awt.Dimension(600, 900));

        melodyNotationHelp.setEditable(false);
        melodyNotationHelp.setColumns(20);
        melodyNotationHelp.setFont(new java.awt.Font("Lucida Console", 0, 13)); // NOI18N
        melodyNotationHelp.setRows(5);
        melodyNotationHelp.setText("Help for the Melody Part of Leadsheet Notation\n\nNote: Melody notation is case-sensitive.\n\nNotes must begin with a lower-case letter: a, b, c, d, e, f, g.\n\nA modifier # (sharp) or b (flat) may follow optionally.\n\nNotes are in the octave middle c and just above. \nTo specify a higher octave add a plus (+) for each octave. \nTo specify a lower octave add a minus (-) for each octave lower.\n\nThe duration of a note is specified by numbers:\n\n    1  = whole note\n    2  = half note\n    4  = quarter note\n    8  = eighth note\n    16 = sixteenth note\n    32 = thirty-second note\n\nFollowing a number by a dot (.) multiplies the value by 1.5. \n\nFollowing a number by /3 gives the value of a triplet (2/3 of the original value).\n\nDurations can be augmented by following a basic duration with a plus (+)\nthen the added duration.\n\nIf no duration is specified, an eighth note will be used.\n\nExamples:\n\n    a8    an 'a' above middle c, eighth note\n    eb8   an e-flat above middle c, eighth note\n    d+4   a 'd' in the second octave above middle c, quarter note\n    g-4/3 a 'g' in the octave below middle c, quarter-note triplet\n    c#4.  a c-sharp in the octave above middle c, dotted quarter note\n    f+2+8 an f in the second octave above middle c, half note plus an eighth\n\nTo see how any given note can be rendered in this notation, \nenter it in the GUI using point-and-click,\nthen use j to transfer it to the text entry field.\n\n");
        melodyNotation.setViewportView(melodyNotationHelp);
        melodyNotationHelp.setEditable(false);

        helpTabbedPane.addTab("Melody", melodyNotation);

        chordListingPane.setToolTipText("Listing of Available Chords");
        chordListingPane.setMinimumSize(new java.awt.Dimension(500, 800));
        chordListingPane.setPreferredSize(new java.awt.Dimension(600, 900));

        chordList.setEditable(false);
        chordList.setColumns(20);
        chordList.setFont(new java.awt.Font("Lucida Console", 0, 13)); // NOI18N
        chordList.setRows(5);
        chordList.setText("These are the chord definitions supplied in the current release. \nIf you add your own chord definitions, they will not appear here.\n\nNote: Chord notation is case-sensitive.\n\nWe use root C, but any root may be used. The acceptable roots are:\nA, B, C, D, E, F, G, each of which may be followed by # (sharp) or b (flat).\n\nSlash chords (with bass other than the root) are allowed, e.g. Cm7/D means\nCm7 over a D bass. (The bass note may or may not be in the chord already.)\n\nPolychords use back-slash, e.g. Ab\\C7 means an Ab triad over a C7 chord.\n\nMajor Chords\n\nC.............. same as CM\nCM............. C major (c e g)\nC2............. same as CMadd9\nC5............. C five (c g)\nC6............. same as CM6\nC69............ same as CM69\nC6#11.......... same as CM6#11\nC69#11......... same as CM69#11\nC6b5........... same as CM6#11\nCM13........... C major thirteen (c e g b d a)\nCM13#11........ C major thirteen sharp eleven (c e g b d f# a)\nCmaj13......... same as CM13\nCMaj13......... same as CM13\nCmaj13#11...... same as CM13#11\nCMaj13#11...... same as CM13#11\nCM6............ C major six (c e g a)\nCM6#11......... C major six sharp eleven (c e g a f#)\nCM6b5.......... same as CM6#11\nCM69#11........ C major six nine sharp eleven (c e g a d f#)\nCM69........... C major six nine (c e g a d)\nCM7#11......... C major seven sharp eleven (c e g b f#)\nCM7............ C major seven (c e g b)\nCmaj7.......... same as CM7\nCMaj7.......... same as CM7\nCmaj7#11....... same as CM7#11\nCMaj7#11....... same as CM7#11\nCM7add13....... C major seven add 13 (c e g a b d)\nCM7b5.......... C major seven flat five (c e gb b)\nCM7b6.......... C major seven flat six (c e g ab b)\nCM7b9.......... C major seven flat nine (c e g b db)\nCM9............ C major nine (c e g b d)\nCM9#11......... C major nine sharp eleven (c e g b d f#)\nCmaj9.......... same as CM9\nCMaj9.......... same as CM9\nCmaj9#11....... same as CM9#11\nCMaj9#11....... same as CM9#11\nCM9b5.......... C major nine flat five (c e gb b d)\nCMadd9......... C major add nine (c e g d)\nCMb5........... C major flat five (c e gb)\nCMb6........... C major flat six (c e ab)\nCadd2.......... same as CMadd9\nCadd9.......... same as CMadd9\nCadd9no3....... same as CMsus2\n\nMinor Chords\n\nCm#5........... C minor sharp five (c eb g#)\nCm+............ same as Cm#5\nCm............. C minor (c eb g)\nCm11#5......... C minor eleven sharp five (c eb ab bb d f)\nCm11........... C minor eleven (c eb g bb d f)\nCm11b5......... C minor eleven flat five (c eb bb gb d f)\nCm13........... C minor thirteen (c eb g bb d f a)\nCm6............ C minor six (c eb g a)\nCm69........... C minor six nine (c eb g a d)\nCm7#5.......... C minor seven sharp five (c eb ab bb)\nCm7............ C minor seven (c eb g bb)\nCm7b5.......... C minor seven flat five (c eb gb bb)\nCh............. same as Cm7b5 (h for \"half-diminished\")\nCm9#5.......... C minor nine sharp five (c eb ab bb d)\nCm9............ C minor nine (c eb g bb d)\nCm9b5.......... C minor nine flat five (c eb bb gb d)\nCmM7........... C minor major seven (c eb g b)\nCmM7b6......... C minor major seven flat six (c eb g ab b)\nCmM9........... C minor major nine (c eb g b d)\nCmadd9......... C minor add nine (c eb g d)\nCmb6........... C minor flat six (c eb ab)\nCmb6M7......... C minor flat six major 7 (c eb ab b)\nCmb6b9......... C minor flat six flat nine (c eb ab db)\n\nDiminished Chords\n\nCdim........... C diminished triad (c eb gb)\nCo............. same as Cdim\nCdim7.......... C diminished seventh (c eb gb a)\nCo7............ same as Cdim7\nCoM7........... C diminished major seventh (c eb gb b)\nCo7M7.......... C diminished seventh major seventh (c eb gb a b)\n\nAugmented Chords\n\nCM#5........... C major sharp five (c e g#)\nC+............. same as CM#5\nCaug........... same as CM#5\nC+7............ same as C7#5\nCM#5add9....... C major sharp five add 9 (c e g# d)\nCM7#5.......... C major seven sharp five (c e g# b)\nCM7+........... same as CM7#5\nCM9#5.......... C major nine sharp five (c e g# b d)\nC+add9......... same as CM#5add9\n\nDominant Chords\n\nC7............. C seven (c e g bb)\nC7#5........... C seven sharp five (c e g# bb)\nC7+............ same as C7#5\nCaug7.......... same as C7#5\nC7aug.......... same as C7#5\nC7#5#9......... C seven sharp five sharp nine (c e g# bb d#)\nC7alt.......... same as C7#5#9\nC7b13.......... C seven flat thirteen (c e g bb ab)\nC7b5#9......... same as C7#9#11\nC7b5........... C seven flat five (c e gb bb)\nC7b5b13........ same as C7#11b13\nC7b5b9......... same as C7b9#11\nC7b5b9b13...... same as C7b9#11b13\nC7b6........... C seven flat six (c e g ab bb)\nC7b9#11........ C seven flat nine sharp eleven (c e g bb db f#)\nC7b9#11b13..... C seven flat nine sharp eleven flat thirteen (c e g bb db f# ab)\nC7b9........... C seven flat nine (c e g bb db)\nC7b9b13#11..... C seven flat nine flat thirteen sharp eleven (c e g bb db f# ab)\nC7b9b13........ C seven flat nine flat thirteen (c e g bb db ab)\nC7no5.......... C seven no five (c e bb)\nC7#11.......... C seven sharp eleven (c e g bb f#)\nC7#11b13....... C seven sharp eleven flat thirteen (c e g bb f# ab)\nC7#5b9#11...... C seven sharp five flat nine sharp 11 (c e g# bb db f#)\nC7#5b9......... C seven sharp five flat nine (c e g# bb db)\nC7#9#11........ C seven sharp nine sharp eleven (c e g bb d# f#)\nC7#9#11b13..... C seven sharp nine sharp eleven flat thirteen (c e g bb d# f# ab)\nC7#9........... C seven sharp nine (c e g bb d#)\nC7#9b13........ C seven sharp nine flat thirteen (c e g bb d# ab)\n\nC9............. C nine (c e g bb d)\nC9#5........... C nine sharp five (c e g# bb d)\nC9+............ same as C9#5\nC9#11.......... C nine sharp eleven (c e g bb d f#)\nC9#11b13....... C nine sharp eleven flat thirteen (c e g bb d f# ab)\nC9#5#11........ C nine sharp five sharp eleven (c e g# bb d f#)\nC9b13.......... C nine flat thirteen (c e g bb d ab)\nC9b5........... C nine flat five (c e gb bb d)\nC9b5b13........ same as C9#11b13\nC9no5.......... C nine no five (c e bb d)\n\nC13#11......... C thirteen sharp eleven (c e g bb d f# a)\nC13#9#11....... C thirteen sharp nine sharp eleven (c e g bb d# f# a)\nC13#9.......... C thirteen sharp nine (c e g bb d# a)\nC13............ C thirteen (c e g bb d a)\nC13b5.......... C thirteen flat five (c e gb a bb)\nC13b9#11....... C thirteen flat nine sharp eleven (c e g bb db f# a)\nC13b9.......... C thirteen flat nine (c e g bb db a)\n\nSuspensions\n\nCMsus2......... C major sus two (c d g)\nCMsus4......... C major sus four (c f g)\nCsus2.......... same as CMsus2\nCsus24......... C sus two four (c d f g)\nCsus4.......... same as CMsus4\nCsus4add9...... same as Csus24\nCsusb9......... C sus flat nine (c db f g)\nC4............. C four (c f bb eb)\nCquartal....... same as C4\nC7b9b13sus4.... same as C7sus4b9b13\nC7b9sus........ same as C7susb9\nC7b9sus4....... same as C7sus4b9\nC7b9sus4....... same as C7susb9\nC7sus.......... same as C7sus4\nC7sus4......... C seven sus four (c f g bb)\nC7sus4b9....... C seven sus four flat nine (c f g bb db)\nC7sus4b9b13.... C seven sus four flat nine flat thirteen (c f g bb db ab)\nC7susb9........ C seven sus flat nine (c db f g bb)\nC9sus4......... C nine sus four (c f g bb d)\nC9sus.......... same as C9sus4\nC11............ C eleven (c e g bb d f)\nC13sus......... same as C13sus4\nC13sus4........ C thirteen sus four (c f g bb d a)\n\nMiscellaneous\n\nCBlues......... C Blues (c eb f gb g bb) (Use upper case to avoid confusion with Cb = C flat)\nCBass.......... C Bass (c) (Use upper case to avoid confusion with Cb = C flat)\n");
        chordListingPane.setViewportView(chordList);
        chordList.setEditable(false);

        helpTabbedPane.addTab("Chords", chordListingPane);

        SoloGenerator.setMinimumSize(new java.awt.Dimension(500, 800));
        SoloGenerator.setPreferredSize(new java.awt.Dimension(600, 900));

        soloGenInstructions.setEditable(false);
        soloGenInstructions.setColumns(20);
        soloGenInstructions.setFont(new java.awt.Font("Lucida Console", 0, 13)); // NOI18N
        soloGenInstructions.setRows(5);
        soloGenInstructions.setText("Help for the Theme Weaver \n\nThe Theme Weaver is a tool that can be used to generate themes \nand to generate solos from one or multiple themes, all based on the\ngrammar the user has chosen. In addition to generating themes, you \ncan also write your own and save them for later use. It takes in \nfour weighted values that determines whether a theme will be used, \nand if it used, if it will be transposed,inverted, or reversed. If \na theme is not used, the space in the solo will be filled with a \nmelody based on the chosen grammar. The user can experiment with \ndifferent values and themes to find what works best. The table acts \nas their workspace.\n\n\nHighlighting a Cell\n\nThere are two ways to highlight a cell: \n\t* Click once on the cell \nOr if you have just entered something into the cell: \n\t* Press \"Enter\"\n\nYou will know your cell is highlighted if it is blue.\n \n\nGenerating a Theme\n\n\t1. Type in an integer for the length of the theme, such as \"6\"\n\t   or \"7\" into a cell in the \"Length\" labeled column.\n\n\t2. Make sure after each length you type in, you press \"Enter\" or \n\t   click out of the cell. \n\n\t3. Click the button \"Generate Theme\".\n\nA theme in leadsheet notation should appear in the Theme cells to the right \nof the Length cells you chose. \n\nIf you have already generated several themes and you only want to change one \nof them, highlight the Length cell of the theme you want to change and then \nclock the button \"Generate Theme\" and only the theme for that highlighted \ncell should change. \n\n\nThemes Scroll Box \n\nTo the right of the table, there is a scroll box labeled \"Themes\". This is where\nyour saved themes will appear. If you want to use one of the themes in the scroll \nbox, make sure to click anywhere in the Solo Generator window, then click \nthe theme you desire in the scroll box. The theme will appear in the first empty \nrow in the table along with its corresponding name and theme length in the name \nand length cells to the left of it.\n\nIf you click a click a theme more than once so it will appear in the table multiple \ntimes, it will appear in the table labeled with a number representing what number\ncopy it is, such as \"Jingle Bells - 1,\" and will be added and saved to the Themes Scroll Box. \n\nIf you want to hear a theme in the scroll box to decide if you want to use it, \npress the \"Shift\" key and hold it down, then click the theme you want to hear. \n\nIf you want to delete a theme, select the theme you wish to be deleted, then \nclick the \"Delete Theme From File\" button. \n\n\nListening to a Theme in the Table \n\nIf you want to listen to a theme that it is in your table, press the \"Shift\" key \nand hold it down, then click any cell in the row of the theme you want to hear. \n\n\nGenerating a Solo\n\n \t* Make sure that for every theme in your table, the \"Use\", \"Transpose\", \n\t  \"Invert\", and \"Reverse\" cells are all filled in with weighted values \n\t  from 0 to 1, as well as the \"No-Theme Prob\" text field, representing \n\t  how much you want the theme to be used, transposed, inverted, reversed, \n\t  or not used at all. \n\n\t* Make sure after every value you type in, you press \"Enter\" \n\t  or click out of the cell to ensure the value has been entered. \n\n\t* Make sure the \"Theme Use Interval\" text field is filled in with an \n\t  integer that represents the length of the intervals that the solo\n          will be broken up into.\n        \n\t* Then click the button \"Generate Solo\". \n\nA solo should appear in your open leadsheet and should be played. \n\n\nGenerate Solo Scroll Box \n\nAfter you generate a solo, in the empty scroll box beneath the table, you will see the \nname of the theme used in the solo and whether it was transposed, inverted or reversed.\nIf the theme has no name, it will appear as \"Theme 1\" or \"Theme 2,\" etc.  If the name \nof the theme is not followed by a message of whether it was transposed, inverted, or \nreversed, that means it was used as is.\n\n\nNaming\n \nTo add a theme you have generated or typed in yourself to the dictionary\nof themes in the Themes scroll box to the right of the table, you have \nto name it! The first column of the table is the \"Name Column\" as shown \nby the label at the top. \n\n\t1. Double-click the name cell in the row of the theme you want\n\t   to save.\n\n\t2. Then type in the name of your choice and then either  \n\t\t*  press \"Enter\" or\n\t\t*  click out of the cell.\n\nThe name should appear in the Themes scroll box at the bottom.  \n\n\nUsing Leadsheet Selections as Themes\n\nIf there is a string of notes already in the leadsheet that you want to use -  \n\n\t1. Click where the section starts then drag over the section until\n\t   all the notes you want are highlighted.\n\n\t2. Click the button \"Use Current Selection in Leadsheet Window as Theme\".  \n\nThe theme should appear in the first empty row in the table with its corresponding \nlength in the length cell to the left of it.\n\n\nEditing\n\nIf you want, you can make your own edits to current themes in your table! \nOnce you press \"Enter\" or click out of the cell, the theme length integer in \nthe length cell will change accordingly. \n\n\nDeleting and Resetting\n\n\t* To delete a whole row, highlight any cell in the row you want to delete and press\n\t  the \"Delete\" button on your keyboard or click the \"Delete Selected Row\" button \n\t  below the table.\n\n\t* To clear the entire table and restore any rows you deleted, click the \"Reset\" button.\n\n\nPlaying\n\n\t* To stop playing a solo, click the \"Stop Playing\" button. Once you click it, you will \n\t  see the button change to saying \"Play Solo\"\n\n\t* To play the solo you have stopped click the \"Play Solo\" button. Once you click it, it\n          will switch back to saying \"Stop Playing\"\n\n");
        SoloGenerator.setViewportView(soloGenInstructions);
        lickGenSettings.setEditable(false);

        helpTabbedPane.addTab("Theme Weaver", SoloGenerator);

        styleHelpPane.setMinimumSize(new java.awt.Dimension(500, 800));
        styleHelpPane.setPreferredSize(new java.awt.Dimension(600, 900));

        styleHelpList1.setEditable(false);
        styleHelpList1.setColumns(20);
        styleHelpList1.setFont(new java.awt.Font("Lucida Console", 0, 13)); // NOI18N
        styleHelpList1.setRows(5);
        styleHelpList1.setText("Help for Style Notation\n\nStyles are responsible for Impro-Visor's playback accompaniment.  Styles \nare specified in the vocabulary file as a set of patterns for each instrument\nof the accompaniment.  There are also style parameters that determine how\nthe patterns are used.\n\nPatterns\n\nEach pattern is defined by a set of rules.  The rules are similar to\nleadsheet notation, except the pitch is replaced with a capital letter\nindicating the rule.  Each pattern also has a weight that determines how\noften that pattern is used in relation to other patterns of the same length.\n\nChord Patterns\n\nChord patterns determine only the rhythm of the chord accompaniment. (The \nvoicings to use are decided based on a voice-leading algorithm.)\n\nChord patterns use the following rules:\n\nX       Strike the chord\nR       A rest\n\nBass Patterns\n\nBass patterns determine both the rhythm of the bassline and the type of\nnotes that are chosen.\n\nBass patterns use the following rules, where d is a duration, such as\n4 for a quarter-note, 8 for an eighth-note, etc.\n\nBd      The bass note (either the root of the chord, or the note specified\n        as part of a slash chord)\n\nCd      A note from the current chord\n\nSd      A note from the first scale associated with the current chord\n\nAd      A tone that approaches the bass note of the next chord\n\nNd      The bass note of the next chord (if at the end of a pattern\n        it will tie over to the next pattern)\n\nRd      A rest of duration d\n\n=d      The same note as the previous note, ignoring rests.\n\n(X n d) A specific note from the first scale given for a chord in\n        the vocabulary. For example (X 5 4) will give a quarter-note\n        on the fifth-degree of the scale.\n\n(X bn d) or (X #n d)\n        A specific note from the first scale given for a chord in\n        the vocabulary, lowered or raised a half step using standard\n        flat/sharp notation.  For example (X b5 4) will give a\n        quarter-note on a half step below the fifth-degree of the scale.\n\nU/D notation\n        When inputting multiple notes into a bass pattern, placing\n        U or D between notes will guarantee a rise or drop from the\n        first note to the next.  For example, B4 U C4 D (X 2 4)\n        will give a bass note, followed by an ascending color tone,\n        followed by a descending second-degree note.       \n\n\nDrum Patterns\n\nDrum patterns are a bit more complicated in that for one pattern you must\nspecify a drum \"rule\" for each drum you want in the pattern.  Here is the\nformat for a drum rule specification:\n\n(drum DRUM-MIDI-NUMBER RULE RULE ...)\n\nDrum patterns use the following rules:\n\nX       Strike the drum\nR       A rest\n\nGeneral MIDI Drum Numbers:\n\n35      Acoustic Bass Drum      59      Ride Cymbal 2\n36      Bass Drum 1             60      Hi Bongo\n37      Side Stick              61      Low Bongo\n38      Acoustic Snare          62      Mute Hi Conga\n39      Hand Clap               63      Open Hi Conga\n40      Electric Snare          64      Low Conga\n41      Low Floor Tom           65      High Timbale\n42      Closed Hi-Hat           66      Low Timbale\n43      High Floor Tom          67      High Agogo\n44      Pedal Hi-Hat            68      Low Agogo\n45      Low Tom                 69      Cabasa\n46      Open Hi-Hat             70      Maracas\n47      Low-Mid Tom             71      Short Whistle\n48      Hi-Mid Tom              72      Long Whistle\n49      Crash Cymbal 1          73      Short Guiro\n50      High Tom                74      Long Guiro\n51      Ride Cymbal 1           75      Claves\n52      Chinese Cymbal          76      Hi Wood Block\n53      Ride Bell               77      Low Wood Block\n54      Tambourine              78      Mute Cuica\n55      Splash Cymbal           79      Open Cuica\n56      Cowbell                 80      Mute Triangle\n57      Crash Cymbal 2          81      Open Triangle\n58      Vibraslap\n\nStyle Parameters\n\nname            The name of the style\nswing           The swing value for the style\ncomp-swing\tThe swing value for the accompaniment parts of the style\nbass-high       The highest note in the bass's range\nbass-low        The lowest note in the bass's range\nbass-base       A note that specifies the starting area for the bassline\nchord-high      The highest note in the chord's range\nchord-low       The lowest note in the chord's range\nvoicing-type    Sets the voicing type to be used\n\nExample Style\n\n(style\n    (name swing)\n    (swing 0.67)\n    (comp-swing 0.67)\n    \n    (bass-high g-)\n    (bass-low g---)\n    (bass-base c--)\n    \n    (bass-pattern (rules B4 S4 C4 A4) (weight 10))\n    (bass-pattern (rules B4 C4 C4 A4) (weight 5))\n    (bass-pattern (rules B4 S4 C4 S4) (weight 3))\n    (bass-pattern (rules B4 S4 C4 A8 A8) (weight 3))\n    (bass-pattern (rules B4 S4 C4 S8 A8) (weight 3))\n    (bass-pattern (rules B4 C4) (weight 5))\n    (bass-pattern (rules B4 C8 A8) (weight 5))\n    (bass-pattern (rules B4 S4) (weight 3))\n    (bass-pattern (rules B4) (weight 5))\n    (bass-pattern (rules B4 A4) (weight 2))\n    \n    (drum-pattern\n        (drum 51 X4 X8 X8 X4 X8 X8)\n        (weight 10)\n        )\n    (drum-pattern\n        (drum 51 X4 X8 X8)\n        (weight 10)\n        )\n    (drum-pattern\n        (drum 51 X4)\n        (weight 10)\n        )\n        \n    (voicing-type closed)\n    (chord-high a)\n    (chord-low c-)\n    \n    (chord-pattern (rules X1) (weight 7))\n    (chord-pattern (rules X2) (weight 7))\n    (chord-pattern (rules X4) (weight 7))\n    (chord-pattern (rules X2+4 X4) (weight 5))\n    (chord-pattern (rules X4 R2+4) (weight 5))\n    (chord-pattern (rules X2 R2) (weight 7))\n    (chord-pattern (rules R4) (weight 1))\n    (chord-pattern (rules R8 X8+4 X4 R4) (weight 3))\n    (chord-pattern (rules R4 X8+4 X8 R4) (weight 5))\n    (chord-pattern (rules X8+2 X4 X8) (weight 2))\n    )\n\nStyle Tips\n\n   * The lengths of the patterns are important.  The software will attempt\n     to fill space with the largest pattern it can.  Try to correspond pattern\n     lengths to the probable chord durations.  If chords will mostly last for\n     4 beats, then have a 4 beat pattern.  If chords will last for 8 beats,\n     the software can fill that in with two 4 beat patterns.  Having a 1 beat\n     pattern for each accompaniment instrument is a good idea as a failsafe\n     for unconventional chord durations.\n\n   * Adding the parameter (no-style) to your style will cause the software\n     to leave out any bassline or drum part and play chords exactly where \n     they are specified on the leadsheet.\n\n   * Look to the styles included in the vocabulary file as a guide to\n     creating your own styles.\n\n   * Don't be afraid to experiment, but also don't be afraid to keep \n     things simple.\n");
        styleHelpPane.setViewportView(styleHelpList1);
        styleHelpList1.setEditable(false);

        helpTabbedPane.addTab("Style", styleHelpPane);

        drawingHelpPane.setMinimumSize(new java.awt.Dimension(500, 800));
        drawingHelpPane.setPreferredSize(new java.awt.Dimension(600, 900));

        drawingHelp.setEditable(false);
        drawingHelp.setColumns(20);
        drawingHelp.setFont(new java.awt.Font("Lucida Console", 0, 13)); // NOI18N
        drawingHelp.setRows(5);
        drawingHelp.setText("Help for Using the Draw (pencil) Tool\n\nThe Draw (pencil) tool allows you to input notes quickly by dragging the \nmouse continuously over the stave.  This makes it easy to sketch out \nthe 'melody contour' of your solo fluidly, without having to click at each\nindividual space.\n\nNote Fitting\n\nThe Draw tool does its best to fit notes along the curve you draw.  That is,\nit will add the pitch that roughly correponds to the stave note under\nthe cursor.  Since a melody contour defines the shape of the pitches\nin the music - but not necessarily specific pitches - the Draw tool allows\nyou to ignore harmonic rules when sketching out this shape; it will match\npitches to the nearest harmonious ones, for the current chord.  When\nno chord (\"NC\") is in effect, the Draw tool fits notes using the major\nscale of the score's key.\n\nNote Duration\n\nThe duration of notes on the drawn contour is determined by the note-\nspacing you can set below each measure.  If you want a triplet, for \nexample, in a particular measure, you can simply set the rhythm there\n(by dragging out the note spacing) and draw over that measure.  Notes\nwill automatically be fitted along the curve you draw, to that rhythm.\n\nDrawing Tips\n\n   * You can extend a note while drawing by holding the Shift key.  This\n     will 'flatline' the melody contour and increase the duration of the\n     current note being drawn. \n\n   * To add rest while drawing, you can hold the Control key.  Drawing\n     over the stave with Control down will insert rest there.  You may\n     also press 'R' while a given note is selected to insert rest there.\n\n   * When drawing over chord changes, you may want to force a tone\n     that 'approaches' the change before a given chord.  By holding\n     Shift-A, the Draw tool will always add an approach tone before a\n     chord change, and then resolve to the nearest chord tone.\n\n   * If you draw too quickly, the tool might \"miss\" a note, and not fit\n     it to the curve right away.  Don't panic!  Any notes that aren't fitted\n     properly will conform to the curve once you release the mouse button.\n\n   * Post-edit!  If you want to change a note or two, edit them after you\n     finish sketching.  Adjusting the pitch is easy; just drag up and down\n     on a note.  Using the keyboard controls, it's also easy to add rest\n     or extend notes afterwards.\n\n   * Want to hear the notes as they're being drawn?  Unmute the entry\n     sounds on the mixer, and Impro-Visor will remember your \n     preference during this session.  If you always want to hear them\n     by default, you may toggle the default settings under \n     \"Preferences -> Contour Drawing\".\n\n   * Maybe you only want the Draw tool to add chord tones or color\n     tones, rather than all scale tones.  Impro-Visor allows you to \n     set the Draw tool pitches under \"Preferences -> Contour Drawing\".\n");
        drawingHelpPane.setViewportView(drawingHelp);
        drawingHelp.setEditable(false);

        helpTabbedPane.addTab("Drawing", drawingHelpPane);

        roadmapHelpPane.setMinimumSize(new java.awt.Dimension(500, 800));
        roadmapHelpPane.setPreferredSize(new java.awt.Dimension(600, 900));

        roadmapHelp.setEditable(false);
        roadmapHelp.setColumns(20);
        roadmapHelp.setFont(new java.awt.Font("Lucida Console", 0, 13)); // NOI18N
        roadmapHelp.setRows(5);
        roadmapHelp.setText("Help for Using the Roadmap Mode\n\nUsing Roadmaps\n\nRoadmaps allow for viewing and manipulation of a leadsheet from a larger\nperspective, focused on the chord progressions that make up a given song.\nUsing a roadmap makes it fast and easy to move and transpose whole chords\nand chord sequences, and to visualize the structure of a song in terms of\n\"bricks\", or common chord sequences used to construct jazz tunes.\n\nOpening a Roadmap\n\nWhen you wish to open a road map, you have a choice of how it will open:\n\n   * if you only want an empty roadmap, you can type Ctrl-';' to open a\n     roadmap describing a blank leadsheet.\n\n   * if you want a roadmap containing the chords of the song you have\n     open, press ';' and a roadmap will open with all the chords from \n     the currently active leadsheet. \n\n   * if you want a roadmap with your current song, but converted into\n     bricks, press Shift-';' and a roadmap will generate containing the\n     chords of the current leadsheet grouped together as chord bricks.\n\nAll of these options are also available by opening the Roadmap menu on a \nleadsheet.\n\nIf you want a roadmap to open whenever you open a leadsheet, you can go to\nthe Roadmap menu and click \"Generate roadmap on Opening Leadsheet\" to enable the\nsetting. When this option is checked, any time a leadsheet is opened a \ncorresponding roadmap will open with the chords grouped into bricks.\n\nWhen a roadmap is open, you can use the File -> Open Leadsheet option to\nselect a different leadsheet to roadmap. Alternately, if you want to navigate\nthrough a series of files in one directory, you can use the arrows just below\nthe File menu to step back and forth between roadmaps based on alphabetical \nordering of the leadsheet file names.\n\nIf you have modified a roadmap and wish to convert it back into an appropriate\nleadsheet, you can use the Leadsheet menu to either put the selected chords \n(or all the chords if none are selected) into a new leadsheet or append them to\nthe current leadsheet.\n\n \nReading a Roadmap\n\nIn the primary pane of a roadmap window, you can see a graphical representation \nof the chords from an opened leadsheet (or no chords at all). The chords will\nbe displayed as a list of \"blocks\": either individual chords or chords grouped\ntogether into \"bricks\".\n\nThere are three levels to a road map: the key level, the block level, and the \nchord level. At the top level is a color-coded key map, which shows the general\nkey at a certain point in a tune. The coloration is based upon position around\nthe circle of fifths; the nearer two colors are in the spectrum, the closer they\nare in the circle of fifths. If the key is minor or dominant rather than major,\nit takes the color of its relative major counterpart. If you don't like the \ncoloration, you can always go to File -> Roadmap Information and uncheck \"Key\nColoration\".\n\nNext, at the block level, one can see the names of any bricks present. An \nunanalyzed piece will have no names here, as everything will be broken into\nchords. When analyzed, the names of bricks grouping these chords together \nwill appear in the middle bar if any such grouping exists. If a brick overlaps\nanother brick, a \"+ ...\" will appear. If insufficient space exists to display\nthe brick's full name, you'll just see a \"...\". To see the full name, mouse \nover the brick.\n\nFinally, the chords themselves are shown at the bottom level with their durations.\nThese can be any chords accepted by Impro-Visor itself, and will usually be pulled\nfrom the leadsheet open in Impro-Visor's main window.\n\nSometimes, below the end of a brick, a yellow box with a word will appear. This\ndescribes the kind of \"join\" that exists between two blocks. Joins are named \nbased upon the interval between the key of two blocks:a Homer joins two bricks \nin the same key, a Cherokee joins two bricks with the second a half-step up from\nthe first, , a Woody joins two bricks a whole step apart, etc. The list of all \njoins in order based on number of half-steps up the second key is from the\nfirst key is: \n         0: Homer (same key)           6:  Stella (tritone)\n         1: Cherokee (half step up)    7:  Backslider (fourth down)\n         2: Woody (whole step up)      8:  Half Nelson (major third down)\n         3: Highjump (minor third up)  9:  Sidewinder (minor third down)\n         4: Bauble (major third up)    10: New Horizon (whole step down)\n         5: Bootstrap (fourth up)      11: Downwinder (half step down)\n\nThese joins will only appear between a brick ending in a stable chord and a \nbrick beginning in an unstable chord, so don't be surprised if there are\nnot joins between all bricks.\n\nEnds of blocks will sometimes have a doubled line. This indicates that the\nblock is the end of a section (two thick lines) or a phrase (a thin line and a\nthick line). Sections and phrases are notated in a leadsheet file with the \nparenthetical expressions \n  (section (style = [style name]))\nand\n  (phrase)\nrespectively. These help both to display the roadmap in a way that keeps\nsections distinct and to keep analysis from making bricks that overlap two\nsections or phrases.\n\nIf you wish to change the width of the contents of the roadmap, you can use\nthe Feature Width slider on the top toolbar to make the contents more easily\nviewable. If brick names are difficult to view due to the feature width, you\ncan mouse over difficult-to-view bricks and the full name will show.\n\n\nBrick Dictionary\n\nThe Brick Dictionary contains a list of possible bricks for you to use in\na given piece. This also is the list of possible bricks that could appear in\nthe analyzed version of a piece. Each brick has a type which describes the\npurpose that brick serves in a given piece: sometimes, a \"Cadence\", for \ninstance, starts from an unresolved chord and progresses to a resolution.\n\nYou can select a brick in the dictionary by navigating through the tree, first\nlooking for the type, then the brick name. Sometimes, a brick will have several\nvariants; in this case, you can either select the folder with that name to get\nthe default, or you can open the folder to view one of the brick variants.\n\nWhen a brick is selected, it displays in the Brick Preview pane as it would if\nit were inserted into the roadmap. From there, one can use the drop-down menus\nbelow the dictionary to select the key of a given brick or the relative duration\nof the brick. When one is satisfied with the appearance of a given brick, one \ncan drag it from the brick preview pane to the desired location in the current \nroadmap to insert it.\n\nIf you don't want to see a brick in the library or on the roadmap, you can \nselect the brick in the tree and then press the \"Delete Selected Library Brick\"\nbutton. This will take the brick out of the visible library. Careful when you\ndelete a brick, though: if you want to restore it in the dictionary, you will\nneed to open the BrickDictionary.txt file in the \"vocab\" folder of the \nImpro-Visor application, find the definition, and change the word \"Invisible\"\nback to the correct brick type.\n\n\nManipulating the Roadmap\n\nIn order to change either parts or the entirety of the roadmap, you have to \nselect the parts of the roadmap you wish to change. You can select these parts\nby clicking on them. To select a single block, click on it. To select multiple,\nclick on the starting block, then hold Shift and click on the ending block. All\nthe blocks from the first to the second will be selected. If you wish to select\nthe entire leadsheet, type \"A\" or click \"Select All\" in the Edit menu..\n\nWhen you have a selection, you can perform several transformations on the \nselected block(s):\n\n   * To transpose the key up a semitone, press \"E\"; to transpose it down a \n     semitone, press \"D\".\n\n   * You can change the duration of a given selection by selecting the \"Scale\n     Duration\" menu in the top toolbar. It will scale the selection to the \n     given fraction or multiple of the current duration.\n\n   * You can cut or copy a set of chords by pressing \"X\" or \"C\", respectively.\n     These can then be pasted before a selection (or at the end of the chord\n     sequence if there is no selection) by typing \"V\" later. These operations \n     are also all available in the Edit menu.\n\n   * To delete the selection, press the Delete/Backspace key. You can also\n     delete selections from the Edit menu.\n\n   * You can undo a modification by pressing \"Z\". If you wish to redo the \n     operation, pressing \"Y\" will return the roadmap to the state before the\n     undo. These operations are also available in the Edit menu.\n\n   * You can modify a particular chord by clicking on the chord name itself\n     within a selection. If you double-click the chord, you can change its name\n     and duration. Only valid chord names will be accepted. Changing a chord in\n     a brick will break the brick up.\n\n   * To \"break\" a selection into the blocks that make it up, click on the \n     \"Break\" button in the top toolbar, or select \"Break Selection\" in the \n    Edit menu. \n\n   * To \"flatten\" a selection into the chords that make it up, click on the\n     \"Flatten button in the top toolbar, or select \"Flatten Selection\" in the\n     Edit menu.\n\n   * To add a selection as a new brick in the Brick Library, click the \"New\n     Brick\" button in the top toolbar. This will open a dialog window where you\n     can name the brick and select its key, type, and mode.\n\n   * One of the most useful tools in the roadmap is the Analyze button, which \n     will take the whole piece or a selection and split it into the best \n     combination of bricks it can find. Generally, this will take a few seconds,\n     so be patient. If you aren't happy with the resulting bricks, try taking \n     selections from what you want to analyze and analyzing them individually,\n     or redefining where section divisions are in the roadmap.\n\n   * To change whether or not a given selection ends a section, you can type\n     Return or click \"Toggle Section\" in the Section menu. Alternatively, if you\n     wish for the selection to be the end of a phrase, you can type Shift+Return\n     or click \"Toggle Phrase\" in the Section menu. A brick can end either a \n     section or a phrase, but not both.\n\nAdditionally, the Roadmap supports playback of a given selection. If you press\nthe \"play\" button (the triangle on the top toolbar), a MIDI matching the chords\nfor a given section and the style on the leadsheet will play. Hitting the \"stop\"\nbutton (the square on the top toolbar) will stop playback, and one can toggle\nwhether the playback will loop or not by clicking the \"Loop\" button on the top\ntoolbar. If nothing is selected, playback will default to the whole of the tune.\n\n\n");
        roadmapHelpPane.setViewportView(roadmapHelp);
        roadmapHelp.setEditable(false);

        helpTabbedPane.addTab("Roadmap", roadmapHelpPane);

        lickGenSettingsPane.setMinimumSize(new java.awt.Dimension(500, 800));
        lickGenSettingsPane.setPreferredSize(new java.awt.Dimension(600, 900));

        lickGenSettings.setEditable(false);
        lickGenSettings.setColumns(20);
        lickGenSettings.setFont(new java.awt.Font("Lucida Console", 0, 13)); // NOI18N
        lickGenSettings.setRows(5);
        lickGenSettings.setText("Help for the Lick Generator\n\nThe lick generator and triage tool is a powerful and customizable\nutility that will create original licks over a given series of chord\nchanges.\n\nThe lick generator creates things in two steps; first, it generates\na rhythm using a context-free grammar.  Then, it fills in this\nrhythm probabilistically.  This allows for a large variety of \ndifferent melodys.  The grammar is specified in the text field under\n\"Grammar File.\"  This file is customizable and uses the following\nformat for terminal values:\n\n<Note type><Value>\n\nNote type can be one of\n     * X - any note\n     * R - a rest\n     * C - a chord tone (as specified in the vocabulary file)\n     * L - a color tone (as specified in the vocabulary file)\n     * S - a scale tone (as specified by the user.  If \"None\" is chosen, \n\tthis is ignored.  If use first scale is chosen, it looks\n\tat the first scale in the vocabulary file associated \n\twith the given chord.  If there is no such scale, this\n\tis ignored).\n     * A - an approach tone (forces the following note to be a\n \tchord tone, and approaches from a half step\n\tabove or below).\n\nValue can be from 1 (4 beats) to 16/3 (sixteenth note triplets).  \nLonger note values are not currently supported in the grammar.\n\nFor a more detailed explanation of how to modify the grammar\nfile, please see the \"Lick Generator\" tutorial.\n\nA few notes on parameter setting in grammars:\nThe expectancy for the generated line is calculated as \n(expectancy-multiplier)(expectancy value of previous line) + \n(normalized expectancy-constant (where 1 is the highest value)). \nA higher expectancy value means more highly expected notes will show up \nin the generated line.\nWhile this gives many options for expectancies, most users will not find\na use for expectancy-multiplier that is not 1 or 0 (i.e. follows the user or\nuses a constant expectancy value).\nExpectancy-constant can range from 0 to 1 but a pretty normal value for\nthis is around a 0.6 to 0.7\n\nThe syncopation-multiplier and syncopation-constant work in exactly \nthe same way but a typical value for syncopation-constant is around 0.15\n\nIf you do not wish to use the context-free grammar to generate a\nrhythm, deselect the \"Use Grammar\" button.  This tends to create\nless listenable fragments, however.\n\nBy default, the lick generator will tend to avoid repeating the same\nnote multiple times in a row.  If you would like to turn this off,\ndeselect the \"Avoid Repeat Pitch\" button.\n\n\"Generate\" creates a rhythm and fills it in using the probabilities.\n\n\"Generate Rhythm\" only creates a rhythm.\n\n\"Fill Melody\" generates a melody for a given rhythm (the rhythm\nis specified in the large text box; note that you can manually enter\nlonger note values here using leadsheet notation, as in X2+4 for\na three beat note)\n\n\"Get Selected Rhythm\" will read the rhythmic pattern of whatever\nis currently selected.\n\n\"Replay\" replays the current selection.\n\n\"Help\" displays this dialog.\n\n\"Reload\" will re-parse the grammar file.\n\n\"Save Lick\" saves the lick into the vocabulary.\n\nThe lick generator will automatically determine note probabilities \nfor all chords in the from the current selection start up to the\ntotal number of beats specified.  If you would like to disable this\nfeature, deselect the \"Auto-fill probabilities\" check box.  The\n\"Fill\" button will reset them to their defaults, and the \"Clear\" button\nsets them all to zero.\n\nOther options:\n     * Min/Max Pitch: Do not use pitches higher or lower than these\n\tvalues.\n\n     * Min/Max Interval: Do not jump higher or lower than this interval\n\tunless a jump probability is set.\n\n     * Min/Max Duration (only used if the grammar is disabled): Do\n\tnot generate notes with rhythmic values longer or\n\tshorter than these; note that these are inverse, so\n\t32 indicates a 32nd note and 1 indicates a whole note.\n\n     * Beats: The length of the lick to generate in beats.  This value is \n\tbased off of the current selection.\n\n     * Rest Probability (only used if the grammar is disabled): The\n\tprobability of a given note being a rest.\n\n     * Leap Probability: The probability of jumping outside the\n\tmaximum interval (see above).");
        lickGenSettingsPane.setViewportView(lickGenSettings);
        lickGenSettings.setEditable(false);

        helpTabbedPane.addTab("Lick Generator", lickGenSettingsPane);

        audioInputPane.setMinimumSize(new java.awt.Dimension(500, 800));
        audioInputPane.setPreferredSize(new java.awt.Dimension(600, 900));

        audioInputPaneText.setEditable(false);
        audioInputPaneText.setColumns(20);
        audioInputPaneText.setFont(new java.awt.Font("Lucida Console", 0, 13)); // NOI18N
        audioInputPaneText.setRows(5);
        audioInputPaneText.setText("Help for Audio Input\n\nWINDOWS\n1. Download SuperCollider. Here is the link:\nhttp://supercollider.sourceforge.net/downloads/\n\n2. Download the plugins for SuperCollider. Here is the link:\nhttp://sourceforge.net/projects/sc3-plugins/files/\n\nSave the download. The downloaded folder will be called 'SC3plugins.'\nOpen a Windows Explorer window. Navigate to Users->YOUR_USER_NAME_HERE\n->AppData->Local->SuperCollider\n\n(\nIf you have trouble finding AppData, it is probably a hidden folder. \nYou can visit:\nhttp://www.bleepingcomputer.com/tutorials/how-to-see-hidden-files-in-windows/\nAccording to your version of Windows, change your settings so you can \nsee your hidden folders. Alternatively, click on the address bar at the top of your explorer and type:\nC:\\Users\\YOUR_USER_NAME_HERE\\AppData\\Local\\SuperCollider\n)\n\n- Check to see if there is a folder called 'Extensions' inside SuperCollider. \nIf not, create a new folder called 'Extensions.' Open the folder.\n\n-Drag the downloaded SC3plugins folder to this window. Double-click on \nSC3plugins. If you would like to save some space, for Impro-Visor purposes \nyou only need the folder called 'PitchDetection,' and the file called \nPitchDetection.scx, so you can delete everything else, if you wish. You may \nexit Explorer window. Your plugins are now ready.\n\n3. In the same folder containing these instructions, there is a file called \n'SCPitchDetection.sc.' Open SuperCollider if you have not already. Inside \nSuperCollider, open SCPitchDetection.sc. When ready to run it, highlight \neverything and press enter.\n\n4. Download 'LoopBe1' (NOT LoopBe30) here: \nhttp://www.nerds.de/en/download.html \n(minimal effort - don't worry) and make sure it's running and not on mute.\n\n***Post-Install Use***\n\n5. Plug in your microphone and make sure it is set as your sound-in source.\nMake sure the sound sensitivity is at a satisfactory level.\n\n6. Restart Impro-Visor if it is already running. If not, run Impro-Visor.\nIn Impro-Visor, go to MIDI setup and select 'LoopBe Internal MIDI', and then \ngo to the Audio Input tab in MIDI setup and make sure 'Use SuperCollider' \nis checked.\n\n7. Open the 'SCPitchDetection.sc' file in SuperCollider if it is not already \nopen. Highlight everything (as described above) and press control+enter. \nAnother window will appear to let you select note ranges (in MIDI notes) and \nattack delay . SuperCollider is now ready (may take a few seconds), so you may \nstart audio capture. You are now ready to start recording (press red circle \nbutton in Impro-Visor).\n\n\n\n\n\nOSX\n1. Download SuperCollider. Place it into your Applications folder as normal.\nHere is the link:\nhttp://supercollider.sourceforge.net/downloads/\n\n1.5. Run SuperCollider to make sure you have permissions to open it. If you\nhave trouble, hold down the control key and click the icon. Click 'Open' \nfrom the resulting menu.\n \n2. Download the plugins for SuperCollider. Here is the link:\nhttp://sourceforge.net/projects/sc3-plugins/files/\n\nThe downloaded folder will be called 'SC3plugins.'\n- First, navigate to /Library/Application Support/SuperCollider/ and create \na folder called Extensions if it doesn't already exist. If you are having \ntrouble finding the folder, do the following:\n\n\tFrom the Finder bar, click Go->Go to Folder\n\tType ~/Library/\n\tClick Application Support, and then click SuperCollider\n\n- Check to see if there is a folder called 'Extensions' inside SuperCollider. \nIf not, create a new folder called 'Extensions.' Open the folder.\n\n-Drag the downloaded SC3plugins folder to this window. Double-click on \nSC3plugins. If you would like to save some space, for Impro-Visor purposes \nyou only need the folder called 'PitchDetection,' so you can delete the other \nfolders, if you wish. You may exit the Finder window. Your plugins are now \nready.\n\n3. Inside your Impro-Visor folder, inside the folder 'sc' is a file called \n'SCPitchDetection.sc.' Open SuperCollider if you have not already. Inside \nSuperCollider, open SCPitchDetection.sc. When ready to run it, highlight \neverything and press enter.\n\n4.Navigate through Go->Utilities->Audio MIDI Setup ->Window->Show MIDI \nWindow->IAC Driver and make sure the box next to 'Device Is Online' is checked. \nMake sure that 'IAC Bus 1' is selected under 'Ports'. If it only says 'Bus 1,' \nclick the minus sign once and the plus sign once. It should now say 'IAC Bus 1.'\n\n***Post-Install Use***\n\n5. Plug in your microphone and make sure it is set as your sound-in source.\nMake sure the sound sensitivity is at a satisfactory level.\n \n6. Restart Impro-Visor if it is already running. If not, run Impro-Visor.\nIn Impro-Visor, go to MIDI setup and select 'IAC Bus 1', and then go to the \nAudio Input tab in MIDI setup and make sure 'Use SuperCollider' is checked.\n \n7. Open the 'SCPitchDetection.sc' file in SuperCollider if it is not already \nopen. Highlight everything (as described above) and press command+enter. \nAnother window will appear to let you select note ranges (in MIDI notes) and \nattack delay. SuperCollider is now ready (may take a few seconds), so you may \nstart audio capture. You are now ready to start recording (press red circle \nbutton in Impro-Visor).\n\n\nLINUX\nCurrently under construction. You are able to input audio, but you can't hear\nthe background music or the notes you're inputting. Instructions for what\ncurrently works can be found inside your Impro-Visor folder, inside the folder\n'sc.'");
        audioInputPane.setViewportView(audioInputPaneText);
        lickGenSettings.setEditable(false);

        helpTabbedPane.addTab("Audio Input", audioInputPane);

        functionDocumentationTextArea.setEditable(false);
        functionDocumentationTextArea.setColumns(20);
        functionDocumentationTextArea.setRows(5);
        functionDocumentationTextArea.setTabSize(4);
        functionDocumentationTextArea.setText("Transformation Functions\n\nBoolean Functions (return True or False):\n\t\nAND\t\t(and arg1 arg2 ... argN):\n\t\targuments must evaluate to True or False\n\n\t\t\tif every argument evaluates to True,\n\t\t\t\treturns True\n\t\t\telse\n\t\t\t\treturns False\n\nOR\t\t(or arg1 arg2 ... argN):\n\t\targuments must evaluate to True or False\n\n\t\t\tif any argument evaluates to True,\n\t\t\t\treturns True\n\t\t\telse\n\t\t\t\treturns False\n\nNOT\t\t(not arg1)\n\t\targument must evaluate to True or False\n\n\t\t\tif arg1 evaluates to False,\n\t\t\t\treturn True\n\t\t\telse\n\t\t\t\treturn False\n\nEQUALS\t\t(= arg1 arg2)\n\t\targuments can evaluate to any object, uses Impro-Visor lingo\n\n\t\t\tif arg1 is the same as arg2\n\t\t\t\treturn True\n\t\t\telse \n\t\t\t\treturn False\n\nCHORD=\t(chord= arg1 arg2)\n\t\targuments must both evaluate to notes\n\n\t\t\tif the chord over arg1 is the same chord that is over\n\t\t\targ2,\n\t\t\t\treturn true\n\t\t\telse\n\t\t\t\treturn false\n\nMEMBER\t(member arg1 arg2)\n\t\targ1 can evaluate to any object, but arg2 must evaluate\n\t\tto a list of object (e.g. (1 2 3) or (major dominant))\n\t\t\n\t\t\tif evaulated arg1 is equal to an element in the\n\t\t\tevaluated list elements in arg2,\n\t\t\t\treturn True\n\t\t\telse\n\t\t\t\treturn False\n\nPITCH>\t(pitch> arg1 arg2)\n\t\targuments must evaluate to either notes or relative pitch\n\t\tstrings\n\n\t\t\tif either arg1 or arg2 is a relative pitch string,\n\t\t\t\tif arg1's relative pitch is higher than\n\t\t\t\targ2's relative pitch,\n\t\t\t\t\treturn True\n\t\t\t\telse\n\t\t\t\t\treturn False\n\t\t\telse\n\t\t\t\tif arg1 has a higher absolute pitch than arg2,\n\t\t\t\t\treturn True\n\t\t\t\telse\n\t\t\t\t\treturn False\n\nPITCH>=\t(pitch>= arg1 arg2)\n\t\targuments must evaluate to either notes or relative pitch\n\t\tstrings\n\n\t\t\tif either arg1 or arg2 is a relative pitch string,\n\t\t\t\tif arg1's relative pitch is higher than\n\t\t\t\tor equal to arg2's relative pitch,\n\t\t\t\t\treturn True\n\t\t\t\telse\n\t\t\t\t\treturn False\n\t\t\telse\n\t\t\t\tif arg1 has a higher or equal absolute pitch \n\t\t\t\tthan arg2,\n\t\t\t\t\treturn True\n\t\t\t\telse\n\t\t\t\t\treturn False\n\n\nPITCH<\t(pitch< arg1 arg2)\n\t\targuments must evaluate to either notes or relative pitch\n\t\tstrings\n\n\t\t\tif either arg1 or arg2 is a relative pitch string,\n\t\t\t\tif arg1's relative pitch is less than\n\t\t\t\targ2's relative pitch,\n\t\t\t\t\treturn True\n\t\t\t\telse\n\t\t\t\t\treturn False\n\t\t\telse\n\t\t\t\tif arg1 has a lower absolute pitch than arg2,\n\t\t\t\t\treturn True\n\t\t\t\telse\n\t\t\t\t\treturn False\n\n\nPITCH<=\t(pitch<= arg1 arg2)\n\t\targuments must evaluate to either notes or relative pitch\n\t\tstrings\n\n\t\t\tif either arg1 or arg2 is a relative pitch string,\n\t\t\t\tif arg1's relative pitch is less than or equal to\n\t\t\t\targ2's relative pitch,\n\t\t\t\t\treturn True\n\t\t\t\telse\n\t\t\t\t\treturn False\n\t\t\telse\n\t\t\t\tif arg1 has a lower or equal absolute pitch than arg2,\n\t\t\t\t\treturn True\n\t\t\t\telse\n\t\t\t\t\treturn False\n\nDURATION=\t(duration= arg1 arg2)\n\t\targuments must evaluate to either notes or durations\n\n\t\t\tif the duration of arg1 is equal to the druation of arg2,\n\t\t\t\treturn True\n\t\t\telse\n\t\t\t\treturn False\n\nDURATION>\t(duration> arg1 arg2)\n\t\targuments must evaluate to either notes or durations\n\n\t\t\tif the duration of arg1 is greater than the duration of arg2,\n\t\t\t\treturn True\n\t\t\telse\n\t\t\t\treturn False\n\nDURATION>=\t(duration>= arg1 arg2)\n\t\targuments must evaluate to either notes or durations\n\n\t\t\tif the duration of arg1 is greater than or equal to the \n\t\t\tduration of arg2,\n\t\t\t\treturn True\n\t\t\telse\n\t\t\t\treturn False\n\n\nDURATION<\t(duration< arg1 arg2)\n\t\targuments must evaluate to either notes or durations\n\n\t\t\tif the duration of arg1 is less than the duration of arg2,\n\t\t\t\treturn True\n\t\t\telse\n\t\t\t\treturn False\n\n\nDURATION<=\t(duration<= arg1 arg2)\n\t\targuments must evaluate to either notes or durations\n\n\t\t\tif the duration of arg1 is less than or equal to the \n\t\t\tduration of arg2,\n\t\t\t\treturn True\n\t\t\telse\n\t\t\t\treturn False\n\n>\t\t(> arg1 arg2)\n\t\targuments must evaluate to numbers\n\n\t\t\tif evaluated arg1 is greater than evaluated arg2\n\t\t\t\treturn True\n\t\t\telse\n\t\t\t\treturn False\n\n>=\t\t(>= arg1 arg2)\n\t\targuments must evaluate to numbers\n\n\t\t\tif evaluated arg1 is greater than or equal to evaluated arg2\n\t\t\t\treturn True\n\t\t\telse\n\t\t\t\treturn False\n\n<\t\t(< arg1 arg2)\n\t\targuments must evaluate to numbers\n\n\t\t\tif evaluated arg1 is less than evaluated arg2\n\t\t\t\treturn True\n\t\t\telse\n\t\t\t\treturn False\n\n<=\t\t(<= arg1 arg2)\n\t\targuments must evaluate to numbers\n\n\t\t\tif evaluated arg1 is less than or equal to evaluated arg2\n\t\t\t\treturn True\n\t\t\telse\n\t\t\t\treturn False\n\nTRIPLET?\t(triplet? arg1)\n\t\targ1 can either evaluate to a duration or to a note\n\t\n\t\t\tif arg1 is a duration that is a triplet or arg1 is a note\n\t\t\tthat is a triplet,\n\t\t\t\treturn True\n\t\t\telse\n\t\t\t\treturn False\n\nQUINTUPLET?\t(quintuplet? arg1)\n\t\targ1 can either evaluate to a duration or to a note\n\t\n\t\t\tif arg1 is a duration that is a quintuplet or arg1 is a note\n\t\t\tthat is a quintuplet,\n\t\t\t\treturn True\n\t\t\telse\n\t\t\t\treturn False\n\nREST?\t\t(rest? arg1)\n\t\targ1 must evaluate to a note\n\t\t\t\n\t\t\tif arg1 is a rest,\n\t\t\t\treturn True\n\t\t\telse\n\t\t\t\treturn False\n\nNote returning Functions\n\nNote returning Functions can be applied to an arbitrary number of notes, which just\napplies each function to every note, making writing these function more simple. \n\nSCALE_DURATION\t\t(scale-duration value arg1 ... argN)\n\t\t\t\tvalue must evaluate to a number or fraction and every arg must be\n\t\t\t\ta note\n\n\t\t\t\t\treturn every arg with their duration multiplied by value\n\nNOTE_DURATION+\t\t(add-duration value arg1 ... argN)\n\t\t\t\tvalue must evaluate to a duration that Impro-Visor can read \n\t\t\t\t(e.g. 4, 8, 2., 1+4) and every arg must evaluate to a note\n\n\t\t\t\t\treturn every arg with value added to their duration\n\nNOTE_DURATION-\t\t(subtract-duration value arg1 ... argN)\n\t\t\t\tvalue must evaluate to a duration that Impro-Visor can read \n\t\t\t\t(e.g. 4, 8, 2., 1+4) and every arg must evaluate to a note\n\n\t\t\t\t\treturn every arg with value subtracted from their duration\n\nSET_DURATION\t\t\t(set-duration value arg1 ... argN)\n\t\t\t\tvalue must evaluate to a duration that Impro-Visor can read \n\t\t\t\t(e.g. 4, 8, 2., 1+4) and every arg must evaluate to a note\n\n\t\t\t\t\treturn every arg with their duration set to value\n\nSET_RELATIVE_PITCH\t\t(add-duration value arg1 ... argN)\n\t\t\t\tvalue must evaluate to a relative pitch that Impro-Visor can read \n\t\t\t\t(e.g. b-4, -1, #2) and every arg must evaluate to a note\n\n\t\t\t\t\treturn every arg with their relative pitch set to value\n\nTRANSPOSE_DIATONIC\t\t(transpose-diatonic value arg1 ... argN)\n\t\t\t\tvalue must evaluate to a relative pitch that Impro-Visor can read \n\t\t\t\t(e.g. b-4, -1, #2) and every arg must evaluate to a note\n\n\t\t\t\t\treturn every arg with value added to their relative pitches\n\nTRANSPOSE_CHROMATIC\t(transpose-chromatic value arg1 ... argN)\n\t\t\t\tvalue must evaluate to a number or fraction (only in 1/2 increments) \n\t\t\t\tand every arg must be a note\n\n\t\t\t\t\treturn every arg transposed by value number of whole steps. \n\nMAKE_REST\t\t\t(make-rest ar1 ... argN)\n\t\t\t\tevery arg must evaluate to a note\n\t\t\t\t\t\n\t\t\t\t\treturn every arg changed to a rest\n\nNon-Note returning Functions\n\nIF\t\t\t(if arg1 arg2 arg3)\n\t\t\targ1 must evaulate to a boolean\n\t\t\n\t\t\t\tif arg1 is True,\n\t\t\t\t\treturn evaluated arg2\n\t\t\t\telse\n\t\t\t\t\treturn evaluated arg3\n\nABSOLUTE_VALUE\t(abs arg1)\n\t\t\targ1 must evaluate to a number\n\t\t\n\t\t\t\treturn the absolute value of arg1\n\nDURATION\t\t(duration arg1)\n\t\t\targ1 must evaluate to a note\n\t\t\n\t\t\t\treturn the duration of arg1\n\nDURATION+\t\t(duration+ arg1 arg2)\n\t\t\targuments must evaluate to either a note or a duration\n\n\t\t\t\treturn (the duration of arg1 + the duration of arg2)\n\nDURATION-\t\t(duration- arg1 arg2)\n\t\t\targuments must evaluate to either a note or a duration\n\n\t\t\t\treturn (the duration of arg1 - the duration of arg2)\n\nNOTE_CATEGORY\t(note-category arg1)\n\t\t\targ1 must evaluate to a note\n\n\t\t\t\treturn the category of arg1 in its underlying chord\n\t\t\t\t(either C, L, or X)\n\nRELATIVE_PITCH\t(relative-pitch arg1)\n\t\t\targ1 must evaluate to a note\n\n\t\t\t\treturn the relative pitch of arg1 in its underlying chord\n\t\t\t\t(e.g. e4 in a C Major chord would return \"3\")\n\nABSOLUTE_PITCH\t(absolute-pitch arg1)\n\t\t\targ1 must evaluate to a note\n\n\t\t\t\treturn the absolute pitch of arg1 in Impro-Visor lingo\n\t\t\t\t(e.g. c+, g--, d) (look in the help window for more info)\n\t\nPITCH+\t\t(pitch+ arg1 arg2)\n\t\t\targuments must evaluate to either a relative pitch, or a note\n\t\t\n\t\t\t\tif either arg1 or arg2 is a relative pitch string,\n\t\t\t\t\treturn the relative pitch of arg1 added to\n\t\t\t\t\tthe relative pitch of arg2\n\t\t\t\t\t(e.g. \"(pitch+ 3 1)\" would return 3 since 1 is \t\n\t\t\t\t\tthe tonic)\n\t\t\t\telse\n\t\t\t\t\treturn the absolute pitch of arg1 added to\n\t\t\t\t\tthe absolute pitch of arg2\n\nPITCH-\t\t\t(pitch- arg1 arg2)\n\t\t\targuments must evaluate to either a relative pitch, or a note\n\t\t\n\t\t\t\tif either arg1 or arg2 is a relative pitch string,\n\t\t\t\t\treturn the relative pitch of arg1 minus\n\t\t\t\t\tthe relative pitch of arg2\n\t\t\t\t\t(e.g. \"(pitch- 3 1)\" would return 3 since 1 is \t\n\t\t\t\t\tthe tonic)\n\t\t\t\telse\n\t\t\t\t\treturn the absolute pitch of arg1 minus\n\t\t\t\t      \tthe absolute pitch of arg2");
        transformFunctionsPane.setViewportView(functionDocumentationTextArea);

        helpTabbedPane.addTab("Trans Functions", transformFunctionsPane);

        transformHelpPane.setMinimumSize(new java.awt.Dimension(502, 800));

        transformHelpTextArea.setEditable(false);
        transformHelpTextArea.setColumns(20);
        transformHelpTextArea.setRows(5);
        transformHelpTextArea.setTabSize(4);
        transformHelpTextArea.setText("Help for Transforms\n\nSuggestions for using:\nFor use on already moving solos:\n- Open a Transform file\n- Since the solo already has color in it, only select the embellishments to add\n- Make sure an identity substitution, or one that makes no change, is selected and has a high weight\n- Transform the solo\n\nFor use on very basic chordal outlines:\n- Open a Transform file\n- Select all the substitutions you want to have applied, the more the better\n- It is suggested to have the motif identity substitution have a low weight and the embellishment\n   identity substitution have a high weight\n- Transform the outline. \n\nSaving and Changing:\nTransforms are not automatically saved when changed. When a new transform is opened over a \ntransform with unsaved changes, the program will prompt you to save. If the application is being \nclosed however, unsaved changes will be lost, so be sure to save transforms regularly while editing.\n\nTransforms\n\nThe Transform tool can be used to take basic melodies, or chordal outlines, and complicate them by \ntransforming in common jazz idioms. These idioms that transform uses are defined from a \ntransformational grammar built into Impro-Visor. A transform is just a list of substitutions to be \napplied to a selected melody. \n\nThe proccess of applying a transform and each further grammar structure is described at the bottom \nof the help document. \n\nGUI:\nSince a transform is just a list of transforms, the list on the lower left of the panel shows all of the \nsubstitutions in the currently opened transform. \n\nSubstitutions\n\n\tSubstitutions are a wrapper for transformations, which are explained further down, and \n\tare used to group them. They can be used to represent all implementations of an idiom, \n\tmaking it the representation for an idiom in whole for the grammar. There are four \n\tdifferent parts to a substitution.\n\n\tSubstitution Parts:\n\t* name \t\t\t- The name that displays for the substitution in the list, for easy \n\t\t\t   \t   identification. Cannot have spaces\n\t* type\t\t\t- There are two types of substitutions, motifs and embellishments. \n\t\t\t   \t   They are described more below, but each idiom has to be either \n\t\t\t  \t   of the two and they determine when a substitution is attempted \n\t\t\t  \t   to be applied to a melody. \n\t* weight\t\t- Integer that determines how often the substitution will try to be \n\t\t\t   \t   applied and is relative to the other substitution's weights in the \n\t\t\t     \t   transform that have the same substitution type. \n\t* transformations\t- A list of transformations that are defined below.\n\n\tSubstitution Types:\n\t* Motifs are substitutions that likely involve more than one note and give a sense of \n\t   intended progresses between the notes. (e.g. triplet arpeggiation, mordents)\n\t* Embellishments on the otherhand are substitutions that fluff just the target notes of a \n\t   solo and dont change much more than that. (e.g. grace notes, approach tones)\n\n\tSince motifs change the color and tone and embellishments do not, they should not be \n\tapplied to a melody at the same time. For consistent converage of both types of \n\tsubstitutions, substitutions are applied to a melody in two iterators. \n\t\n\tFirst all the motifs are applied to a melody giving a resulting initial transformed melody. \n\tThen the embellishments are applied to the initial transformed melody yielding a final \n\ttransformed melody. That is what is then placed back into the leadsheet. \n\t\n\tGUI:\n\tWhen you click on a substitution from the substitution list, its transformations will appear in \n\tthe list to its right. Tranformations added to that list will then be added to the currently \n\tselected substitution. \n\t\n\tThere are also buttons and boxes to change each of these parts for any selected substitution.\n\n\nTransformations\n\n\tTransformations are basically specific implementations of an idiom that will always \n\tdeterministically result in the same thing given the same input melody selection. \n\tTransformations are defined by two things: a way to transform notes, and a hueristic to \n\tdetermine whether or not a transformation should be applied to a group of notes. \n\n\tTransformation in Grammar Form:\n\t\n\t(transformation\n\t\t(description <string-without-spaces>)\n\t\t(weight <integer>)\n\t\t(source-notes <string> <string> ...)\n\t\t(condition-guard <function>)\n\t\t(target-notes <function|string> <function|string> ...))\n\n\tTransformation Parts:\n\t\t* description\t\t- displays in the list and is used to identify the transformation\n\t\t* weight\t\t- determines how often a transformations is attempted to be \n\t\t\t\t\t   applied, weights are relative to the other transformations in \n\t\t\t\t\t   its substitution\n\t\t* source-notes\t\t- A list of note-variable names used later in the \n\t\t\t\t\t   condition-guard and target-notes. The variable names cannot\n\t\t\t\t\t   be names of functions in the grammar, a possible note string,\n\t\t\t\t\t   a number or contain spaces. (typically they are \"n1\", \"n2\", \n\t\t\t\t\t   \"n3\", etc.) The number of variable names in source-notes \n\t\t\t\t\t   determines how many notes will be transformed. \n\t\t* condition-guard\t- A function that can contain other functions and must return \n\t\t\t\t\t   true for the transformation to be applied (will use variables \n\t\t\t\t\t   names from source-notes).\n\t\t* target-notes\t\t- A list of note-variable names or note returning functions that \n\t\t\t\t\t   replace the source-notes when the transformation is finally \n\t\t\t\t\t   applied.\n\n\tA list of functions the condition-guard and target-notes can use can be found in the\n\tTransform Tab by clicking the button \"Show Transformation Functions\" button.  \n\n\tFor a transformation to be applied, two conditions must be met. The total duration of the \n\tnotes taken in by source-notes must equal the total duration of the notes returned in \n\ttarget-notes. The condition-guard must return true for the note variables bound in \n\tsource-notes. \n\n\tGUI:\n\tThere is a spinner to change the weight of a selected transformation and there is the ability to\n\tadd and delete transformations in the selected substitution. To change other aspects of the\n\ttransformation though requires you to click the Edit Transformation Button.\n\n\tThe Edit Transformation Button will bring up a text area with the actual grammar \n\trepresentation of a transformation, so is only suggested if you know what you are editing.\n\nProccess of Applying a Transform \n\nA Transform is just a list of substitutions. So when it is applied to a melody, it will divide up the\nmelody into selections and transform each. When it is transforming a selection, it orders its \nsubstitutions in a list randomly but with precedence to substitutions with higher weights. It starts\nat the top of the list and tries to apply the selection to the substitution. If the substitution can be\napplied, the selection is modified to the result of the application. If it cannot be applied, the next\nsubstitution in the list is tried. If no substitution can be applied to a particular selection, the \nselection just remains the same. The transformed melody is then placed back into the leadsheet.\n\nProcess of Applying a Substitution\n\nSubstitutions contain a list of transformations. When a substitution is trying to apply itsself to a \nsection of melody, it orders its transformations in a list randomly but with precedence to \ntransformations with higher weights. The substitution will then start at the top of the list and try to \napply the transformation to the melody selection. If the transformation can be applied the result is \nreturned, else the next transformation in the list is tried. If no transformation can be applied to the \nmelody section, then the substitution cannot be applied. \n\nProcess of Applying a Transformation\n\nApplying a transformation takes 3 steps:\n1. The notes in the segment given are associated with variable names in source notes. \n\tIf the segment was \"c4 d4 e2\" and source-notes was (source-notes n1 n2 n3),\n\tThe following would be true: n1 = c4, n2 = d4, n3 = e2\n     If the segment contains too few notes to be associated with source-notes, then the\n     the transformation cannot be applied.\n2. Now that the variables-names now have notes associated with them, we can check the validity\n    of the condition-guard. The condition guard is run and if it returns false, the transformation\n    cannot be applied. If it returns true, then step 3 is run.\n3. Now that the huersitic is satisfied, we can get our resulting notes. Each function in target-notes\n    is evaluated and if every note in the resulting list is valid, then the segment given is now replaced\n    with the notes in the evaluated target-notes. If there is an invalid note, or a function is unable to\n    be evaluated, the transform cannot be applied. \n");
        transformHelpPane.setViewportView(transformHelpTextArea);

        helpTabbedPane.addTab("Transforms", transformHelpPane);

        guideToneHelpPane.setMinimumSize(new java.awt.Dimension(502, 800));

        guideToneHelpTextArea.setEditable(false);
        guideToneHelpTextArea.setColumns(20);
        guideToneHelpTextArea.setRows(5);
        guideToneHelpTextArea.setTabSize(4);
        guideToneHelpTextArea.setText("Help for Guide Tone Lines\n\nGenerating a guide tone line creates a basic melody that can be used as\na basis for improvisation. It creates a line of mostly chord tones that\nhighlight the chord it is being played over. It is a way to start\ngiving shape to a melody based on the chord progression. \n\nTo generate a line from the guide line window:\n\n- Choose either one or two lines\n\t* One line will generate one guide tone line\n\t* Two lines will generate two guide tone lines that alternate\n\n- Choose a direction for the line to follow\n\t* No preference will not have a guiding direction\n\t* Ascending will create a line that is generally moving up\n\t* Descending will create a line that is generally moving down\n\n- For one line:\n   Choose a scale degree to start on\n\t* It is recommended to choose either 3 or 7 if those notes are in \n\t  the first chord\n\t* Can only be used when generating one line\n\n- For two lines:\n   Choose the type of line to create\n  \t* 3-7 line will have the first line start on the 3 of the chord and\n  \t  the second line will start on the 7 of the chord\n  \t* 7-3 line starts on the 7 instead\n  \t* 5-9 line will have the first line start on the 5 of the chord and \n  \t  the second line will start on the 7 of the chord\n  \t* 9-5 line starts on the 9 instead\n\n- Choose a max note duration\n\t* No preference will create a line where each chord has one or two\n\t  notes as guide tones, depending on the number of lines chosen.\n\t* Whole will fill the guide tone line with whole notes. If a chord\n\t  lasts longer than a whole note, it will split that chord into\n\t  two guide tones. \n\t* Half will act similarly to whole, but with half notes\n\t* Quarter will act similarly with quarter notes\n\t* Choosing any option other than no preference will add color tones\n\t  to the line if necessary\n\n- Choose a range for the guide tone line\n\t* On the keyboard, click the two keys that correspond to the high and\n\t  low limit for the preferred range. Once a key is clicked, it will \n\t  turn green\n\t* If two keys are already selected, one must be unselected by clicking\n\t  on it again in order to choose a new note\n\t* The default range is the octave from middle C to the C above it\n\t  (C4 to C5)\n\t* If no keys or only one key is selected, the default range will be\n\t  used.\n\t* The blue keys cannot be selected for a range because those notes\n\t  cannot be displayed in a leadsheet. If these are selected, the \n\t  default range will be used. \n\t* If a range smaller than an octave is selected, the default range \n\t  will be used.\n\nOnce a line is generated, you can improvise over it using the Generate\nSolo Over Line button. This uses transformations applied to the guide\ntone line to create an improvised melody.");
        guideToneHelpPane.setViewportView(guideToneHelpTextArea);

        helpTabbedPane.addTab("Guide Tone", guideToneHelpPane);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(helpTabbedPane, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                HelpDialog dialog = new HelpDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane SoloGenerator;
    private javax.swing.JTextArea alphaCommandList;
    private javax.swing.JScrollPane alphaCommandPane;
    private javax.swing.JScrollPane audioInputPane;
    private javax.swing.JTextArea audioInputPaneText;
    private javax.swing.JTextArea chordList;
    private javax.swing.JScrollPane chordListingPane;
    private javax.swing.JTextArea drawingHelp;
    private javax.swing.JScrollPane drawingHelpPane;
    private javax.swing.JTextArea functionDocumentationTextArea;
    private javax.swing.JScrollPane guideToneHelpPane;
    private javax.swing.JTextArea guideToneHelpTextArea;
    private javax.swing.JScrollPane helpByTopic;
    private javax.swing.JTextArea helpByTopicList;
    private javax.swing.JTabbedPane helpTabbedPane;
    private javax.swing.JTextArea lickGenSettings;
    private javax.swing.JScrollPane lickGenSettingsPane;
    private javax.swing.JScrollPane melodyNotation;
    private javax.swing.JTextArea melodyNotationHelp;
    private javax.swing.JTextArea roadmapHelp;
    private javax.swing.JScrollPane roadmapHelpPane;
    private javax.swing.JTextArea soloGenInstructions;
    private javax.swing.JTextArea styleHelpList1;
    private javax.swing.JScrollPane styleHelpPane;
    private javax.swing.JScrollPane transformFunctionsPane;
    private javax.swing.JScrollPane transformHelpPane;
    private javax.swing.JTextArea transformHelpTextArea;
    // End of variables declaration//GEN-END:variables
    public void showTransformationDocs()
    {
        helpTabbedPane.setSelectedComponent(transformFunctionsPane);
    }
}
